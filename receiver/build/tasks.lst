ARM GAS  /tmp/ccy76Mh1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvResetNextTaskUnblockTime:
  23              	.LFB34:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
ARM GAS  /tmp/ccy76Mh1.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
ARM GAS  /tmp/ccy76Mh1.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sanity check the configuration. */
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef enum
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eNotWaitingNotification = 0,
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eWaitingNotification,
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eNotified
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } eNotifyValue;
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct 	_reent xNewLib_reent;
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * be global, rather than file scope.
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
ARM GAS  /tmp/ccy76Mh1.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccy76Mh1.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;																		\
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
ARM GAS  /tmp/ccy76Mh1.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
ARM GAS  /tmp/ccy76Mh1.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if configUSE_TICK_HOOK > 0
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocation was successful.
ARM GAS  /tmp/ccy76Mh1.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxNewTCB;
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			BaseType_t xRunPrivileged;
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( puxStackBuffer != NULL )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The application provided its own stack.  Note this so no
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				attempt is made to delete the stack should that task be
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				deleted. */
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				deleted again if the task is deleted. */
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		required by the port. */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
ARM GAS  /tmp/ccy76Mh1.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			required.*/
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		updated. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccy76Mh1.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				so far. */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccy76Mh1.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it should run now. */
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccy76Mh1.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
ARM GAS  /tmp/ccy76Mh1.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				blocked list as the same list item is used for both lists. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					directly. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
ARM GAS  /tmp/ccy76Mh1.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not a problem. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
ARM GAS  /tmp/ccy76Mh1.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				both lists. */
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The current task must be in a ready list, so there is
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					no need to check, and the port reset macro can be called
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					directly. */
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccy76Mh1.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list. */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccy76Mh1.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccy76Mh1.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccy76Mh1.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccy76Mh1.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccy76Mh1.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task other than the currently running task was suspended,
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				reset the next expected unblock time in case it referred to the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task that is now in the Suspended state. */
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccy76Mh1.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  /tmp/ccy76Mh1.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccy76Mh1.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn );
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccy76Mh1.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
ARM GAS  /tmp/ccy76Mh1.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldPending = pdTRUE;
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						--uxPendedTicks;
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending == pdTRUE )
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
ARM GAS  /tmp/ccy76Mh1.s 			page 32


1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccy76Mh1.s 			page 33


1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
ARM GAS  /tmp/ccy76Mh1.s 			page 34


1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccy76Mh1.s 			page 35


1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xTickCount;
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			has been found whose block time has not expired there is no need to
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			look any further down the list. */
ARM GAS  /tmp/ccy76Mh1.s 			page 36


1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( ;; )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						to the maximum possible value so it is extremely
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						unlikely that the
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next time through. */
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The delayed list is not empty, get the value of the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item at the head of the delayed list.  This is the time
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						at which the task at the head of the delayed list must
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						be removed from the Blocked state. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( xConstTickCount < xItemValue )
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is not time to unblock this item yet, but the
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							item value is the time at which the task at the head
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							of the blocked list must be removed from the Blocked
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							state -	so record the item value in
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xNextTaskUnblockTime. */
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							break;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						it from the event list. */
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Place the unblocked task into the appropriate ready
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						list. */
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* A task being unblocked cannot cause an immediate
ARM GAS  /tmp/ccy76Mh1.s 			page 37


2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						context switch if preemption is turned off. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Preemption is on, but a context switch should
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							only be performed if the unblocked task has a
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							priority that is equal to or higher than the
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							currently executing task. */
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xSwitchRequired = pdTRUE;
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif /* configUSE_PREEMPTION */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 38


2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccy76Mh1.s 			page 39


2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccy76Mh1.s 			page 40


2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated	time so far.  The time the task started running was
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here	so count values are only valid until the timer
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
ARM GAS  /tmp/ccy76Mh1.s 			page 41


2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block indefinitely. */
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler will handle it. */
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will handle it. */
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
ARM GAS  /tmp/ccy76Mh1.s 			page 42


2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is locked. */
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
ARM GAS  /tmp/ccy76Mh1.s 			page 43


2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will manage it correctly. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is called with the scheduler locked so interrupts will not
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		access the lists at the same time. */
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check, and the port reset macro can be called directly. */
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		available and a task that is blocking indefinitely can enter the
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /tmp/ccy76Mh1.s 			page 44


2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				will block indefinitely. */
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Calculate the time at which the task should be woken if the
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				event does not occur.  This may overflow but this doesn't
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				matter. */
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELAY_UNTIL();
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			defined. */
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xWaitIndefinitely;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
ARM GAS  /tmp/ccy76Mh1.s 			page 45


2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
ARM GAS  /tmp/ccy76Mh1.s 			page 46


2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
ARM GAS  /tmp/ccy76Mh1.s 			page 47


2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			therefore never time out. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccy76Mh1.s 			page 48


2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
ARM GAS  /tmp/ccy76Mh1.s 			page 49


2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
ARM GAS  /tmp/ccy76Mh1.s 			page 50


2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
ARM GAS  /tmp/ccy76Mh1.s 			page 51


2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 52


2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->ulNotifiedValue = 0;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccy76Mh1.s 			page 53


2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
ARM GAS  /tmp/ccy76Mh1.s 			page 54


2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
ARM GAS  /tmp/ccy76Mh1.s 			page 55


3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* vTaskDelete */
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too. */
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxNewTCB;
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the TCB then the stack. */
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the implementation of the port malloc function. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
ARM GAS  /tmp/ccy76Mh1.s 			page 56


3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created.
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be deleted later if required. */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxNewTCB );
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t *pxStack;
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxStack != NULL )
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function. */
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxStack;
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				again. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxStack );
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
ARM GAS  /tmp/ccy76Mh1.s 			page 57


3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a chance
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it is actually just blocked indefinitely - so really it should
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be reported as being in the Blocked state. */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  /tmp/ccy76Mh1.s 			page 58


3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
ARM GAS  /tmp/ccy76Mh1.s 			page 59


3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			place. */
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 60


3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
  25              		.loc 1 3348 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  30              		.loc 1 3351 0
  31 0000 064A     		ldr	r2, .L7
  32 0002 1368     		ldr	r3, [r2]
  33 0004 1968     		ldr	r1, [r3]
  34 0006 064B     		ldr	r3, .L7+4
  35 0008 19B9     		cbnz	r1, .L5
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
  36              		.loc 1 3357 0
  37 000a 4FF0FF32 		mov	r2, #-1
  38              	.L6:
  39              	.LBB8:
  40              	.LBB9:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  41              		.loc 1 3366 0
  42 000e 1A60     		str	r2, [r3]
  43 0010 7047     		bx	lr
  44              	.L5:
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  45              		.loc 1 3365 0
  46 0012 1268     		ldr	r2, [r2]
  47              	.LVL0:
  48 0014 D268     		ldr	r2, [r2, #12]
  49              	.LVL1:
  50              		.loc 1 3366 0
  51 0016 D268     		ldr	r2, [r2, #12]
  52              	.LVL2:
  53 0018 5268     		ldr	r2, [r2, #4]
  54              	.LVL3:
ARM GAS  /tmp/ccy76Mh1.s 			page 61


  55 001a F8E7     		b	.L6
  56              	.L8:
  57              		.align	2
  58              	.L7:
  59 001c 00000000 		.word	.LANCHOR0
  60 0020 00000000 		.word	.LANCHOR1
  61              	.LBE9:
  62              	.LBE8:
  63              		.cfi_endproc
  64              	.LFE34:
  66              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  67              		.align	1
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	prvTaskIsTaskSuspended:
  74              	.LFB8:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  75              		.loc 1 1374 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL4:
  80 0000 08B5     		push	{r3, lr}
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 3, -8
  84              		.cfi_offset 14, -4
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85              		.loc 1 1382 0
  86 0002 10B9     		cbnz	r0, .L10
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  87              		.loc 1 1382 0 is_stmt 0 discriminator 1
  88 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
  89              	.LVL5:
  90              	.L11:
  91 0008 FEE7     		b	.L11
  92              	.LVL6:
  93              	.L10:
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  94              		.loc 1 1385 0 is_stmt 1
  95 000a 4269     		ldr	r2, [r0, #20]
  96 000c 064B     		ldr	r3, .L16
  97 000e 9A42     		cmp	r2, r3
  98 0010 01D0     		beq	.L12
  99              	.LVL7:
 100              	.L15:
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 101              		.loc 1 1375 0
 102 0012 0020     		movs	r0, #0
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 103              		.loc 1 1412 0
 104 0014 08BD     		pop	{r3, pc}
 105              	.LVL8:
 106              	.L12:
 107              	.LBB12:
ARM GAS  /tmp/ccy76Mh1.s 			page 62


 108              	.LBB13:
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 109              		.loc 1 1388 0
 110 0016 806A     		ldr	r0, [r0, #40]
 111              	.LVL9:
 112 0018 044B     		ldr	r3, .L16+4
 113 001a 9842     		cmp	r0, r3
 114 001c F9D0     		beq	.L15
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 115              		.loc 1 1392 0
 116 001e B0FA80F0 		clz	r0, r0
 117 0022 4009     		lsrs	r0, r0, #5
 118              	.LVL10:
 119              	.LBE13:
 120              	.LBE12:
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 121              		.loc 1 1411 0
 122 0024 08BD     		pop	{r3, pc}
 123              	.L17:
 124 0026 00BF     		.align	2
 125              	.L16:
 126 0028 00000000 		.word	.LANCHOR2
 127 002c 00000000 		.word	.LANCHOR3
 128              		.cfi_endproc
 129              	.LFE8:
 131              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 132              		.align	1
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu softvfp
 138              	prvAddCurrentTaskToDelayedList:
 139              	.LFB31:
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
 140              		.loc 1 3072 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              	.LVL11:
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 145              		.loc 1 3074 0
 146 0000 0E4B     		ldr	r3, .L21
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
 147              		.loc 1 3072 0
 148 0002 10B5     		push	{r4, lr}
 149              	.LCFI1:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 4, -8
 152              		.cfi_offset 14, -4
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 153              		.loc 1 3074 0
 154 0004 1A68     		ldr	r2, [r3]
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
 155              		.loc 1 3072 0
 156 0006 0446     		mov	r4, r0
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 157              		.loc 1 3074 0
ARM GAS  /tmp/ccy76Mh1.s 			page 63


 158 0008 5060     		str	r0, [r2, #4]
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 159              		.loc 1 3076 0
 160 000a 0D4A     		ldr	r2, .L21+4
 161 000c 1268     		ldr	r2, [r2]
 162 000e 9042     		cmp	r0, r2
 163 0010 07D2     		bcs	.L19
 164              	.LVL12:
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 165              		.loc 1 3098 0
 166 0012 BDE81040 		pop	{r4, lr}
 167              	.LCFI2:
 168              		.cfi_remember_state
 169              		.cfi_restore 14
 170              		.cfi_restore 4
 171              		.cfi_def_cfa_offset 0
 172              	.LBB16:
 173              	.LBB17:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 174              		.loc 1 3079 0
 175 0016 0B4A     		ldr	r2, .L21+8
 176 0018 1068     		ldr	r0, [r2]
 177              	.LVL13:
 178 001a 1968     		ldr	r1, [r3]
 179 001c 0431     		adds	r1, r1, #4
 180 001e FFF7FEBF 		b	vListInsert
 181              	.LVL14:
 182              	.L19:
 183              	.LCFI3:
 184              		.cfi_restore_state
 185              	.LBE17:
 186              	.LBE16:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 187              		.loc 1 3084 0
 188 0022 094A     		ldr	r2, .L21+12
 189 0024 1068     		ldr	r0, [r2]
 190              	.LVL15:
 191 0026 1968     		ldr	r1, [r3]
 192 0028 0431     		adds	r1, r1, #4
 193 002a FFF7FEFF 		bl	vListInsert
 194              	.LVL16:
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 195              		.loc 1 3089 0
 196 002e 074B     		ldr	r3, .L21+16
 197 0030 1A68     		ldr	r2, [r3]
 198 0032 9442     		cmp	r4, r2
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 199              		.loc 1 3091 0
 200 0034 38BF     		it	cc
 201 0036 1C60     		strcc	r4, [r3]
 202 0038 10BD     		pop	{r4, pc}
 203              	.LVL17:
 204              	.L22:
 205 003a 00BF     		.align	2
 206              	.L21:
 207 003c 00000000 		.word	.LANCHOR4
 208 0040 00000000 		.word	.LANCHOR5
ARM GAS  /tmp/ccy76Mh1.s 			page 64


 209 0044 00000000 		.word	.LANCHOR6
 210 0048 00000000 		.word	.LANCHOR0
 211 004c 00000000 		.word	.LANCHOR1
 212              		.cfi_endproc
 213              	.LFE31:
 215              		.section	.text.xTaskGenericCreate,"ax",%progbits
 216              		.align	1
 217              		.global	xTaskGenericCreate
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	xTaskGenericCreate:
 224              	.LFB1:
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 225              		.loc 1 552 0
 226              		.cfi_startproc
 227              		@ args = 16, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              	.LVL18:
 230 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 231              	.LCFI4:
 232              		.cfi_def_cfa_offset 40
 233              		.cfi_offset 3, -40
 234              		.cfi_offset 4, -36
 235              		.cfi_offset 5, -32
 236              		.cfi_offset 6, -28
 237              		.cfi_offset 7, -24
 238              		.cfi_offset 8, -20
 239              		.cfi_offset 9, -16
 240              		.cfi_offset 10, -12
 241              		.cfi_offset 11, -8
 242              		.cfi_offset 14, -4
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 243              		.loc 1 552 0
 244 0004 0A9E     		ldr	r6, [sp, #40]
 245 0006 8846     		mov	r8, r1
 246 0008 1746     		mov	r7, r2
 247 000a 9B46     		mov	fp, r3
 248 000c DDF82C90 		ldr	r9, [sp, #44]
 249 0010 0C9D     		ldr	r5, [sp, #48]
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 250              		.loc 1 557 0
 251 0012 8246     		mov	r10, r0
 252 0014 10B9     		cbnz	r0, .L24
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 253              		.loc 1 557 0 is_stmt 0 discriminator 1
 254 0016 FFF7FEFF 		bl	ulPortSetInterruptMask
 255              	.LVL19:
 256              	.L25:
 257 001a FEE7     		b	.L25
 258              	.LVL20:
 259              	.L24:
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260              		.loc 1 558 0 is_stmt 1
 261 001c 062E     		cmp	r6, #6
 262 001e 02D9     		bls	.L26
ARM GAS  /tmp/ccy76Mh1.s 			page 65


 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 263              		.loc 1 558 0 is_stmt 0 discriminator 1
 264 0020 FFF7FEFF 		bl	ulPortSetInterruptMask
 265              	.LVL21:
 266              	.L27:
 267 0024 FEE7     		b	.L27
 268              	.LVL22:
 269              	.L26:
 270              	.LBB25:
 271              	.LBB26:
 272              	.LBB27:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273              		.loc 1 3134 0 is_stmt 1
 274 0026 35B9     		cbnz	r5, .L28
 275 0028 9000     		lsls	r0, r2, #2
 276              	.LVL23:
 277 002a FFF7FEFF 		bl	pvPortMalloc
 278              	.LVL24:
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 279              		.loc 1 3136 0
 280 002e 0546     		mov	r5, r0
 281              	.LVL25:
 282 0030 0028     		cmp	r0, #0
 283 0032 00F09780 		beq	.L40
 284              	.LVL26:
 285              	.L28:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 286              		.loc 1 3140 0
 287 0036 5420     		movs	r0, #84
 288 0038 FFF7FEFF 		bl	pvPortMalloc
 289              	.LVL27:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 290              		.loc 1 3142 0
 291 003c 0446     		mov	r4, r0
 292 003e 0028     		cmp	r0, #0
 293 0040 00F08D80 		beq	.L30
 294              	.LBE27:
 295              	.LBE26:
 296              	.LBE25:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 297              		.loc 1 600 0
 298 0044 07F18047 		add	r7, r7, #1073741824
 299              	.LVL28:
 300 0048 013F     		subs	r7, r7, #1
 301              	.LVL29:
 302              	.LBB32:
 303              	.LBB30:
 304              	.LBB28:
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 305              		.loc 1 3145 0
 306 004a 0563     		str	r5, [r0, #48]
 307              	.LVL30:
 308              	.LBE28:
 309              	.LBE30:
 310              	.LBE32:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 311              		.loc 1 600 0
ARM GAS  /tmp/ccy76Mh1.s 			page 66


 312 004c 05EB8705 		add	r5, r5, r7, lsl #2
 313              	.LVL31:
 314 0050 08F1FF33 		add	r3, r8, #-1
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315              		.loc 1 601 0
 316 0054 25F00705 		bic	r5, r5, #7
 317              	.LVL32:
 318 0058 00F13402 		add	r2, r0, #52
 319 005c 08F10F08 		add	r8, r8, #15
 320              	.LVL33:
 321              	.L31:
 322              	.LBB33:
 323              	.LBB34:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324              		.loc 1 2840 0
 325 0060 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 326 0062 02F8011B 		strb	r1, [r2], #1
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 327              		.loc 1 2845 0
 328 0066 13F8011F 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2
 329              	.LVL34:
 330 006a 09B1     		cbz	r1, .L32
 331              	.LVL35:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 332              		.loc 1 2838 0
 333 006c 4345     		cmp	r3, r8
 334 006e F7D1     		bne	.L31
 335              	.LVL36:
 336              	.L32:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337              		.loc 1 2857 0
 338 0070 4FF00008 		mov	r8, #0
 339              	.LVL37:
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 340              		.loc 1 2878 0
 341 0074 271D     		adds	r7, r4, #4
 342              	.LVL38:
 343 0076 3846     		mov	r0, r7
 344              	.LVL39:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345              		.loc 1 2857 0
 346 0078 84F84380 		strb	r8, [r4, #67]
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 347              		.loc 1 2870 0
 348 007c E662     		str	r6, [r4, #44]
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 349              		.loc 1 2873 0
 350 007e 6664     		str	r6, [r4, #68]
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 351              		.loc 1 2874 0
 352 0080 C4F84880 		str	r8, [r4, #72]
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 353              		.loc 1 2878 0
 354 0084 FFF7FEFF 		bl	vListInitialiseItem
 355              	.LVL40:
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356              		.loc 1 2879 0
ARM GAS  /tmp/ccy76Mh1.s 			page 67


 357 0088 04F11800 		add	r0, r4, #24
 358 008c FFF7FEFF 		bl	vListInitialiseItem
 359              	.LVL41:
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 360              		.loc 1 2886 0
 361 0090 C6F10703 		rsb	r3, r6, #7
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 362              		.loc 1 2929 0
 363 0094 C4F84C80 		str	r8, [r4, #76]
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 364              		.loc 1 2883 0
 365 0098 2461     		str	r4, [r4, #16]
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 366              		.loc 1 2886 0
 367 009a A361     		str	r3, [r4, #24]
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 368              		.loc 1 2887 0
 369 009c 6462     		str	r4, [r4, #36]
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 370              		.loc 1 2930 0
 371 009e 84F85080 		strb	r8, [r4, #80]
 372              	.LVL42:
 373              	.LBE34:
 374              	.LBE33:
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 375              		.loc 1 633 0
 376 00a2 5A46     		mov	r2, fp
 377 00a4 5146     		mov	r1, r10
 378 00a6 2846     		mov	r0, r5
 379 00a8 FFF7FEFF 		bl	pxPortInitialiseStack
 380              	.LVL43:
 381 00ac 2060     		str	r0, [r4]
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 382              		.loc 1 637 0
 383 00ae B9F1000F 		cmp	r9, #0
 384 00b2 01D0     		beq	.L33
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 385              		.loc 1 642 0
 386 00b4 C9F80040 		str	r4, [r9]
 387              	.L33:
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 388              		.loc 1 651 0
 389 00b8 FFF7FEFF 		bl	vPortEnterCritical
 390              	.LVL44:
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 391              		.loc 1 653 0
 392 00bc 304A     		ldr	r2, .L51
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 393              		.loc 1 654 0
 394 00be 314D     		ldr	r5, .L51+4
 395              	.LVL45:
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 396              		.loc 1 653 0
 397 00c0 1368     		ldr	r3, [r2]
 398 00c2 DFF8E490 		ldr	r9, .L51+40
 399 00c6 0133     		adds	r3, r3, #1
 400 00c8 1360     		str	r3, [r2]
ARM GAS  /tmp/ccy76Mh1.s 			page 68


 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 401              		.loc 1 654 0
 402 00ca 2B68     		ldr	r3, [r5]
 403 00cc 002B     		cmp	r3, #0
 404 00ce 4CD1     		bne	.L34
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 405              		.loc 1 658 0
 406 00d0 2C60     		str	r4, [r5]
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 407              		.loc 1 660 0
 408 00d2 1268     		ldr	r2, [r2]
 409 00d4 012A     		cmp	r2, #1
 410 00d6 22D1     		bne	.L36
 411 00d8 9846     		mov	r8, r3
 412              	.L37:
 413              	.LBB35:
 414              	.LBB36:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 415              		.loc 1 3004 0
 416 00da 09EB0800 		add	r0, r9, r8
 417 00de 08F11408 		add	r8, r8, #20
 418 00e2 FFF7FEFF 		bl	vListInitialise
 419              	.LVL46:
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 420              		.loc 1 3002 0
 421 00e6 B8F18C0F 		cmp	r8, #140
 422 00ea F6D1     		bne	.L37
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 423              		.loc 1 3007 0
 424 00ec DFF8BCA0 		ldr	r10, .L51+44
 425              	.LVL47:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 426              		.loc 1 3008 0
 427 00f0 DFF8BC80 		ldr	r8, .L51+48
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 428              		.loc 1 3007 0
 429 00f4 5046     		mov	r0, r10
 430 00f6 FFF7FEFF 		bl	vListInitialise
 431              	.LVL48:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 432              		.loc 1 3008 0
 433 00fa 4046     		mov	r0, r8
 434 00fc FFF7FEFF 		bl	vListInitialise
 435              	.LVL49:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436              		.loc 1 3009 0
 437 0100 2148     		ldr	r0, .L51+8
 438 0102 FFF7FEFF 		bl	vListInitialise
 439              	.LVL50:
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 440              		.loc 1 3013 0
 441 0106 2148     		ldr	r0, .L51+12
 442 0108 FFF7FEFF 		bl	vListInitialise
 443              	.LVL51:
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 444              		.loc 1 3019 0
 445 010c 2048     		ldr	r0, .L51+16
ARM GAS  /tmp/ccy76Mh1.s 			page 69


 446 010e FFF7FEFF 		bl	vListInitialise
 447              	.LVL52:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 448              		.loc 1 3025 0
 449 0112 204B     		ldr	r3, .L51+20
 450 0114 C3F800A0 		str	r10, [r3]
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 451              		.loc 1 3026 0
 452 0118 1F4B     		ldr	r3, .L51+24
 453 011a C3F80080 		str	r8, [r3]
 454              	.L36:
 455              	.LBE36:
 456              	.LBE35:
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 457              		.loc 1 694 0
 458 011e 1F4A     		ldr	r2, .L51+28
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 459              		.loc 1 704 0
 460 0120 1F49     		ldr	r1, .L51+32
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 694 0
 462 0122 1368     		ldr	r3, [r2]
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463              		.loc 1 704 0
 464 0124 0868     		ldr	r0, [r1]
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465              		.loc 1 694 0
 466 0126 0133     		adds	r3, r3, #1
 467 0128 1360     		str	r3, [r2]
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468              		.loc 1 704 0
 469 012a E26A     		ldr	r2, [r4, #44]
 470 012c 0124     		movs	r4, #1
 471 012e 04FA02F3 		lsl	r3, r4, r2
 472 0132 0343     		orrs	r3, r3, r0
 473 0134 1420     		movs	r0, #20
 474 0136 0B60     		str	r3, [r1]
 475 0138 00FB0290 		mla	r0, r0, r2, r9
 476 013c 3946     		mov	r1, r7
 477 013e FFF7FEFF 		bl	vListInsertEnd
 478              	.LVL53:
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 479              		.loc 1 709 0
 480 0142 FFF7FEFF 		bl	vPortExitCritical
 481              	.LVL54:
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 482              		.loc 1 719 0
 483 0146 174B     		ldr	r3, .L51+36
 484 0148 1B68     		ldr	r3, [r3]
 485 014a 2BB1     		cbz	r3, .L23
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 486              		.loc 1 723 0
 487 014c 2B68     		ldr	r3, [r5]
 488 014e DB6A     		ldr	r3, [r3, #44]
 489 0150 9E42     		cmp	r6, r3
 490 0152 01D9     		bls	.L23
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccy76Mh1.s 			page 70


 491              		.loc 1 725 0
 492 0154 FFF7FEFF 		bl	vPortYield
 493              	.LVL55:
 494              	.L23:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 495              		.loc 1 739 0
 496 0158 2046     		mov	r0, r4
 497 015a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 498              	.LVL56:
 499              	.L30:
 500              	.LBB37:
 501              	.LBB31:
 502              	.LBB29:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 503              		.loc 1 3151 0
 504 015e 2846     		mov	r0, r5
 505              	.LVL57:
 506 0160 FFF7FEFF 		bl	vPortFree
 507              	.LVL58:
 508              	.L40:
 509              	.LBE29:
 510              	.LBE31:
 511              	.LBE37:
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 512              		.loc 1 713 0
 513 0164 4FF0FF34 		mov	r4, #-1
 514 0168 F6E7     		b	.L23
 515              	.LVL59:
 516              	.L34:
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 517              		.loc 1 677 0
 518 016a 0E4B     		ldr	r3, .L51+36
 519 016c 1B68     		ldr	r3, [r3]
 520 016e 002B     		cmp	r3, #0
 521 0170 D5D1     		bne	.L36
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 522              		.loc 1 679 0
 523 0172 2B68     		ldr	r3, [r5]
 524 0174 DB6A     		ldr	r3, [r3, #44]
 525 0176 9E42     		cmp	r6, r3
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 526              		.loc 1 681 0
 527 0178 28BF     		it	cs
 528 017a 2C60     		strcs	r4, [r5]
 529 017c CFE7     		b	.L36
 530              	.L52:
 531 017e 00BF     		.align	2
 532              	.L51:
 533 0180 00000000 		.word	.LANCHOR7
 534 0184 00000000 		.word	.LANCHOR4
 535 0188 00000000 		.word	.LANCHOR3
 536 018c 00000000 		.word	.LANCHOR11
 537 0190 00000000 		.word	.LANCHOR2
 538 0194 00000000 		.word	.LANCHOR0
 539 0198 00000000 		.word	.LANCHOR6
 540 019c 00000000 		.word	.LANCHOR13
 541 01a0 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/ccy76Mh1.s 			page 71


 542 01a4 00000000 		.word	.LANCHOR12
 543 01a8 00000000 		.word	.LANCHOR8
 544 01ac 00000000 		.word	.LANCHOR9
 545 01b0 00000000 		.word	.LANCHOR10
 546              		.cfi_endproc
 547              	.LFE1:
 549              		.section	.text.vTaskDelete,"ax",%progbits
 550              		.align	1
 551              		.global	vTaskDelete
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	vTaskDelete:
 558              	.LFB2:
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 559              		.loc 1 745 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              	.LVL60:
 564 0000 38B5     		push	{r3, r4, r5, lr}
 565              	.LCFI5:
 566              		.cfi_def_cfa_offset 16
 567              		.cfi_offset 3, -16
 568              		.cfi_offset 4, -12
 569              		.cfi_offset 5, -8
 570              		.cfi_offset 14, -4
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 571              		.loc 1 745 0
 572 0002 0446     		mov	r4, r0
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 573              		.loc 1 748 0
 574 0004 FFF7FEFF 		bl	vPortEnterCritical
 575              	.LVL61:
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576              		.loc 1 752 0
 577 0008 0CB9     		cbnz	r4, .L54
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578              		.loc 1 752 0 is_stmt 0 discriminator 1
 579 000a 214B     		ldr	r3, .L65
 580 000c 1C68     		ldr	r4, [r3]
 581              	.LVL62:
 582              	.L54:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 583              		.loc 1 758 0 is_stmt 1 discriminator 4
 584 000e 251D     		adds	r5, r4, #4
 585 0010 2846     		mov	r0, r5
 586 0012 FFF7FEFF 		bl	uxListRemove
 587              	.LVL63:
 588 0016 60B9     		cbnz	r0, .L55
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 589              		.loc 1 760 0
 590 0018 1421     		movs	r1, #20
 591 001a E06A     		ldr	r0, [r4, #44]
 592 001c 1D4B     		ldr	r3, .L65+4
 593 001e 4143     		muls	r1, r0, r1
ARM GAS  /tmp/ccy76Mh1.s 			page 72


 594 0020 5B58     		ldr	r3, [r3, r1]
 595 0022 33B9     		cbnz	r3, .L55
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 596              		.loc 1 760 0 is_stmt 0 discriminator 1
 597 0024 0122     		movs	r2, #1
 598 0026 1C49     		ldr	r1, .L65+8
 599 0028 8240     		lsls	r2, r2, r0
 600 002a 0B68     		ldr	r3, [r1]
 601 002c 23EA0203 		bic	r3, r3, r2
 602 0030 0B60     		str	r3, [r1]
 603              	.L55:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 604              		.loc 1 768 0 is_stmt 1
 605 0032 A36A     		ldr	r3, [r4, #40]
 606 0034 1BB1     		cbz	r3, .L56
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 607              		.loc 1 770 0
 608 0036 04F11800 		add	r0, r4, #24
 609 003a FFF7FEFF 		bl	uxListRemove
 610              	.LVL64:
 611              	.L56:
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 612              		.loc 1 777 0
 613 003e 2946     		mov	r1, r5
 614 0040 1648     		ldr	r0, .L65+12
 615 0042 FFF7FEFF 		bl	vListInsertEnd
 616              	.LVL65:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 617              		.loc 1 782 0
 618 0046 164A     		ldr	r2, .L65+16
 619 0048 1368     		ldr	r3, [r2]
 620 004a 0133     		adds	r3, r3, #1
 621 004c 1360     		str	r3, [r2]
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622              		.loc 1 786 0
 623 004e 154A     		ldr	r2, .L65+20
 624 0050 1368     		ldr	r3, [r2]
 625 0052 0133     		adds	r3, r3, #1
 626 0054 1360     		str	r3, [r2]
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627              		.loc 1 790 0
 628 0056 FFF7FEFF 		bl	vPortExitCritical
 629              	.LVL66:
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 630              		.loc 1 794 0
 631 005a 134B     		ldr	r3, .L65+24
 632 005c 1B68     		ldr	r3, [r3]
 633 005e ABB1     		cbz	r3, .L53
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 634              		.loc 1 796 0
 635 0060 0B4B     		ldr	r3, .L65
 636 0062 1B68     		ldr	r3, [r3]
 637 0064 9C42     		cmp	r4, r3
 638 0066 09D1     		bne	.L58
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639              		.loc 1 798 0
 640 0068 104B     		ldr	r3, .L65+28
ARM GAS  /tmp/ccy76Mh1.s 			page 73


 641 006a 1B68     		ldr	r3, [r3]
 642 006c 13B1     		cbz	r3, .L59
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643              		.loc 1 798 0 is_stmt 0 discriminator 1
 644 006e FFF7FEFF 		bl	ulPortSetInterruptMask
 645              	.LVL67:
 646              	.L60:
 647 0072 FEE7     		b	.L60
 648              	.L59:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649              		.loc 1 819 0 is_stmt 1
 650 0074 BDE83840 		pop	{r3, r4, r5, lr}
 651              	.LCFI6:
 652              		.cfi_remember_state
 653              		.cfi_restore 14
 654              		.cfi_restore 5
 655              		.cfi_restore 4
 656              		.cfi_restore 3
 657              		.cfi_def_cfa_offset 0
 658              	.LVL68:
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659              		.loc 1 806 0
 660 0078 FFF7FEBF 		b	vPortYield
 661              	.LVL69:
 662              	.L58:
 663              	.LCFI7:
 664              		.cfi_restore_state
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 665              		.loc 1 812 0
 666 007c FFF7FEFF 		bl	vPortEnterCritical
 667              	.LVL70:
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 668              		.loc 1 814 0
 669 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 670              	.LVL71:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671              		.loc 1 819 0
 672 0084 BDE83840 		pop	{r3, r4, r5, lr}
 673              	.LCFI8:
 674              		.cfi_remember_state
 675              		.cfi_restore 14
 676              		.cfi_restore 5
 677              		.cfi_restore 4
 678              		.cfi_restore 3
 679              		.cfi_def_cfa_offset 0
 680              	.LVL72:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 681              		.loc 1 816 0
 682 0088 FFF7FEBF 		b	vPortExitCritical
 683              	.LVL73:
 684              	.L53:
 685              	.LCFI9:
 686              		.cfi_restore_state
 687 008c 38BD     		pop	{r3, r4, r5, pc}
 688              	.LVL74:
 689              	.L66:
 690 008e 00BF     		.align	2
ARM GAS  /tmp/ccy76Mh1.s 			page 74


 691              	.L65:
 692 0090 00000000 		.word	.LANCHOR4
 693 0094 00000000 		.word	.LANCHOR8
 694 0098 00000000 		.word	.LANCHOR14
 695 009c 00000000 		.word	.LANCHOR11
 696 00a0 00000000 		.word	.LANCHOR15
 697 00a4 00000000 		.word	.LANCHOR13
 698 00a8 00000000 		.word	.LANCHOR12
 699 00ac 00000000 		.word	.LANCHOR16
 700              		.cfi_endproc
 701              	.LFE2:
 703              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 704              		.align	1
 705              		.global	uxTaskPriorityGet
 706              		.syntax unified
 707              		.thumb
 708              		.thumb_func
 709              		.fpu softvfp
 711              	uxTaskPriorityGet:
 712              	.LFB4:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 713              		.loc 1 1059 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 717              	.LVL75:
 718 0000 10B5     		push	{r4, lr}
 719              	.LCFI10:
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 4, -8
 722              		.cfi_offset 14, -4
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 723              		.loc 1 1059 0
 724 0002 0446     		mov	r4, r0
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 725              		.loc 1 1063 0
 726 0004 FFF7FEFF 		bl	vPortEnterCritical
 727              	.LVL76:
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 728              		.loc 1 1067 0
 729 0008 0CB9     		cbnz	r4, .L68
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 730              		.loc 1 1067 0 is_stmt 0 discriminator 1
 731 000a 034B     		ldr	r3, .L70
 732 000c 1C68     		ldr	r4, [r3]
 733              	.LVL77:
 734              	.L68:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 735              		.loc 1 1068 0 is_stmt 1 discriminator 4
 736 000e E46A     		ldr	r4, [r4, #44]
 737              	.LVL78:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 738              		.loc 1 1070 0 discriminator 4
 739 0010 FFF7FEFF 		bl	vPortExitCritical
 740              	.LVL79:
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 741              		.loc 1 1073 0 discriminator 4
ARM GAS  /tmp/ccy76Mh1.s 			page 75


 742 0014 2046     		mov	r0, r4
 743 0016 10BD     		pop	{r4, pc}
 744              	.LVL80:
 745              	.L71:
 746              		.align	2
 747              	.L70:
 748 0018 00000000 		.word	.LANCHOR4
 749              		.cfi_endproc
 750              	.LFE4:
 752              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 753              		.align	1
 754              		.global	uxTaskPriorityGetFromISR
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu softvfp
 760              	uxTaskPriorityGetFromISR:
 761              	.LFB5:
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 762              		.loc 1 1081 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              	.LVL81:
 767 0000 10B5     		push	{r4, lr}
 768              	.LCFI11:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 4, -8
 771              		.cfi_offset 14, -4
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 772              		.loc 1 1081 0
 773 0002 0446     		mov	r4, r0
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 774              		.loc 1 1101 0
 775 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 776              	.LVL82:
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 777              		.loc 1 1103 0
 778 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 779              	.LVL83:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 780              		.loc 1 1107 0
 781 000c 0CB9     		cbnz	r4, .L73
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 782              		.loc 1 1107 0 is_stmt 0 discriminator 1
 783 000e 034B     		ldr	r3, .L75
 784 0010 1C68     		ldr	r4, [r3]
 785              	.LVL84:
 786              	.L73:
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 787              		.loc 1 1108 0 is_stmt 1 discriminator 4
 788 0012 E46A     		ldr	r4, [r4, #44]
 789              	.LVL85:
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 790              		.loc 1 1110 0 discriminator 4
 791 0014 FFF7FEFF 		bl	vPortClearInterruptMask
 792              	.LVL86:
ARM GAS  /tmp/ccy76Mh1.s 			page 76


1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793              		.loc 1 1113 0 discriminator 4
 794 0018 2046     		mov	r0, r4
 795 001a 10BD     		pop	{r4, pc}
 796              	.LVL87:
 797              	.L76:
 798              		.align	2
 799              	.L75:
 800 001c 00000000 		.word	.LANCHOR4
 801              		.cfi_endproc
 802              	.LFE5:
 804              		.section	.text.vTaskPrioritySet,"ax",%progbits
 805              		.align	1
 806              		.global	vTaskPrioritySet
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 810              		.fpu softvfp
 812              	vTaskPrioritySet:
 813              	.LFB6:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 814              		.loc 1 1121 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 818              	.LVL88:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 819              		.loc 1 1126 0
 820 0000 0629     		cmp	r1, #6
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 821              		.loc 1 1121 0
 822 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 823              	.LCFI12:
 824              		.cfi_def_cfa_offset 24
 825              		.cfi_offset 4, -24
 826              		.cfi_offset 5, -20
 827              		.cfi_offset 6, -16
 828              		.cfi_offset 7, -12
 829              		.cfi_offset 8, -8
 830              		.cfi_offset 14, -4
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 831              		.loc 1 1121 0
 832 0006 0446     		mov	r4, r0
 833 0008 0D46     		mov	r5, r1
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 834              		.loc 1 1126 0
 835 000a 02D9     		bls	.L78
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836              		.loc 1 1126 0 is_stmt 0 discriminator 1
 837 000c FFF7FEFF 		bl	ulPortSetInterruptMask
 838              	.LVL89:
 839              	.L79:
 840 0010 FEE7     		b	.L79
 841              	.LVL90:
 842              	.L78:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 843              		.loc 1 1138 0 is_stmt 1
ARM GAS  /tmp/ccy76Mh1.s 			page 77


 844 0012 FFF7FEFF 		bl	vPortEnterCritical
 845              	.LVL91:
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 846              		.loc 1 1142 0
 847 0016 0CB9     		cbnz	r4, .L80
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848              		.loc 1 1142 0 is_stmt 0 discriminator 1
 849 0018 254B     		ldr	r3, .L94
 850 001a 1C68     		ldr	r4, [r3]
 851              	.LVL92:
 852              	.L80:
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 853              		.loc 1 1148 0 is_stmt 1 discriminator 4
 854 001c 626C     		ldr	r2, [r4, #68]
 855              	.LVL93:
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 856              		.loc 1 1156 0 discriminator 4
 857 001e 9542     		cmp	r5, r2
 858 0020 3BD0     		beq	.L82
 859 0022 234B     		ldr	r3, .L94
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 860              		.loc 1 1160 0
 861 0024 3DD9     		bls	.L83
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 862              		.loc 1 1162 0
 863 0026 1968     		ldr	r1, [r3]
 864 0028 8C42     		cmp	r4, r1
 865 002a 3FD0     		beq	.L93
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 866              		.loc 1 1167 0
 867 002c 1B68     		ldr	r3, [r3]
 868 002e DE6A     		ldr	r6, [r3, #44]
 869 0030 B542     		cmp	r5, r6
 870 0032 34BF     		ite	cc
 871 0034 0026     		movcc	r6, #0
 872 0036 0126     		movcs	r6, #1
 873              	.L84:
 874              	.LVL94:
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875              		.loc 1 1200 0
 876 0038 E76A     		ldr	r7, [r4, #44]
 877              	.LVL95:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 878              		.loc 1 1226 0
 879 003a A369     		ldr	r3, [r4, #24]
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 880              		.loc 1 1206 0
 881 003c BA42     		cmp	r2, r7
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 882              		.loc 1 1208 0
 883 003e 08BF     		it	eq
 884 0040 E562     		streq	r5, [r4, #44]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 885              		.loc 1 1226 0
 886 0042 002B     		cmp	r3, #0
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 887              		.loc 1 1239 0
ARM GAS  /tmp/ccy76Mh1.s 			page 78


 888 0044 4FF01403 		mov	r3, #20
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 889              		.loc 1 1216 0
 890 0048 6564     		str	r5, [r4, #68]
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 891              		.loc 1 1228 0
 892 004a A4BF     		itt	ge
 893 004c C5F10705 		rsbge	r5, r5, #7
 894              	.LVL96:
 895 0050 A561     		strge	r5, [r4, #24]
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 896              		.loc 1 1239 0
 897 0052 184D     		ldr	r5, .L94+4
 898 0054 6269     		ldr	r2, [r4, #20]
 899              	.LVL97:
 900 0056 03FB0753 		mla	r3, r3, r7, r5
 901 005a 9A42     		cmp	r2, r3
 902 005c 1AD1     		bne	.L88
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 903              		.loc 1 1244 0
 904 005e 04F10408 		add	r8, r4, #4
 905 0062 4046     		mov	r0, r8
 906 0064 FFF7FEFF 		bl	uxListRemove
 907              	.LVL98:
 908 0068 38B9     		cbnz	r0, .L91
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 909              		.loc 1 1249 0
 910 006a 0122     		movs	r2, #1
 911 006c 1249     		ldr	r1, .L94+8
 912 006e 02FA07F7 		lsl	r7, r2, r7
 913              	.LVL99:
 914 0072 0B68     		ldr	r3, [r1]
 915 0074 23EA0707 		bic	r7, r3, r7
 916 0078 0F60     		str	r7, [r1]
 917              	.L91:
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 918              		.loc 1 1255 0
 919 007a 0123     		movs	r3, #1
 920 007c 0E49     		ldr	r1, .L94+8
 921 007e E26A     		ldr	r2, [r4, #44]
 922 0080 0868     		ldr	r0, [r1]
 923 0082 9340     		lsls	r3, r3, r2
 924 0084 0343     		orrs	r3, r3, r0
 925 0086 1420     		movs	r0, #20
 926 0088 0B60     		str	r3, [r1]
 927 008a 00FB0250 		mla	r0, r0, r2, r5
 928 008e 4146     		mov	r1, r8
 929 0090 FFF7FEFF 		bl	vListInsertEnd
 930              	.LVL100:
 931              	.L88:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 932              		.loc 1 1262 0
 933 0094 0EB1     		cbz	r6, .L82
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 934              		.loc 1 1264 0
 935 0096 FFF7FEFF 		bl	vPortYield
 936              	.LVL101:
ARM GAS  /tmp/ccy76Mh1.s 			page 79


 937              	.L82:
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938              		.loc 1 1277 0
 939 009a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 940              	.LCFI13:
 941              		.cfi_remember_state
 942              		.cfi_restore 14
 943              		.cfi_restore 8
 944              		.cfi_restore 7
 945              		.cfi_restore 6
 946              		.cfi_restore 5
 947              		.cfi_restore 4
 948              		.cfi_def_cfa_offset 0
 949              	.LVL102:
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 950              		.loc 1 1276 0
 951 009e FFF7FEBF 		b	vPortExitCritical
 952              	.LVL103:
 953              	.L83:
 954              	.LCFI14:
 955              		.cfi_restore_state
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 956              		.loc 1 1183 0
 957 00a2 1E68     		ldr	r6, [r3]
 958 00a4 A31B     		subs	r3, r4, r6
 959 00a6 5E42     		rsbs	r6, r3, #0
 960 00a8 5E41     		adcs	r6, r6, r3
 961 00aa C5E7     		b	.L84
 962              	.L93:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963              		.loc 1 1124 0
 964 00ac 0026     		movs	r6, #0
 965 00ae C3E7     		b	.L84
 966              	.L95:
 967              		.align	2
 968              	.L94:
 969 00b0 00000000 		.word	.LANCHOR4
 970 00b4 00000000 		.word	.LANCHOR8
 971 00b8 00000000 		.word	.LANCHOR14
 972              		.cfi_endproc
 973              	.LFE6:
 975              		.section	.text.vTaskResume,"ax",%progbits
 976              		.align	1
 977              		.global	vTaskResume
 978              		.syntax unified
 979              		.thumb
 980              		.thumb_func
 981              		.fpu softvfp
 983              	vTaskResume:
 984              	.LFB9:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 985              		.loc 1 1420 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              	.LVL104:
 990 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccy76Mh1.s 			page 80


 991              	.LCFI15:
 992              		.cfi_def_cfa_offset 24
 993              		.cfi_offset 3, -24
 994              		.cfi_offset 4, -20
 995              		.cfi_offset 5, -16
 996              		.cfi_offset 6, -12
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 999              		.loc 1 1424 0
 1000 0002 0446     		mov	r4, r0
 1001 0004 10B9     		cbnz	r0, .L97
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1002              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1003 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 1004              	.LVL105:
 1005              	.L98:
 1006 000a FEE7     		b	.L98
 1007              	.LVL106:
 1008              	.L97:
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1009              		.loc 1 1428 0 is_stmt 1 discriminator 1
 1010 000c 144E     		ldr	r6, .L103
 1011 000e 3368     		ldr	r3, [r6]
 1012 0010 9842     		cmp	r0, r3
 1013 0012 23D0     		beq	.L96
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1014              		.loc 1 1430 0
 1015 0014 FFF7FEFF 		bl	vPortEnterCritical
 1016              	.LVL107:
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1017              		.loc 1 1432 0
 1018 0018 2046     		mov	r0, r4
 1019 001a FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1020              	.LVL108:
 1021 001e 0128     		cmp	r0, #1
 1022 0020 0546     		mov	r5, r0
 1023 0022 17D1     		bne	.L101
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1024              		.loc 1 1438 0
 1025 0024 271D     		adds	r7, r4, #4
 1026 0026 3846     		mov	r0, r7
 1027 0028 FFF7FEFF 		bl	uxListRemove
 1028              	.LVL109:
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1029              		.loc 1 1439 0
 1030 002c 1420     		movs	r0, #20
 1031 002e 0D4A     		ldr	r2, .L103+4
 1032 0030 E36A     		ldr	r3, [r4, #44]
 1033 0032 1168     		ldr	r1, [r2]
 1034 0034 9D40     		lsls	r5, r5, r3
 1035 0036 0D43     		orrs	r5, r5, r1
 1036 0038 1560     		str	r5, [r2]
 1037 003a 0B4A     		ldr	r2, .L103+8
 1038 003c 3946     		mov	r1, r7
 1039 003e 00FB0320 		mla	r0, r0, r3, r2
 1040 0042 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccy76Mh1.s 			page 81


 1041              	.LVL110:
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1042              		.loc 1 1442 0
 1043 0046 3368     		ldr	r3, [r6]
 1044 0048 E26A     		ldr	r2, [r4, #44]
 1045 004a DB6A     		ldr	r3, [r3, #44]
 1046 004c 9A42     		cmp	r2, r3
 1047 004e 01D3     		bcc	.L101
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1048              		.loc 1 1447 0
 1049 0050 FFF7FEFF 		bl	vPortYield
 1050              	.LVL111:
 1051              	.L101:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1052              		.loc 1 1465 0
 1053 0054 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1054              	.LCFI16:
 1055              		.cfi_remember_state
 1056              		.cfi_restore 14
 1057              		.cfi_restore 7
 1058              		.cfi_restore 6
 1059              		.cfi_restore 5
 1060              		.cfi_restore 4
 1061              		.cfi_restore 3
 1062              		.cfi_def_cfa_offset 0
 1063              	.LVL112:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1064              		.loc 1 1459 0
 1065 0058 FFF7FEBF 		b	vPortExitCritical
 1066              	.LVL113:
 1067              	.L96:
 1068              	.LCFI17:
 1069              		.cfi_restore_state
 1070 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1071              	.L104:
 1072 005e 00BF     		.align	2
 1073              	.L103:
 1074 0060 00000000 		.word	.LANCHOR4
 1075 0064 00000000 		.word	.LANCHOR14
 1076 0068 00000000 		.word	.LANCHOR8
 1077              		.cfi_endproc
 1078              	.LFE9:
 1080              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1081              		.align	1
 1082              		.global	xTaskResumeFromISR
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu softvfp
 1088              	xTaskResumeFromISR:
 1089              	.LFB10:
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1090              		.loc 1 1474 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL114:
ARM GAS  /tmp/ccy76Mh1.s 			page 82


 1095 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1096              	.LCFI18:
 1097              		.cfi_def_cfa_offset 24
 1098              		.cfi_offset 4, -24
 1099              		.cfi_offset 5, -20
 1100              		.cfi_offset 6, -16
 1101              		.cfi_offset 7, -12
 1102              		.cfi_offset 8, -8
 1103              		.cfi_offset 14, -4
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1104              		.loc 1 1479 0
 1105 0004 0446     		mov	r4, r0
 1106 0006 10B9     		cbnz	r0, .L106
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1107              		.loc 1 1479 0 is_stmt 0 discriminator 1
 1108 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 1109              	.LVL115:
 1110              	.L107:
 1111 000c FEE7     		b	.L107
 1112              	.LVL116:
 1113              	.L106:
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1114              		.loc 1 1497 0 is_stmt 1
 1115 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 1116              	.LVL117:
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1117              		.loc 1 1499 0
 1118 0012 FFF7FEFF 		bl	ulPortSetInterruptMask
 1119              	.LVL118:
 1120 0016 8046     		mov	r8, r0
 1121              	.LVL119:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1122              		.loc 1 1501 0
 1123 0018 2046     		mov	r0, r4
 1124              	.LVL120:
 1125 001a FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1126              	.LVL121:
 1127 001e 0128     		cmp	r0, #1
 1128 0020 0546     		mov	r5, r0
 1129 0022 26D1     		bne	.L110
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1130              		.loc 1 1506 0
 1131 0024 144B     		ldr	r3, .L111
 1132 0026 1B68     		ldr	r3, [r3]
 1133 0028 F3B9     		cbnz	r3, .L109
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1134              		.loc 1 1510 0
 1135 002a 144B     		ldr	r3, .L111+4
 1136 002c E66A     		ldr	r6, [r4, #44]
 1137 002e 1B68     		ldr	r3, [r3]
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1138              		.loc 1 1519 0
 1139 0030 271D     		adds	r7, r4, #4
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1140              		.loc 1 1510 0
 1141 0032 DB6A     		ldr	r3, [r3, #44]
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccy76Mh1.s 			page 83


 1142              		.loc 1 1519 0
 1143 0034 3846     		mov	r0, r7
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1144              		.loc 1 1510 0
 1145 0036 9E42     		cmp	r6, r3
 1146 0038 34BF     		ite	cc
 1147 003a 0026     		movcc	r6, #0
 1148 003c 0126     		movcs	r6, #1
 1149              	.LVL122:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1150              		.loc 1 1519 0
 1151 003e FFF7FEFF 		bl	uxListRemove
 1152              	.LVL123:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1153              		.loc 1 1520 0
 1154 0042 1420     		movs	r0, #20
 1155 0044 0E4A     		ldr	r2, .L111+8
 1156 0046 E36A     		ldr	r3, [r4, #44]
 1157 0048 1168     		ldr	r1, [r2]
 1158 004a 9D40     		lsls	r5, r5, r3
 1159 004c 0D43     		orrs	r5, r5, r1
 1160 004e 1560     		str	r5, [r2]
 1161 0050 0C4A     		ldr	r2, .L111+12
 1162 0052 3946     		mov	r1, r7
 1163 0054 00FB0320 		mla	r0, r0, r3, r2
 1164 0058 FFF7FEFF 		bl	vListInsertEnd
 1165              	.LVL124:
 1166              	.L108:
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1167              		.loc 1 1535 0
 1168 005c 4046     		mov	r0, r8
 1169 005e FFF7FEFF 		bl	vPortClearInterruptMask
 1170              	.LVL125:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1171              		.loc 1 1538 0
 1172 0062 3046     		mov	r0, r6
 1173 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1174              	.LVL126:
 1175              	.L109:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1176              		.loc 1 1527 0
 1177 0068 04F11801 		add	r1, r4, #24
 1178 006c 0648     		ldr	r0, .L111+16
 1179 006e FFF7FEFF 		bl	vListInsertEnd
 1180              	.LVL127:
 1181              	.L110:
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1182              		.loc 1 1475 0
 1183 0072 0026     		movs	r6, #0
 1184 0074 F2E7     		b	.L108
 1185              	.L112:
 1186 0076 00BF     		.align	2
 1187              	.L111:
 1188 0078 00000000 		.word	.LANCHOR16
 1189 007c 00000000 		.word	.LANCHOR4
 1190 0080 00000000 		.word	.LANCHOR14
 1191 0084 00000000 		.word	.LANCHOR8
ARM GAS  /tmp/ccy76Mh1.s 			page 84


 1192 0088 00000000 		.word	.LANCHOR3
 1193              		.cfi_endproc
 1194              	.LFE10:
 1196              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1197              		.align	1
 1198              		.global	vTaskStartScheduler
 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu softvfp
 1204              	vTaskStartScheduler:
 1205              	.LFB11:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1206              		.loc 1 1544 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210 0000 30B5     		push	{r4, r5, lr}
 1211              	.LCFI19:
 1212              		.cfi_def_cfa_offset 12
 1213              		.cfi_offset 4, -12
 1214              		.cfi_offset 5, -8
 1215              		.cfi_offset 14, -4
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1216              		.loc 1 1557 0
 1217 0002 0024     		movs	r4, #0
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1218              		.loc 1 1544 0
 1219 0004 85B0     		sub	sp, sp, #20
 1220              	.LCFI20:
 1221              		.cfi_def_cfa_offset 32
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1222              		.loc 1 1557 0
 1223 0006 0394     		str	r4, [sp, #12]
 1224 0008 0294     		str	r4, [sp, #8]
 1225 000a 0194     		str	r4, [sp, #4]
 1226 000c 0094     		str	r4, [sp]
 1227 000e 2346     		mov	r3, r4
 1228 0010 8022     		movs	r2, #128
 1229 0012 0E49     		ldr	r1, .L117
 1230 0014 0E48     		ldr	r0, .L117+4
 1231 0016 FFF7FEFF 		bl	xTaskGenericCreate
 1232              	.LVL128:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1233              		.loc 1 1574 0
 1234 001a 0128     		cmp	r0, #1
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1235              		.loc 1 1557 0
 1236 001c 0546     		mov	r5, r0
 1237              	.LVL129:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1238              		.loc 1 1574 0
 1239 001e 0ED1     		bne	.L114
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1240              		.loc 1 1581 0
 1241 0020 FFF7FEFF 		bl	ulPortSetInterruptMask
 1242              	.LVL130:
ARM GAS  /tmp/ccy76Mh1.s 			page 85


1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1243              		.loc 1 1591 0
 1244 0024 4FF0FF32 		mov	r2, #-1
 1245 0028 0A4B     		ldr	r3, .L117+8
 1246 002a 1A60     		str	r2, [r3]
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1247              		.loc 1 1592 0
 1248 002c 0A4B     		ldr	r3, .L117+12
 1249 002e 1D60     		str	r5, [r3]
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1250              		.loc 1 1593 0
 1251 0030 0A4B     		ldr	r3, .L117+16
 1252 0032 1C60     		str	r4, [r3]
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1253              		.loc 1 1619 0
 1254 0034 05B0     		add	sp, sp, #20
 1255              	.LCFI21:
 1256              		.cfi_remember_state
 1257              		.cfi_def_cfa_offset 12
 1258              		@ sp needed
 1259 0036 BDE83040 		pop	{r4, r5, lr}
 1260              	.LCFI22:
 1261              		.cfi_restore 14
 1262              		.cfi_restore 5
 1263              		.cfi_restore 4
 1264              		.cfi_def_cfa_offset 0
 1265              	.LVL131:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1266              		.loc 1 1602 0
 1267 003a FFF7FEBF 		b	xPortStartScheduler
 1268              	.LVL132:
 1269              	.L114:
 1270              	.LCFI23:
 1271              		.cfi_restore_state
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1272              		.loc 1 1617 0
 1273 003e 10B9     		cbnz	r0, .L113
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1274              		.loc 1 1617 0 is_stmt 0 discriminator 1
 1275 0040 FFF7FEFF 		bl	ulPortSetInterruptMask
 1276              	.LVL133:
 1277              	.L116:
 1278 0044 FEE7     		b	.L116
 1279              	.LVL134:
 1280              	.L113:
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1281              		.loc 1 1619 0 is_stmt 1
 1282 0046 05B0     		add	sp, sp, #20
 1283              	.LCFI24:
 1284              		.cfi_def_cfa_offset 12
 1285              		@ sp needed
 1286 0048 30BD     		pop	{r4, r5, pc}
 1287              	.L118:
 1288 004a 00BF     		.align	2
 1289              	.L117:
 1290 004c 00000000 		.word	.LC0
 1291 0050 00000000 		.word	prvIdleTask
ARM GAS  /tmp/ccy76Mh1.s 			page 86


 1292 0054 00000000 		.word	.LANCHOR1
 1293 0058 00000000 		.word	.LANCHOR12
 1294 005c 00000000 		.word	.LANCHOR5
 1295              		.cfi_endproc
 1296              	.LFE11:
 1298              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1299              		.align	1
 1300              		.global	vTaskEndScheduler
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1304              		.fpu softvfp
 1306              	vTaskEndScheduler:
 1307              	.LFB12:
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1308              		.loc 1 1623 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312 0000 08B5     		push	{r3, lr}
 1313              	.LCFI25:
 1314              		.cfi_def_cfa_offset 8
 1315              		.cfi_offset 3, -8
 1316              		.cfi_offset 14, -4
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1317              		.loc 1 1627 0
 1318 0002 FFF7FEFF 		bl	ulPortSetInterruptMask
 1319              	.LVL135:
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1320              		.loc 1 1628 0
 1321 0006 0022     		movs	r2, #0
 1322 0008 024B     		ldr	r3, .L120
 1323 000a 1A60     		str	r2, [r3]
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1324              		.loc 1 1630 0
 1325 000c BDE80840 		pop	{r3, lr}
 1326              	.LCFI26:
 1327              		.cfi_restore 14
 1328              		.cfi_restore 3
 1329              		.cfi_def_cfa_offset 0
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1330              		.loc 1 1629 0
 1331 0010 FFF7FEBF 		b	vPortEndScheduler
 1332              	.LVL136:
 1333              	.L121:
 1334              		.align	2
 1335              	.L120:
 1336 0014 00000000 		.word	.LANCHOR12
 1337              		.cfi_endproc
 1338              	.LFE12:
 1340              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1341              		.align	1
 1342              		.global	vTaskSuspendAll
 1343              		.syntax unified
 1344              		.thumb
 1345              		.thumb_func
 1346              		.fpu softvfp
ARM GAS  /tmp/ccy76Mh1.s 			page 87


 1348              	vTaskSuspendAll:
 1349              	.LFB13:
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1350              		.loc 1 1634 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              		@ link register save eliminated.
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1355              		.loc 1 1639 0
 1356 0000 024A     		ldr	r2, .L123
 1357 0002 1368     		ldr	r3, [r2]
 1358 0004 0133     		adds	r3, r3, #1
 1359 0006 1360     		str	r3, [r2]
 1360 0008 7047     		bx	lr
 1361              	.L124:
 1362 000a 00BF     		.align	2
 1363              	.L123:
 1364 000c 00000000 		.word	.LANCHOR16
 1365              		.cfi_endproc
 1366              	.LFE13:
 1368              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1369              		.align	1
 1370              		.global	xTaskGetTickCount
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1374              		.fpu softvfp
 1376              	xTaskGetTickCount:
 1377              	.LFB15:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1378              		.loc 1 1765 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1383              		.loc 1 1771 0
 1384 0000 014B     		ldr	r3, .L126
 1385 0002 1868     		ldr	r0, [r3]
 1386              	.LVL137:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1387              		.loc 1 1776 0
 1388 0004 7047     		bx	lr
 1389              	.L127:
 1390 0006 00BF     		.align	2
 1391              	.L126:
 1392 0008 00000000 		.word	.LANCHOR5
 1393              		.cfi_endproc
 1394              	.LFE15:
 1396              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1397              		.align	1
 1398              		.global	xTaskGetTickCountFromISR
 1399              		.syntax unified
 1400              		.thumb
 1401              		.thumb_func
 1402              		.fpu softvfp
ARM GAS  /tmp/ccy76Mh1.s 			page 88


 1404              	xTaskGetTickCountFromISR:
 1405              	.LFB16:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1406              		.loc 1 1780 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 1410 0000 08B5     		push	{r3, lr}
 1411              	.LCFI27:
 1412              		.cfi_def_cfa_offset 8
 1413              		.cfi_offset 3, -8
 1414              		.cfi_offset 14, -4
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1415              		.loc 1 1798 0
 1416 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1417              	.LVL138:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1418              		.loc 1 1802 0
 1419 0006 014B     		ldr	r3, .L129
 1420 0008 1868     		ldr	r0, [r3]
 1421              	.LVL139:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1422              		.loc 1 1807 0
 1423 000a 08BD     		pop	{r3, pc}
 1424              	.L130:
 1425              		.align	2
 1426              	.L129:
 1427 000c 00000000 		.word	.LANCHOR5
 1428              		.cfi_endproc
 1429              	.LFE16:
 1431              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1432              		.align	1
 1433              		.global	uxTaskGetNumberOfTasks
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1437              		.fpu softvfp
 1439              	uxTaskGetNumberOfTasks:
 1440              	.LFB17:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1441              		.loc 1 1811 0
 1442              		.cfi_startproc
 1443              		@ args = 0, pretend = 0, frame = 0
 1444              		@ frame_needed = 0, uses_anonymous_args = 0
 1445              		@ link register save eliminated.
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1446              		.loc 1 1814 0
 1447 0000 014B     		ldr	r3, .L132
 1448 0002 1868     		ldr	r0, [r3]
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1449              		.loc 1 1815 0
 1450 0004 7047     		bx	lr
 1451              	.L133:
 1452 0006 00BF     		.align	2
 1453              	.L132:
 1454 0008 00000000 		.word	.LANCHOR7
 1455              		.cfi_endproc
ARM GAS  /tmp/ccy76Mh1.s 			page 89


 1456              	.LFE17:
 1458              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1459              		.align	1
 1460              		.global	xTaskIncrementTick
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1464              		.fpu softvfp
 1466              	xTaskIncrementTick:
 1467              	.LFB18:
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1468              		.loc 1 1940 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              	.LVL140:
 1473 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1474              	.LCFI28:
 1475              		.cfi_def_cfa_offset 40
 1476              		.cfi_offset 3, -40
 1477              		.cfi_offset 4, -36
 1478              		.cfi_offset 5, -32
 1479              		.cfi_offset 6, -28
 1480              		.cfi_offset 7, -24
 1481              		.cfi_offset 8, -20
 1482              		.cfi_offset 9, -16
 1483              		.cfi_offset 10, -12
 1484              		.cfi_offset 11, -8
 1485              		.cfi_offset 14, -4
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1486              		.loc 1 1949 0
 1487 0004 3A4B     		ldr	r3, .L158
 1488 0006 1B68     		ldr	r3, [r3]
 1489 0008 002B     		cmp	r3, #0
 1490 000a 4ED1     		bne	.L135
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1491              		.loc 1 1953 0
 1492 000c 394B     		ldr	r3, .L158+4
 1493 000e 1A68     		ldr	r2, [r3]
 1494 0010 0132     		adds	r2, r2, #1
 1495 0012 1A60     		str	r2, [r3]
 1496              	.LBB38:
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1497              		.loc 1 1958 0
 1498 0014 1D68     		ldr	r5, [r3]
 1499              	.LVL141:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1500              		.loc 1 1960 0
 1501 0016 8DB9     		cbnz	r5, .L136
 1502              	.LBB39:
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1503              		.loc 1 1962 0
 1504 0018 374B     		ldr	r3, .L158+8
 1505 001a 1A68     		ldr	r2, [r3]
 1506 001c 1268     		ldr	r2, [r2]
 1507 001e 12B1     		cbz	r2, .L137
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccy76Mh1.s 			page 90


 1508              		.loc 1 1962 0 is_stmt 0 discriminator 1
 1509 0020 FFF7FEFF 		bl	ulPortSetInterruptMask
 1510              	.LVL142:
 1511              	.L138:
 1512 0024 FEE7     		b	.L138
 1513              	.L137:
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1514              		.loc 1 1962 0 discriminator 2
 1515 0026 354A     		ldr	r2, .L158+12
 1516 0028 1968     		ldr	r1, [r3]
 1517              	.LVL143:
 1518 002a 1068     		ldr	r0, [r2]
 1519 002c 1860     		str	r0, [r3]
 1520 002e 1160     		str	r1, [r2]
 1521 0030 334A     		ldr	r2, .L158+16
 1522 0032 1368     		ldr	r3, [r2]
 1523 0034 0133     		adds	r3, r3, #1
 1524 0036 1360     		str	r3, [r2]
 1525 0038 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1526              	.LVL144:
 1527              	.L136:
 1528              	.LBE39:
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1529              		.loc 1 1973 0 is_stmt 1
 1530 003c 314C     		ldr	r4, .L158+20
 1531 003e 4FF0000B 		mov	fp, #0
 1532 0042 2368     		ldr	r3, [r4]
 1533 0044 304F     		ldr	r7, .L158+24
 1534 0046 9D42     		cmp	r5, r3
 1535 0048 3ED3     		bcc	.L139
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1536              		.loc 1 1977 0
 1537 004a DFF8AC80 		ldr	r8, .L158+8
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1538              		.loc 1 2027 0
 1539 004e DFF8C890 		ldr	r9, .L158+40
 1540              	.LVL145:
 1541              	.L140:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1542              		.loc 1 1977 0
 1543 0052 D8F80020 		ldr	r2, [r8]
 1544 0056 1268     		ldr	r2, [r2]
 1545 0058 72BB     		cbnz	r2, .L155
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 1546              		.loc 1 1984 0
 1547 005a 4FF0FF32 		mov	r2, #-1
 1548 005e 2260     		str	r2, [r4]
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1549              		.loc 1 1985 0
 1550 0060 32E0     		b	.L139
 1551              	.LVL146:
 1552              	.L157:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1553              		.loc 1 2012 0
 1554 0062 06F1040A 		add	r10, r6, #4
 1555 0066 5046     		mov	r0, r10
 1556 0068 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccy76Mh1.s 			page 91


 1557              	.LVL147:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1558              		.loc 1 2016 0
 1559 006c B16A     		ldr	r1, [r6, #40]
 1560 006e 19B1     		cbz	r1, .L143
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1561              		.loc 1 2018 0
 1562 0070 06F11800 		add	r0, r6, #24
 1563 0074 FFF7FEFF 		bl	uxListRemove
 1564              	.LVL148:
 1565              	.L143:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1566              		.loc 1 2027 0
 1567 0078 0122     		movs	r2, #1
 1568 007a 4FF0140E 		mov	lr, #20
 1569 007e F06A     		ldr	r0, [r6, #44]
 1570 0080 D9F80030 		ldr	r3, [r9]
 1571 0084 02FA00F1 		lsl	r1, r2, r0
 1572 0088 1943     		orrs	r1, r1, r3
 1573 008a 204B     		ldr	r3, .L158+28
 1574 008c C9F80010 		str	r1, [r9]
 1575 0090 0EFB0030 		mla	r0, lr, r0, r3
 1576 0094 5146     		mov	r1, r10
 1577 0096 FFF7FEFF 		bl	vListInsertEnd
 1578              	.LVL149:
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1579              		.loc 1 2037 0
 1580 009a 3868     		ldr	r0, [r7]
 1581 009c F16A     		ldr	r1, [r6, #44]
 1582 009e C26A     		ldr	r2, [r0, #44]
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1583              		.loc 1 2039 0
 1584 00a0 9142     		cmp	r1, r2
 1585 00a2 28BF     		it	cs
 1586 00a4 4FF0010B 		movcs	fp, #1
 1587              	.LVL150:
 1588 00a8 D3E7     		b	.L140
 1589              	.LVL151:
 1590              	.L135:
 1591              	.LBE38:
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1592              		.loc 1 2085 0
 1593 00aa 194A     		ldr	r2, .L158+32
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1594              		.loc 1 1943 0
 1595 00ac 4FF0000B 		mov	fp, #0
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1596              		.loc 1 2085 0
 1597 00b0 1368     		ldr	r3, [r2]
 1598 00b2 0133     		adds	r3, r3, #1
 1599 00b4 1360     		str	r3, [r2]
 1600 00b6 11E0     		b	.L145
 1601              	.LVL152:
 1602              	.L155:
 1603              	.LBB40:
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 1604              		.loc 1 1993 0
ARM GAS  /tmp/ccy76Mh1.s 			page 92


 1605 00b8 D8F80020 		ldr	r2, [r8]
 1606 00bc D268     		ldr	r2, [r2, #12]
 1607 00be D668     		ldr	r6, [r2, #12]
 1608              	.LVL153:
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1609              		.loc 1 1994 0
 1610 00c0 7168     		ldr	r1, [r6, #4]
 1611              	.LVL154:
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1612              		.loc 1 1996 0
 1613 00c2 8D42     		cmp	r5, r1
 1614 00c4 CDD2     		bcs	.L157
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							break;
 1615              		.loc 1 2003 0
 1616 00c6 2160     		str	r1, [r4]
 1617              	.LVL155:
 1618              	.L139:
 1619              	.LBE40:
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1620              		.loc 1 2057 0
 1621 00c8 3A68     		ldr	r2, [r7]
 1622 00ca 104B     		ldr	r3, .L158+28
 1623 00cc D16A     		ldr	r1, [r2, #44]
 1624 00ce 1422     		movs	r2, #20
 1625 00d0 4A43     		muls	r2, r1, r2
 1626 00d2 9A58     		ldr	r2, [r3, r2]
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1627              		.loc 1 2059 0
 1628 00d4 022A     		cmp	r2, #2
 1629 00d6 28BF     		it	cs
 1630 00d8 4FF0010B 		movcs	fp, #1
 1631              	.LVL156:
 1632              	.L145:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1633              		.loc 1 2098 0
 1634 00dc 0D4A     		ldr	r2, .L158+36
 1635 00de 1268     		ldr	r2, [r2]
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1636              		.loc 1 2100 0
 1637 00e0 002A     		cmp	r2, #0
 1638 00e2 18BF     		it	ne
 1639 00e4 4FF0010B 		movne	fp, #1
 1640              	.LVL157:
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1641              		.loc 1 2110 0
 1642 00e8 5846     		mov	r0, fp
 1643 00ea BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1644              	.L159:
 1645 00ee 00BF     		.align	2
 1646              	.L158:
 1647 00f0 00000000 		.word	.LANCHOR16
 1648 00f4 00000000 		.word	.LANCHOR5
 1649 00f8 00000000 		.word	.LANCHOR0
 1650 00fc 00000000 		.word	.LANCHOR6
 1651 0100 00000000 		.word	.LANCHOR17
 1652 0104 00000000 		.word	.LANCHOR1
 1653 0108 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccy76Mh1.s 			page 93


 1654 010c 00000000 		.word	.LANCHOR8
 1655 0110 00000000 		.word	.LANCHOR18
 1656 0114 00000000 		.word	.LANCHOR19
 1657 0118 00000000 		.word	.LANCHOR14
 1658              		.cfi_endproc
 1659              	.LFE18:
 1661              		.section	.text.xTaskResumeAll,"ax",%progbits
 1662              		.align	1
 1663              		.global	xTaskResumeAll
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu softvfp
 1669              	xTaskResumeAll:
 1670              	.LFB14:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1671              		.loc 1 1672 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              	.LVL158:
 1676 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1677              	.LCFI29:
 1678              		.cfi_def_cfa_offset 32
 1679              		.cfi_offset 3, -32
 1680              		.cfi_offset 4, -28
 1681              		.cfi_offset 5, -24
 1682              		.cfi_offset 6, -20
 1683              		.cfi_offset 7, -16
 1684              		.cfi_offset 8, -12
 1685              		.cfi_offset 9, -8
 1686              		.cfi_offset 14, -4
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1687              		.loc 1 1678 0
 1688 0004 2B4C     		ldr	r4, .L180
 1689 0006 2368     		ldr	r3, [r4]
 1690 0008 13B9     		cbnz	r3, .L161
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1691              		.loc 1 1678 0 is_stmt 0 discriminator 1
 1692 000a FFF7FEFF 		bl	ulPortSetInterruptMask
 1693              	.LVL159:
 1694              	.L162:
 1695 000e FEE7     		b	.L162
 1696              	.L161:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1697              		.loc 1 1685 0 is_stmt 1
 1698 0010 FFF7FEFF 		bl	vPortEnterCritical
 1699              	.LVL160:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1700              		.loc 1 1687 0
 1701 0014 2368     		ldr	r3, [r4]
 1702 0016 013B     		subs	r3, r3, #1
 1703 0018 2360     		str	r3, [r4]
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1704              		.loc 1 1689 0
 1705 001a 2368     		ldr	r3, [r4]
 1706 001c 2BB1     		cbz	r3, .L163
ARM GAS  /tmp/ccy76Mh1.s 			page 94


 1707              	.L166:
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1708              		.loc 1 1674 0
 1709 001e 0024     		movs	r4, #0
 1710              	.LVL161:
 1711              	.L164:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1712              		.loc 1 1758 0
 1713 0020 FFF7FEFF 		bl	vPortExitCritical
 1714              	.LVL162:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1715              		.loc 1 1761 0
 1716 0024 2046     		mov	r0, r4
 1717 0026 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1718              	.LVL163:
 1719              	.L163:
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1720              		.loc 1 1691 0
 1721 002a 234B     		ldr	r3, .L180+4
 1722 002c 1B68     		ldr	r3, [r3]
 1723 002e 002B     		cmp	r3, #0
 1724 0030 F5D0     		beq	.L166
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1725              		.loc 1 1695 0
 1726 0032 224D     		ldr	r5, .L180+8
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1727              		.loc 1 1700 0
 1728 0034 224E     		ldr	r6, .L180+12
 1729 0036 1FE0     		b	.L178
 1730              	.L168:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1731              		.loc 1 1697 0
 1732 0038 EB68     		ldr	r3, [r5, #12]
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1733              		.loc 1 1700 0
 1734 003a 0127     		movs	r7, #1
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1735              		.loc 1 1697 0
 1736 003c DC68     		ldr	r4, [r3, #12]
 1737              	.LVL164:
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1738              		.loc 1 1699 0
 1739 003e 04F10409 		add	r9, r4, #4
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1740              		.loc 1 1698 0
 1741 0042 04F11800 		add	r0, r4, #24
 1742 0046 FFF7FEFF 		bl	uxListRemove
 1743              	.LVL165:
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1744              		.loc 1 1699 0
 1745 004a 4846     		mov	r0, r9
 1746 004c FFF7FEFF 		bl	uxListRemove
 1747              	.LVL166:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1748              		.loc 1 1700 0
 1749 0050 1420     		movs	r0, #20
 1750 0052 E26A     		ldr	r2, [r4, #44]
ARM GAS  /tmp/ccy76Mh1.s 			page 95


 1751 0054 3168     		ldr	r1, [r6]
 1752 0056 07FA02F3 		lsl	r3, r7, r2
 1753 005a 0B43     		orrs	r3, r3, r1
 1754 005c 00FB0280 		mla	r0, r0, r2, r8
 1755 0060 4946     		mov	r1, r9
 1756 0062 3360     		str	r3, [r6]
 1757 0064 FFF7FEFF 		bl	vListInsertEnd
 1758              	.LVL167:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1759              		.loc 1 1704 0
 1760 0068 164B     		ldr	r3, .L180+16
 1761 006a E26A     		ldr	r2, [r4, #44]
 1762 006c 1B68     		ldr	r3, [r3]
 1763 006e DB6A     		ldr	r3, [r3, #44]
 1764 0070 9A42     		cmp	r2, r3
 1765 0072 03D3     		bcc	.L167
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1766              		.loc 1 1706 0
 1767 0074 144B     		ldr	r3, .L180+20
 1768 0076 1F60     		str	r7, [r3]
 1769              	.LVL168:
 1770              	.L178:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1771              		.loc 1 1700 0
 1772 0078 DFF85480 		ldr	r8, .L180+28
 1773              	.L167:
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1774              		.loc 1 1695 0
 1775 007c 2B68     		ldr	r3, [r5]
 1776 007e 002B     		cmp	r3, #0
 1777 0080 DAD1     		bne	.L168
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1778              		.loc 1 1718 0
 1779 0082 124C     		ldr	r4, .L180+24
 1780 0084 2368     		ldr	r3, [r4]
 1781 0086 8BB9     		cbnz	r3, .L169
 1782              	.L173:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1783              		.loc 1 1738 0
 1784 0088 0F4B     		ldr	r3, .L180+20
 1785 008a 1C68     		ldr	r4, [r3]
 1786 008c 012C     		cmp	r4, #1
 1787 008e C6D1     		bne	.L166
 1788              	.LVL169:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1789              		.loc 1 1745 0
 1790 0090 FFF7FEFF 		bl	vPortYield
 1791              	.LVL170:
 1792 0094 C4E7     		b	.L164
 1793              	.LVL171:
 1794              	.L172:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1795              		.loc 1 1722 0
 1796 0096 FFF7FEFF 		bl	xTaskIncrementTick
 1797              	.LVL172:
 1798 009a 00B1     		cbz	r0, .L171
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccy76Mh1.s 			page 96


 1799              		.loc 1 1724 0
 1800 009c 2E60     		str	r6, [r5]
 1801              	.L171:
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1802              		.loc 1 1730 0
 1803 009e 2368     		ldr	r3, [r4]
 1804 00a0 013B     		subs	r3, r3, #1
 1805 00a2 2360     		str	r3, [r4]
 1806              	.L179:
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1807              		.loc 1 1720 0
 1808 00a4 2368     		ldr	r3, [r4]
 1809 00a6 002B     		cmp	r3, #0
 1810 00a8 F5D1     		bne	.L172
 1811 00aa EDE7     		b	.L173
 1812              	.L169:
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1813              		.loc 1 1724 0
 1814 00ac 064D     		ldr	r5, .L180+20
 1815 00ae 0126     		movs	r6, #1
 1816 00b0 F8E7     		b	.L179
 1817              	.L181:
 1818 00b2 00BF     		.align	2
 1819              	.L180:
 1820 00b4 00000000 		.word	.LANCHOR16
 1821 00b8 00000000 		.word	.LANCHOR7
 1822 00bc 00000000 		.word	.LANCHOR3
 1823 00c0 00000000 		.word	.LANCHOR14
 1824 00c4 00000000 		.word	.LANCHOR4
 1825 00c8 00000000 		.word	.LANCHOR19
 1826 00cc 00000000 		.word	.LANCHOR18
 1827 00d0 00000000 		.word	.LANCHOR8
 1828              		.cfi_endproc
 1829              	.LFE14:
 1831              		.section	.text.vTaskDelay,"ax",%progbits
 1832              		.align	1
 1833              		.global	vTaskDelay
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu softvfp
 1839              	vTaskDelay:
 1840              	.LFB3:
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 1841              		.loc 1 923 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              	.LVL173:
 1846 0000 38B5     		push	{r3, r4, r5, lr}
 1847              	.LCFI30:
 1848              		.cfi_def_cfa_offset 16
 1849              		.cfi_offset 3, -16
 1850              		.cfi_offset 4, -12
 1851              		.cfi_offset 5, -8
 1852              		.cfi_offset 14, -4
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccy76Mh1.s 			page 97


 1853              		.loc 1 929 0
 1854 0002 18B9     		cbnz	r0, .L183
 1855              	.LVL174:
 1856              	.L187:
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1857              		.loc 1 981 0
 1858 0004 BDE83840 		pop	{r3, r4, r5, lr}
 1859              	.LCFI31:
 1860              		.cfi_remember_state
 1861              		.cfi_restore 14
 1862              		.cfi_restore 5
 1863              		.cfi_restore 4
 1864              		.cfi_restore 3
 1865              		.cfi_def_cfa_offset 0
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1866              		.loc 1 975 0
 1867 0008 FFF7FEBF 		b	vPortYield
 1868              	.LVL175:
 1869              	.L183:
 1870              	.LCFI32:
 1871              		.cfi_restore_state
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1872              		.loc 1 931 0
 1873 000c 104B     		ldr	r3, .L191
 1874 000e 1B68     		ldr	r3, [r3]
 1875 0010 13B1     		cbz	r3, .L184
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1876              		.loc 1 931 0 is_stmt 0 discriminator 1
 1877 0012 FFF7FEFF 		bl	ulPortSetInterruptMask
 1878              	.LVL176:
 1879              	.L185:
 1880 0016 FEE7     		b	.L185
 1881              	.LVL177:
 1882              	.L184:
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1883              		.loc 1 932 0 is_stmt 1
 1884 0018 FFF7FEFF 		bl	vTaskSuspendAll
 1885              	.LVL178:
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1886              		.loc 1 946 0
 1887 001c 0D4B     		ldr	r3, .L191+4
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1888              		.loc 1 951 0
 1889 001e 0E4D     		ldr	r5, .L191+8
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1890              		.loc 1 946 0
 1891 0020 1C68     		ldr	r4, [r3]
 1892 0022 0444     		add	r4, r4, r0
 1893              	.LVL179:
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1894              		.loc 1 951 0
 1895 0024 2868     		ldr	r0, [r5]
 1896              	.LVL180:
 1897 0026 0430     		adds	r0, r0, #4
 1898 0028 FFF7FEFF 		bl	uxListRemove
 1899              	.LVL181:
 1900 002c 40B9     		cbnz	r0, .L186
ARM GAS  /tmp/ccy76Mh1.s 			page 98


 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1901              		.loc 1 956 0
 1902 002e 2A68     		ldr	r2, [r5]
 1903 0030 0A49     		ldr	r1, .L191+12
 1904 0032 D06A     		ldr	r0, [r2, #44]
 1905 0034 0122     		movs	r2, #1
 1906 0036 0B68     		ldr	r3, [r1]
 1907 0038 8240     		lsls	r2, r2, r0
 1908 003a 23EA0203 		bic	r3, r3, r2
 1909 003e 0B60     		str	r3, [r1]
 1910              	.L186:
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1911              		.loc 1 962 0
 1912 0040 2046     		mov	r0, r4
 1913 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1914              	.LVL182:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1915              		.loc 1 964 0
 1916 0046 FFF7FEFF 		bl	xTaskResumeAll
 1917              	.LVL183:
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1918              		.loc 1 973 0
 1919 004a 0028     		cmp	r0, #0
 1920 004c DAD0     		beq	.L187
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1921              		.loc 1 981 0
 1922 004e 38BD     		pop	{r3, r4, r5, pc}
 1923              	.LVL184:
 1924              	.L192:
 1925              		.align	2
 1926              	.L191:
 1927 0050 00000000 		.word	.LANCHOR16
 1928 0054 00000000 		.word	.LANCHOR5
 1929 0058 00000000 		.word	.LANCHOR4
 1930 005c 00000000 		.word	.LANCHOR14
 1931              		.cfi_endproc
 1932              	.LFE3:
 1934              		.section	.text.prvIdleTask,"ax",%progbits
 1935              		.align	1
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu softvfp
 1941              	prvIdleTask:
 1942              	.LFB27:
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 1943              		.loc 1 2691 0
 1944              		.cfi_startproc
 1945              		@ Volatile: function does not return.
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
 1948              	.LVL185:
 1949 0000 08B5     		push	{r3, lr}
 1950              	.LCFI33:
 1951              		.cfi_def_cfa_offset 8
 1952              		.cfi_offset 3, -8
 1953              		.cfi_offset 14, -4
ARM GAS  /tmp/ccy76Mh1.s 			page 99


 1954              	.LBB47:
 1955              	.LBB48:
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1956              		.loc 1 3042 0
 1957 0002 144E     		ldr	r6, .L202
 1958              	.LVL186:
 1959              	.L197:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1960              		.loc 1 3038 0
 1961 0004 144C     		ldr	r4, .L202+4
 1962              	.L195:
 1963 0006 2368     		ldr	r3, [r4]
 1964 0008 33B9     		cbnz	r3, .L196
 1965              	.LBE48:
 1966              	.LBE47:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1967              		.loc 1 2721 0
 1968 000a 144B     		ldr	r3, .L202+8
 1969 000c 1B68     		ldr	r3, [r3]
 1970 000e 012B     		cmp	r3, #1
 1971 0010 F8D9     		bls	.L197
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1972              		.loc 1 2723 0
 1973 0012 FFF7FEFF 		bl	vPortYield
 1974              	.LVL187:
 1975 0016 F5E7     		b	.L197
 1976              	.L196:
 1977              	.LBB53:
 1978              	.LBB52:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1979              		.loc 1 3040 0
 1980 0018 FFF7FEFF 		bl	vTaskSuspendAll
 1981              	.LVL188:
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1982              		.loc 1 3042 0
 1983 001c 3568     		ldr	r5, [r6]
 1984              	.LVL189:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1985              		.loc 1 3044 0
 1986 001e FFF7FEFF 		bl	xTaskResumeAll
 1987              	.LVL190:
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1988              		.loc 1 3046 0
 1989 0022 002D     		cmp	r5, #0
 1990 0024 EFD0     		beq	.L195
 1991              	.LBB49:
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1992              		.loc 1 3050 0
 1993 0026 FFF7FEFF 		bl	vPortEnterCritical
 1994              	.LVL191:
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1995              		.loc 1 3052 0
 1996 002a F368     		ldr	r3, [r6, #12]
 1997 002c DD68     		ldr	r5, [r3, #12]
 1998              	.LVL192:
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 1999              		.loc 1 3053 0
ARM GAS  /tmp/ccy76Mh1.s 			page 100


 2000 002e 281D     		adds	r0, r5, #4
 2001 0030 FFF7FEFF 		bl	uxListRemove
 2002              	.LVL193:
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 2003              		.loc 1 3054 0
 2004 0034 0A4A     		ldr	r2, .L202+12
 2005 0036 1368     		ldr	r3, [r2]
 2006 0038 013B     		subs	r3, r3, #1
 2007 003a 1360     		str	r3, [r2]
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2008              		.loc 1 3055 0
 2009 003c 2368     		ldr	r3, [r4]
 2010 003e 013B     		subs	r3, r3, #1
 2011 0040 2360     		str	r3, [r4]
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2012              		.loc 1 3057 0
 2013 0042 FFF7FEFF 		bl	vPortExitCritical
 2014              	.LVL194:
 2015              	.LBB50:
 2016              	.LBB51:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2017              		.loc 1 3337 0
 2018 0046 286B     		ldr	r0, [r5, #48]
 2019 0048 FFF7FEFF 		bl	vPortFree
 2020              	.LVL195:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2021              		.loc 1 3341 0
 2022 004c 2846     		mov	r0, r5
 2023 004e FFF7FEFF 		bl	vPortFree
 2024              	.LVL196:
 2025 0052 D8E7     		b	.L195
 2026              	.L203:
 2027              		.align	2
 2028              	.L202:
 2029 0054 00000000 		.word	.LANCHOR11
 2030 0058 00000000 		.word	.LANCHOR15
 2031 005c 00000000 		.word	.LANCHOR8
 2032 0060 00000000 		.word	.LANCHOR7
 2033              	.LBE51:
 2034              	.LBE50:
 2035              	.LBE49:
 2036              	.LBE52:
 2037              	.LBE53:
 2038              		.cfi_endproc
 2039              	.LFE27:
 2041              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2042              		.align	1
 2043              		.global	vTaskSwitchContext
 2044              		.syntax unified
 2045              		.thumb
 2046              		.thumb_func
 2047              		.fpu softvfp
 2049              	vTaskSwitchContext:
 2050              	.LFB19:
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2051              		.loc 1 2204 0
 2052              		.cfi_startproc
ARM GAS  /tmp/ccy76Mh1.s 			page 101


 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2055              		.loc 1 2205 0
 2056 0000 144B     		ldr	r3, .L211
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2057              		.loc 1 2204 0
 2058 0002 10B5     		push	{r4, lr}
 2059              	.LCFI34:
 2060              		.cfi_def_cfa_offset 8
 2061              		.cfi_offset 4, -8
 2062              		.cfi_offset 14, -4
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2063              		.loc 1 2205 0
 2064 0004 1A68     		ldr	r2, [r3]
 2065 0006 144B     		ldr	r3, .L211+4
 2066 0008 12B1     		cbz	r2, .L205
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2067              		.loc 1 2209 0
 2068 000a 0122     		movs	r2, #1
 2069              	.L210:
 2070              	.LBB54:
 2071              	.LBB55:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2072              		.loc 1 2248 0 discriminator 5
 2073 000c 1A60     		str	r2, [r3]
 2074 000e 10BD     		pop	{r4, pc}
 2075              	.L205:
 2076              	.LBE55:
 2077              	.LBE54:
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2078              		.loc 1 2213 0
 2079 0010 1A60     		str	r2, [r3]
 2080              	.LBB61:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2081              		.loc 1 2248 0
 2082 0012 124B     		ldr	r3, .L211+8
 2083 0014 1B68     		ldr	r3, [r3]
 2084              	.LVL197:
 2085              	.LBB56:
 2086              	.LBB57:
 2087              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
ARM GAS  /tmp/ccy76Mh1.s 			page 102


  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
ARM GAS  /tmp/ccy76Mh1.s 			page 103


  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortYield( void );
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD()					vPortYield()
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 104


 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2088              		.loc 2 169 0
 2089              		.syntax unified
 2090              	@ 169 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2091 0016 B3FA83F3 		clz r3, r3
 2092              	@ 0 "" 2
 2093              	.LVL198:
 2094              		.thumb
 2095              		.syntax unified
 2096              	.LBE57:
 2097              	.LBE56:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2098              		.loc 1 2248 0
 2099 001a 1422     		movs	r2, #20
 2100              	.LBB59:
 2101              	.LBB58:
 2102              		.loc 2 169 0
 2103 001c DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccy76Mh1.s 			page 105


 2104              	.LBE58:
 2105              	.LBE59:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2106              		.loc 1 2248 0
 2107 001e C3F11F03 		rsb	r3, r3, #31
 2108              	.LVL199:
 2109 0022 5A43     		muls	r2, r3, r2
 2110 0024 0E49     		ldr	r1, .L211+12
 2111 0026 8C58     		ldr	r4, [r1, r2]
 2112 0028 8818     		adds	r0, r1, r2
 2113 002a 14B9     		cbnz	r4, .L207
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2114              		.loc 1 2248 0 is_stmt 0 discriminator 1
 2115 002c FFF7FEFF 		bl	ulPortSetInterruptMask
 2116              	.LVL200:
 2117              	.L208:
 2118 0030 FEE7     		b	.L208
 2119              	.LVL201:
 2120              	.L207:
 2121              	.LBB60:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2122              		.loc 1 2248 0 discriminator 2
 2123 0032 4468     		ldr	r4, [r0, #4]
 2124 0034 0832     		adds	r2, r2, #8
 2125 0036 6468     		ldr	r4, [r4, #4]
 2126 0038 0A44     		add	r2, r2, r1
 2127 003a 9442     		cmp	r4, r2
 2128 003c 08BF     		it	eq
 2129 003e 6268     		ldreq	r2, [r4, #4]
 2130 0040 4460     		str	r4, [r0, #4]
 2131 0042 08BF     		it	eq
 2132 0044 4260     		streq	r2, [r0, #4]
 2133 0046 1422     		movs	r2, #20
 2134 0048 02FB0313 		mla	r3, r2, r3, r1
 2135              	.LVL202:
 2136 004c 5B68     		ldr	r3, [r3, #4]
 2137 004e DA68     		ldr	r2, [r3, #12]
 2138 0050 044B     		ldr	r3, .L211+16
 2139 0052 DBE7     		b	.L210
 2140              	.L212:
 2141              		.align	2
 2142              	.L211:
 2143 0054 00000000 		.word	.LANCHOR16
 2144 0058 00000000 		.word	.LANCHOR19
 2145 005c 00000000 		.word	.LANCHOR14
 2146 0060 00000000 		.word	.LANCHOR8
 2147 0064 00000000 		.word	.LANCHOR4
 2148              	.LBE60:
 2149              	.LBE61:
 2150              		.cfi_endproc
 2151              	.LFE19:
 2153              		.section	.text.vTaskSuspend,"ax",%progbits
 2154              		.align	1
 2155              		.global	vTaskSuspend
 2156              		.syntax unified
 2157              		.thumb
 2158              		.thumb_func
ARM GAS  /tmp/ccy76Mh1.s 			page 106


 2159              		.fpu softvfp
 2161              	vTaskSuspend:
 2162              	.LFB7:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2163              		.loc 1 1285 0 is_stmt 1
 2164              		.cfi_startproc
 2165              		@ args = 0, pretend = 0, frame = 0
 2166              		@ frame_needed = 0, uses_anonymous_args = 0
 2167              	.LVL203:
 2168 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2169              	.LCFI35:
 2170              		.cfi_def_cfa_offset 24
 2171              		.cfi_offset 3, -24
 2172              		.cfi_offset 4, -20
 2173              		.cfi_offset 5, -16
 2174              		.cfi_offset 6, -12
 2175              		.cfi_offset 7, -8
 2176              		.cfi_offset 14, -4
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2177              		.loc 1 1285 0
 2178 0002 0446     		mov	r4, r0
 2179 0004 244D     		ldr	r5, .L230
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2180              		.loc 1 1288 0
 2181 0006 FFF7FEFF 		bl	vPortEnterCritical
 2182              	.LVL204:
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2183              		.loc 1 1292 0
 2184 000a 04B9     		cbnz	r4, .L214
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2185              		.loc 1 1292 0 is_stmt 0 discriminator 1
 2186 000c 2C68     		ldr	r4, [r5]
 2187              	.LVL205:
 2188              	.L214:
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2189              		.loc 1 1298 0 is_stmt 1 discriminator 4
 2190 000e 261D     		adds	r6, r4, #4
 2191 0010 3046     		mov	r0, r6
 2192 0012 FFF7FEFF 		bl	uxListRemove
 2193              	.LVL206:
 2194 0016 60B9     		cbnz	r0, .L215
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2195              		.loc 1 1300 0
 2196 0018 1421     		movs	r1, #20
 2197 001a E06A     		ldr	r0, [r4, #44]
 2198 001c 1F4B     		ldr	r3, .L230+4
 2199 001e 4143     		muls	r1, r0, r1
 2200 0020 5B58     		ldr	r3, [r3, r1]
 2201 0022 33B9     		cbnz	r3, .L215
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2202              		.loc 1 1300 0 is_stmt 0 discriminator 1
 2203 0024 0122     		movs	r2, #1
 2204 0026 1E49     		ldr	r1, .L230+8
 2205 0028 8240     		lsls	r2, r2, r0
 2206 002a 0B68     		ldr	r3, [r1]
 2207 002c 23EA0203 		bic	r3, r3, r2
 2208 0030 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccy76Mh1.s 			page 107


 2209              	.L215:
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2210              		.loc 1 1308 0 is_stmt 1
 2211 0032 A36A     		ldr	r3, [r4, #40]
 2212 0034 1BB1     		cbz	r3, .L216
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2213              		.loc 1 1310 0
 2214 0036 04F11800 		add	r0, r4, #24
 2215 003a FFF7FEFF 		bl	uxListRemove
 2216              	.LVL207:
 2217              	.L216:
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2218              		.loc 1 1317 0
 2219 003e 194F     		ldr	r7, .L230+12
 2220 0040 3146     		mov	r1, r6
 2221 0042 3846     		mov	r0, r7
 2222 0044 FFF7FEFF 		bl	vListInsertEnd
 2223              	.LVL208:
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2224              		.loc 1 1319 0
 2225 0048 FFF7FEFF 		bl	vPortExitCritical
 2226              	.LVL209:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2227              		.loc 1 1321 0
 2228 004c 2B68     		ldr	r3, [r5]
 2229 004e 9C42     		cmp	r4, r3
 2230 0050 154B     		ldr	r3, .L230+16
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2231              		.loc 1 1323 0
 2232 0052 1B68     		ldr	r3, [r3]
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2233              		.loc 1 1321 0
 2234 0054 15D1     		bne	.L217
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2235              		.loc 1 1323 0
 2236 0056 4BB1     		cbz	r3, .L218
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2237              		.loc 1 1326 0
 2238 0058 144B     		ldr	r3, .L230+20
 2239 005a 1B68     		ldr	r3, [r3]
 2240 005c 13B1     		cbz	r3, .L219
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2241              		.loc 1 1326 0 is_stmt 0 discriminator 1
 2242 005e FFF7FEFF 		bl	ulPortSetInterruptMask
 2243              	.LVL210:
 2244              	.L220:
 2245 0062 FEE7     		b	.L220
 2246              	.L219:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2247              		.loc 1 1366 0 is_stmt 1
 2248 0064 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2249              	.LCFI36:
 2250              		.cfi_remember_state
 2251              		.cfi_restore 14
 2252              		.cfi_restore 7
 2253              		.cfi_restore 6
 2254              		.cfi_restore 5
ARM GAS  /tmp/ccy76Mh1.s 			page 108


 2255              		.cfi_restore 4
 2256              		.cfi_restore 3
 2257              		.cfi_def_cfa_offset 0
 2258              	.LVL211:
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2259              		.loc 1 1327 0
 2260 0068 FFF7FEBF 		b	vPortYield
 2261              	.LVL212:
 2262              	.L218:
 2263              	.LCFI37:
 2264              		.cfi_restore_state
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2265              		.loc 1 1334 0
 2266 006c 104A     		ldr	r2, .L230+24
 2267 006e 3968     		ldr	r1, [r7]
 2268 0070 1268     		ldr	r2, [r2]
 2269 0072 9142     		cmp	r1, r2
 2270 0074 01D1     		bne	.L221
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2271              		.loc 1 1340 0
 2272 0076 2B60     		str	r3, [r5]
 2273 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2274              	.LVL213:
 2275              	.L221:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2276              		.loc 1 1366 0
 2277 007a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2278              	.LCFI38:
 2279              		.cfi_remember_state
 2280              		.cfi_restore 14
 2281              		.cfi_restore 7
 2282              		.cfi_restore 6
 2283              		.cfi_restore 5
 2284              		.cfi_restore 4
 2285              		.cfi_restore 3
 2286              		.cfi_def_cfa_offset 0
 2287              	.LVL214:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2288              		.loc 1 1344 0
 2289 007e FFF7FEBF 		b	vTaskSwitchContext
 2290              	.LVL215:
 2291              	.L217:
 2292              	.LCFI39:
 2293              		.cfi_restore_state
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2294              		.loc 1 1350 0
 2295 0082 3BB1     		cbz	r3, .L213
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2296              		.loc 1 1355 0
 2297 0084 FFF7FEFF 		bl	vPortEnterCritical
 2298              	.LVL216:
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2299              		.loc 1 1357 0
 2300 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2301              	.LVL217:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2302              		.loc 1 1366 0
ARM GAS  /tmp/ccy76Mh1.s 			page 109


 2303 008c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 2304              	.LCFI40:
 2305              		.cfi_remember_state
 2306              		.cfi_restore 14
 2307              		.cfi_restore 7
 2308              		.cfi_restore 6
 2309              		.cfi_restore 5
 2310              		.cfi_restore 4
 2311              		.cfi_restore 3
 2312              		.cfi_def_cfa_offset 0
 2313              	.LVL218:
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2314              		.loc 1 1359 0
 2315 0090 FFF7FEBF 		b	vPortExitCritical
 2316              	.LVL219:
 2317              	.L213:
 2318              	.LCFI41:
 2319              		.cfi_restore_state
 2320 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2321              	.LVL220:
 2322              	.L231:
 2323 0096 00BF     		.align	2
 2324              	.L230:
 2325 0098 00000000 		.word	.LANCHOR4
 2326 009c 00000000 		.word	.LANCHOR8
 2327 00a0 00000000 		.word	.LANCHOR14
 2328 00a4 00000000 		.word	.LANCHOR2
 2329 00a8 00000000 		.word	.LANCHOR12
 2330 00ac 00000000 		.word	.LANCHOR16
 2331 00b0 00000000 		.word	.LANCHOR7
 2332              		.cfi_endproc
 2333              	.LFE7:
 2335              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2336              		.align	1
 2337              		.global	vTaskPlaceOnEventList
 2338              		.syntax unified
 2339              		.thumb
 2340              		.thumb_func
 2341              		.fpu softvfp
 2343              	vTaskPlaceOnEventList:
 2344              	.LFB20:
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 2345              		.loc 1 2263 0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              	.LVL221:
 2350 0000 38B5     		push	{r3, r4, r5, lr}
 2351              	.LCFI42:
 2352              		.cfi_def_cfa_offset 16
 2353              		.cfi_offset 3, -16
 2354              		.cfi_offset 4, -12
 2355              		.cfi_offset 5, -8
 2356              		.cfi_offset 14, -4
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 2357              		.loc 1 2263 0
 2358 0002 0D46     		mov	r5, r1
ARM GAS  /tmp/ccy76Mh1.s 			page 110


2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2359              		.loc 1 2266 0
 2360 0004 10B9     		cbnz	r0, .L233
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2361              		.loc 1 2266 0 is_stmt 0 discriminator 1
 2362 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 2363              	.LVL222:
 2364              	.L234:
 2365 000a FEE7     		b	.L234
 2366              	.LVL223:
 2367              	.L233:
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2368              		.loc 1 2275 0 is_stmt 1
 2369 000c 114C     		ldr	r4, .L237
 2370 000e 2168     		ldr	r1, [r4]
 2371              	.LVL224:
 2372 0010 1831     		adds	r1, r1, #24
 2373 0012 FFF7FEFF 		bl	vListInsert
 2374              	.LVL225:
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2375              		.loc 1 2280 0
 2376 0016 2068     		ldr	r0, [r4]
 2377 0018 0430     		adds	r0, r0, #4
 2378 001a FFF7FEFF 		bl	uxListRemove
 2379              	.LVL226:
 2380 001e 40B9     		cbnz	r0, .L235
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2381              		.loc 1 2284 0
 2382 0020 2268     		ldr	r2, [r4]
 2383 0022 0D49     		ldr	r1, .L237+4
 2384 0024 D06A     		ldr	r0, [r2, #44]
 2385 0026 0122     		movs	r2, #1
 2386 0028 0B68     		ldr	r3, [r1]
 2387 002a 8240     		lsls	r2, r2, r0
 2388 002c 23EA0203 		bic	r3, r3, r2
 2389 0030 0B60     		str	r3, [r1]
 2390              	.L235:
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2391              		.loc 1 2293 0
 2392 0032 6B1C     		adds	r3, r5, #1
 2393 0034 06D1     		bne	.L236
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2394              		.loc 1 2298 0
 2395 0036 2168     		ldr	r1, [r4]
 2396 0038 0848     		ldr	r0, .L237+8
 2397 003a 0431     		adds	r1, r1, #4
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2398              		.loc 1 2318 0
 2399 003c BDE83840 		pop	{r3, r4, r5, lr}
 2400              	.LCFI43:
 2401              		.cfi_remember_state
 2402              		.cfi_restore 14
 2403              		.cfi_restore 5
 2404              		.cfi_restore 4
 2405              		.cfi_restore 3
 2406              		.cfi_def_cfa_offset 0
 2407              	.LVL227:
ARM GAS  /tmp/ccy76Mh1.s 			page 111


2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2408              		.loc 1 2298 0
 2409 0040 FFF7FEBF 		b	vListInsertEnd
 2410              	.LVL228:
 2411              	.L236:
 2412              	.LCFI44:
 2413              		.cfi_restore_state
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2414              		.loc 1 2305 0
 2415 0044 064B     		ldr	r3, .L237+12
 2416 0046 1868     		ldr	r0, [r3]
 2417              	.LVL229:
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2418              		.loc 1 2306 0
 2419 0048 2844     		add	r0, r0, r5
 2420              	.LVL230:
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2421              		.loc 1 2318 0
 2422 004a BDE83840 		pop	{r3, r4, r5, lr}
 2423              	.LCFI45:
 2424              		.cfi_restore 14
 2425              		.cfi_restore 5
 2426              		.cfi_restore 4
 2427              		.cfi_restore 3
 2428              		.cfi_def_cfa_offset 0
 2429              	.LVL231:
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2430              		.loc 1 2306 0
 2431 004e FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 2432              	.LVL232:
 2433              	.L238:
 2434 0052 00BF     		.align	2
 2435              	.L237:
 2436 0054 00000000 		.word	.LANCHOR4
 2437 0058 00000000 		.word	.LANCHOR14
 2438 005c 00000000 		.word	.LANCHOR2
 2439 0060 00000000 		.word	.LANCHOR5
 2440              		.cfi_endproc
 2441              	.LFE20:
 2443              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2444              		.align	1
 2445              		.global	vTaskPlaceOnUnorderedEventList
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2449              		.fpu softvfp
 2451              	vTaskPlaceOnUnorderedEventList:
 2452              	.LFB21:
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 2453              		.loc 1 2322 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 0
 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457              	.LVL233:
 2458 0000 38B5     		push	{r3, r4, r5, lr}
 2459              	.LCFI46:
 2460              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccy76Mh1.s 			page 112


 2461              		.cfi_offset 3, -16
 2462              		.cfi_offset 4, -12
 2463              		.cfi_offset 5, -8
 2464              		.cfi_offset 14, -4
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 2465              		.loc 1 2322 0
 2466 0002 1546     		mov	r5, r2
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2467              		.loc 1 2325 0
 2468 0004 10B9     		cbnz	r0, .L240
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2469              		.loc 1 2325 0 is_stmt 0 discriminator 1
 2470 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 2471              	.LVL234:
 2472              	.L241:
 2473 000a FEE7     		b	.L241
 2474              	.LVL235:
 2475              	.L240:
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2476              		.loc 1 2329 0 is_stmt 1
 2477 000c 164B     		ldr	r3, .L246
 2478 000e 1B68     		ldr	r3, [r3]
 2479 0010 13B9     		cbnz	r3, .L242
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2480              		.loc 1 2329 0 is_stmt 0 discriminator 1
 2481 0012 FFF7FEFF 		bl	ulPortSetInterruptMask
 2482              	.LVL236:
 2483              	.L243:
 2484 0016 FEE7     		b	.L243
 2485              	.LVL237:
 2486              	.L242:
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2487              		.loc 1 2334 0 is_stmt 1
 2488 0018 144C     		ldr	r4, .L246+4
 2489 001a 41F00041 		orr	r1, r1, #-2147483648
 2490              	.LVL238:
 2491 001e 2368     		ldr	r3, [r4]
 2492 0020 9961     		str	r1, [r3, #24]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2493              		.loc 1 2341 0
 2494 0022 2168     		ldr	r1, [r4]
 2495 0024 1831     		adds	r1, r1, #24
 2496 0026 FFF7FEFF 		bl	vListInsertEnd
 2497              	.LVL239:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2498              		.loc 1 2346 0
 2499 002a 2068     		ldr	r0, [r4]
 2500 002c 0430     		adds	r0, r0, #4
 2501 002e FFF7FEFF 		bl	uxListRemove
 2502              	.LVL240:
 2503 0032 40B9     		cbnz	r0, .L244
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2504              		.loc 1 2350 0
 2505 0034 2168     		ldr	r1, [r4]
 2506 0036 0E4A     		ldr	r2, .L246+8
 2507 0038 C86A     		ldr	r0, [r1, #44]
 2508 003a 0121     		movs	r1, #1
ARM GAS  /tmp/ccy76Mh1.s 			page 113


 2509 003c 1368     		ldr	r3, [r2]
 2510 003e 8140     		lsls	r1, r1, r0
 2511 0040 23EA0103 		bic	r3, r3, r1
 2512 0044 1360     		str	r3, [r2]
 2513              	.L244:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2514              		.loc 1 2359 0
 2515 0046 6B1C     		adds	r3, r5, #1
 2516 0048 06D1     		bne	.L245
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2517              		.loc 1 2364 0
 2518 004a 2168     		ldr	r1, [r4]
 2519 004c 0948     		ldr	r0, .L246+12
 2520 004e 0431     		adds	r1, r1, #4
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2521              		.loc 1 2384 0
 2522 0050 BDE83840 		pop	{r3, r4, r5, lr}
 2523              	.LCFI47:
 2524              		.cfi_remember_state
 2525              		.cfi_restore 14
 2526              		.cfi_restore 5
 2527              		.cfi_restore 4
 2528              		.cfi_restore 3
 2529              		.cfi_def_cfa_offset 0
 2530              	.LVL241:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2531              		.loc 1 2364 0
 2532 0054 FFF7FEBF 		b	vListInsertEnd
 2533              	.LVL242:
 2534              	.L245:
 2535              	.LCFI48:
 2536              		.cfi_restore_state
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2537              		.loc 1 2371 0
 2538 0058 074B     		ldr	r3, .L246+16
 2539 005a 1868     		ldr	r0, [r3]
 2540              	.LVL243:
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2541              		.loc 1 2372 0
 2542 005c 2844     		add	r0, r0, r5
 2543              	.LVL244:
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2544              		.loc 1 2384 0
 2545 005e BDE83840 		pop	{r3, r4, r5, lr}
 2546              	.LCFI49:
 2547              		.cfi_restore 14
 2548              		.cfi_restore 5
 2549              		.cfi_restore 4
 2550              		.cfi_restore 3
 2551              		.cfi_def_cfa_offset 0
 2552              	.LVL245:
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2553              		.loc 1 2372 0
 2554 0062 FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 2555              	.LVL246:
 2556              	.L247:
 2557 0066 00BF     		.align	2
ARM GAS  /tmp/ccy76Mh1.s 			page 114


 2558              	.L246:
 2559 0068 00000000 		.word	.LANCHOR16
 2560 006c 00000000 		.word	.LANCHOR4
 2561 0070 00000000 		.word	.LANCHOR14
 2562 0074 00000000 		.word	.LANCHOR2
 2563 0078 00000000 		.word	.LANCHOR5
 2564              		.cfi_endproc
 2565              	.LFE21:
 2567              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2568              		.align	1
 2569              		.global	xTaskRemoveFromEventList
 2570              		.syntax unified
 2571              		.thumb
 2572              		.thumb_func
 2573              		.fpu softvfp
 2575              	xTaskRemoveFromEventList:
 2576              	.LFB22:
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2577              		.loc 1 2466 0
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 0
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 2581              	.LVL247:
 2582 0000 38B5     		push	{r3, r4, r5, lr}
 2583              	.LCFI50:
 2584              		.cfi_def_cfa_offset 16
 2585              		.cfi_offset 3, -16
 2586              		.cfi_offset 4, -12
 2587              		.cfi_offset 5, -8
 2588              		.cfi_offset 14, -4
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2589              		.loc 1 2483 0
 2590 0002 C368     		ldr	r3, [r0, #12]
 2591 0004 DC68     		ldr	r4, [r3, #12]
 2592              	.LVL248:
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2593              		.loc 1 2484 0
 2594 0006 14B9     		cbnz	r4, .L249
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2595              		.loc 1 2484 0 is_stmt 0 discriminator 1
 2596 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 2597              	.LVL249:
 2598              	.L250:
 2599 000c FEE7     		b	.L250
 2600              	.LVL250:
 2601              	.L249:
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2602              		.loc 1 2485 0 is_stmt 1
 2603 000e 04F11805 		add	r5, r4, #24
 2604 0012 2846     		mov	r0, r5
 2605              	.LVL251:
 2606 0014 FFF7FEFF 		bl	uxListRemove
 2607              	.LVL252:
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2608              		.loc 1 2487 0
 2609 0018 114B     		ldr	r3, .L256
 2610 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccy76Mh1.s 			page 115


 2611 001c E3B9     		cbnz	r3, .L251
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2612              		.loc 1 2489 0
 2613 001e 251D     		adds	r5, r4, #4
 2614 0020 2846     		mov	r0, r5
 2615 0022 FFF7FEFF 		bl	uxListRemove
 2616              	.LVL253:
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2617              		.loc 1 2490 0
 2618 0026 0123     		movs	r3, #1
 2619 0028 0E49     		ldr	r1, .L256+4
 2620 002a E26A     		ldr	r2, [r4, #44]
 2621 002c 0868     		ldr	r0, [r1]
 2622 002e 9340     		lsls	r3, r3, r2
 2623 0030 0343     		orrs	r3, r3, r0
 2624 0032 1420     		movs	r0, #20
 2625 0034 0B60     		str	r3, [r1]
 2626 0036 2946     		mov	r1, r5
 2627 0038 0B4B     		ldr	r3, .L256+8
 2628 003a 00FB0230 		mla	r0, r0, r2, r3
 2629              	.L255:
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2630              		.loc 1 2496 0
 2631 003e FFF7FEFF 		bl	vListInsertEnd
 2632              	.LVL254:
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2633              		.loc 1 2499 0
 2634 0042 0A4B     		ldr	r3, .L256+12
 2635 0044 E26A     		ldr	r2, [r4, #44]
 2636 0046 1B68     		ldr	r3, [r3]
 2637 0048 DB6A     		ldr	r3, [r3, #44]
 2638 004a 9A42     		cmp	r2, r3
 2639              	.LVL255:
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2640              		.loc 1 2508 0
 2641 004c 85BF     		ittet	hi
 2642 004e 0120     		movhi	r0, #1
 2643 0050 074B     		ldrhi	r3, .L256+16
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2644              		.loc 1 2512 0
 2645 0052 0020     		movls	r0, #0
 2646              	.LVL256:
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2647              		.loc 1 2508 0
 2648 0054 1860     		strhi	r0, [r3]
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2649              		.loc 1 2530 0
 2650 0056 38BD     		pop	{r3, r4, r5, pc}
 2651              	.LVL257:
 2652              	.L251:
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2653              		.loc 1 2496 0
 2654 0058 2946     		mov	r1, r5
 2655 005a 0648     		ldr	r0, .L256+20
 2656 005c EFE7     		b	.L255
 2657              	.L257:
 2658 005e 00BF     		.align	2
ARM GAS  /tmp/ccy76Mh1.s 			page 116


 2659              	.L256:
 2660 0060 00000000 		.word	.LANCHOR16
 2661 0064 00000000 		.word	.LANCHOR14
 2662 0068 00000000 		.word	.LANCHOR8
 2663 006c 00000000 		.word	.LANCHOR4
 2664 0070 00000000 		.word	.LANCHOR19
 2665 0074 00000000 		.word	.LANCHOR3
 2666              		.cfi_endproc
 2667              	.LFE22:
 2669              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2670              		.align	1
 2671              		.global	xTaskRemoveFromUnorderedEventList
 2672              		.syntax unified
 2673              		.thumb
 2674              		.thumb_func
 2675              		.fpu softvfp
 2677              	xTaskRemoveFromUnorderedEventList:
 2678              	.LFB23:
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2679              		.loc 1 2534 0
 2680              		.cfi_startproc
 2681              		@ args = 0, pretend = 0, frame = 0
 2682              		@ frame_needed = 0, uses_anonymous_args = 0
 2683              	.LVL258:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2684              		.loc 1 2540 0
 2685 0000 174A     		ldr	r2, .L265
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2686              		.loc 1 2534 0
 2687 0002 70B5     		push	{r4, r5, r6, lr}
 2688              	.LCFI51:
 2689              		.cfi_def_cfa_offset 16
 2690              		.cfi_offset 4, -16
 2691              		.cfi_offset 5, -12
 2692              		.cfi_offset 6, -8
 2693              		.cfi_offset 14, -4
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2694              		.loc 1 2540 0
 2695 0004 1268     		ldr	r2, [r2]
 2696 0006 12B9     		cbnz	r2, .L259
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2697              		.loc 1 2540 0 is_stmt 0 discriminator 1
 2698 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 2699              	.LVL259:
 2700              	.L260:
 2701 000c FEE7     		b	.L260
 2702              	.LVL260:
 2703              	.L259:
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2704              		.loc 1 2547 0 is_stmt 1
 2705 000e C568     		ldr	r5, [r0, #12]
 2706              	.LVL261:
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2707              		.loc 1 2543 0
 2708 0010 41F00041 		orr	r1, r1, #-2147483648
 2709              	.LVL262:
 2710 0014 0160     		str	r1, [r0]
ARM GAS  /tmp/ccy76Mh1.s 			page 117


2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 2711              		.loc 1 2548 0
 2712 0016 15B9     		cbnz	r5, .L261
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 2713              		.loc 1 2548 0 is_stmt 0 discriminator 1
 2714 0018 FFF7FEFF 		bl	ulPortSetInterruptMask
 2715              	.LVL263:
 2716              	.L262:
 2717 001c FEE7     		b	.L262
 2718              	.LVL264:
 2719              	.L261:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2720              		.loc 1 2555 0 is_stmt 1
 2721 001e 0124     		movs	r4, #1
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2722              		.loc 1 2554 0
 2723 0020 2E1D     		adds	r6, r5, #4
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2724              		.loc 1 2549 0
 2725 0022 FFF7FEFF 		bl	uxListRemove
 2726              	.LVL265:
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2727              		.loc 1 2554 0
 2728 0026 3046     		mov	r0, r6
 2729 0028 FFF7FEFF 		bl	uxListRemove
 2730              	.LVL266:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2731              		.loc 1 2555 0
 2732 002c 0D49     		ldr	r1, .L265+4
 2733 002e EA6A     		ldr	r2, [r5, #44]
 2734 0030 0868     		ldr	r0, [r1]
 2735 0032 04FA02F3 		lsl	r3, r4, r2
 2736 0036 0343     		orrs	r3, r3, r0
 2737 0038 1420     		movs	r0, #20
 2738 003a 0B60     		str	r3, [r1]
 2739 003c 0A4B     		ldr	r3, .L265+8
 2740 003e 3146     		mov	r1, r6
 2741 0040 00FB0230 		mla	r0, r0, r2, r3
 2742 0044 FFF7FEFF 		bl	vListInsertEnd
 2743              	.LVL267:
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2744              		.loc 1 2557 0
 2745 0048 084B     		ldr	r3, .L265+12
 2746 004a EA6A     		ldr	r2, [r5, #44]
 2747 004c 1B68     		ldr	r3, [r3]
 2748 004e DB6A     		ldr	r3, [r3, #44]
 2749 0050 9A42     		cmp	r2, r3
 2750              	.LVL268:
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2751              		.loc 1 2567 0
 2752 0052 83BF     		ittte	hi
 2753 0054 064B     		ldrhi	r3, .L265+16
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2754              		.loc 1 2563 0
 2755 0056 2046     		movhi	r0, r4
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2756              		.loc 1 2567 0
ARM GAS  /tmp/ccy76Mh1.s 			page 118


 2757 0058 1C60     		strhi	r4, [r3]
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2758              		.loc 1 2571 0
 2759 005a 0020     		movls	r0, #0
 2760              	.LVL269:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2761              		.loc 1 2575 0
 2762 005c 70BD     		pop	{r4, r5, r6, pc}
 2763              	.LVL270:
 2764              	.L266:
 2765 005e 00BF     		.align	2
 2766              	.L265:
 2767 0060 00000000 		.word	.LANCHOR16
 2768 0064 00000000 		.word	.LANCHOR14
 2769 0068 00000000 		.word	.LANCHOR8
 2770 006c 00000000 		.word	.LANCHOR4
 2771 0070 00000000 		.word	.LANCHOR19
 2772              		.cfi_endproc
 2773              	.LFE23:
 2775              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2776              		.align	1
 2777              		.global	vTaskSetTimeOutState
 2778              		.syntax unified
 2779              		.thumb
 2780              		.thumb_func
 2781              		.fpu softvfp
 2783              	vTaskSetTimeOutState:
 2784              	.LFB24:
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 2785              		.loc 1 2579 0
 2786              		.cfi_startproc
 2787              		@ args = 0, pretend = 0, frame = 0
 2788              		@ frame_needed = 0, uses_anonymous_args = 0
 2789              	.LVL271:
 2790 0000 08B5     		push	{r3, lr}
 2791              	.LCFI52:
 2792              		.cfi_def_cfa_offset 8
 2793              		.cfi_offset 3, -8
 2794              		.cfi_offset 14, -4
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2795              		.loc 1 2580 0
 2796 0002 10B9     		cbnz	r0, .L268
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2797              		.loc 1 2580 0 is_stmt 0 discriminator 1
 2798 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 2799              	.LVL272:
 2800              	.L269:
 2801 0008 FEE7     		b	.L269
 2802              	.LVL273:
 2803              	.L268:
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2804              		.loc 1 2581 0 is_stmt 1
 2805 000a 034B     		ldr	r3, .L270
 2806 000c 1B68     		ldr	r3, [r3]
 2807 000e 0360     		str	r3, [r0]
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2808              		.loc 1 2582 0
ARM GAS  /tmp/ccy76Mh1.s 			page 119


 2809 0010 024B     		ldr	r3, .L270+4
 2810 0012 1B68     		ldr	r3, [r3]
 2811 0014 4360     		str	r3, [r0, #4]
 2812 0016 08BD     		pop	{r3, pc}
 2813              	.L271:
 2814              		.align	2
 2815              	.L270:
 2816 0018 00000000 		.word	.LANCHOR17
 2817 001c 00000000 		.word	.LANCHOR5
 2818              		.cfi_endproc
 2819              	.LFE24:
 2821              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2822              		.align	1
 2823              		.global	xTaskCheckForTimeOut
 2824              		.syntax unified
 2825              		.thumb
 2826              		.thumb_func
 2827              		.fpu softvfp
 2829              	xTaskCheckForTimeOut:
 2830              	.LFB25:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2831              		.loc 1 2587 0
 2832              		.cfi_startproc
 2833              		@ args = 0, pretend = 0, frame = 0
 2834              		@ frame_needed = 0, uses_anonymous_args = 0
 2835              	.LVL274:
 2836 0000 38B5     		push	{r3, r4, r5, lr}
 2837              	.LCFI53:
 2838              		.cfi_def_cfa_offset 16
 2839              		.cfi_offset 3, -16
 2840              		.cfi_offset 4, -12
 2841              		.cfi_offset 5, -8
 2842              		.cfi_offset 14, -4
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2843              		.loc 1 2587 0
 2844 0002 0D46     		mov	r5, r1
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 2845              		.loc 1 2590 0
 2846 0004 0446     		mov	r4, r0
 2847 0006 10B9     		cbnz	r0, .L273
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 2848              		.loc 1 2590 0 is_stmt 0 discriminator 1
 2849 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 2850              	.LVL275:
 2851              	.L274:
 2852 000c FEE7     		b	.L274
 2853              	.LVL276:
 2854              	.L273:
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2855              		.loc 1 2591 0 is_stmt 1
 2856 000e 11B9     		cbnz	r1, .L275
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2857              		.loc 1 2591 0 is_stmt 0 discriminator 1
 2858 0010 FFF7FEFF 		bl	ulPortSetInterruptMask
 2859              	.LVL277:
 2860              	.L276:
 2861 0014 FEE7     		b	.L276
ARM GAS  /tmp/ccy76Mh1.s 			page 120


 2862              	.LVL278:
 2863              	.L275:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2864              		.loc 1 2593 0 is_stmt 1
 2865 0016 FFF7FEFF 		bl	vPortEnterCritical
 2866              	.LVL279:
 2867              	.LBB62:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2868              		.loc 1 2596 0
 2869 001a 0E4B     		ldr	r3, .L282
 2870 001c 1968     		ldr	r1, [r3]
 2871              	.LVL280:
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2872              		.loc 1 2602 0
 2873 001e 2B68     		ldr	r3, [r5]
 2874 0020 5A1C     		adds	r2, r3, #1
 2875 0022 10D0     		beq	.L279
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2876              		.loc 1 2609 0
 2877 0024 0C4A     		ldr	r2, .L282+4
 2878 0026 2068     		ldr	r0, [r4]
 2879 0028 1268     		ldr	r2, [r2]
 2880 002a 9042     		cmp	r0, r2
 2881 002c 6268     		ldr	r2, [r4, #4]
 2882 002e 01D0     		beq	.L278
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2883              		.loc 1 2609 0 is_stmt 0 discriminator 1
 2884 0030 9142     		cmp	r1, r2
 2885 0032 0DD2     		bcs	.L281
 2886              	.L278:
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2887              		.loc 1 2617 0 is_stmt 1
 2888 0034 881A     		subs	r0, r1, r2
 2889 0036 8342     		cmp	r3, r0
 2890 0038 0AD9     		bls	.L281
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2891              		.loc 1 2620 0
 2892 003a 5B1A     		subs	r3, r3, r1
 2893 003c 1344     		add	r3, r3, r2
 2894 003e 2B60     		str	r3, [r5]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2895              		.loc 1 2621 0
 2896 0040 2046     		mov	r0, r4
 2897 0042 FFF7FEFF 		bl	vTaskSetTimeOutState
 2898              	.LVL281:
 2899              	.L279:
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2900              		.loc 1 2604 0
 2901 0046 0024     		movs	r4, #0
 2902              	.LVL282:
 2903              	.L277:
 2904              	.LBE62:
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2905              		.loc 1 2629 0
 2906 0048 FFF7FEFF 		bl	vPortExitCritical
 2907              	.LVL283:
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccy76Mh1.s 			page 121


 2908              		.loc 1 2632 0
 2909 004c 2046     		mov	r0, r4
 2910 004e 38BD     		pop	{r3, r4, r5, pc}
 2911              	.LVL284:
 2912              	.L281:
 2913              	.LBB63:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2914              		.loc 1 2615 0
 2915 0050 0124     		movs	r4, #1
 2916              	.LVL285:
 2917 0052 F9E7     		b	.L277
 2918              	.L283:
 2919              		.align	2
 2920              	.L282:
 2921 0054 00000000 		.word	.LANCHOR5
 2922 0058 00000000 		.word	.LANCHOR17
 2923              	.LBE63:
 2924              		.cfi_endproc
 2925              	.LFE25:
 2927              		.section	.text.vTaskMissedYield,"ax",%progbits
 2928              		.align	1
 2929              		.global	vTaskMissedYield
 2930              		.syntax unified
 2931              		.thumb
 2932              		.thumb_func
 2933              		.fpu softvfp
 2935              	vTaskMissedYield:
 2936              	.LFB26:
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 2937              		.loc 1 2636 0
 2938              		.cfi_startproc
 2939              		@ args = 0, pretend = 0, frame = 0
 2940              		@ frame_needed = 0, uses_anonymous_args = 0
 2941              		@ link register save eliminated.
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2942              		.loc 1 2637 0
 2943 0000 0122     		movs	r2, #1
 2944 0002 014B     		ldr	r3, .L285
 2945 0004 1A60     		str	r2, [r3]
 2946 0006 7047     		bx	lr
 2947              	.L286:
 2948              		.align	2
 2949              	.L285:
 2950 0008 00000000 		.word	.LANCHOR19
 2951              		.cfi_endproc
 2952              	.LFE26:
 2954              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 2955              		.align	1
 2956              		.global	xTaskGetCurrentTaskHandle
 2957              		.syntax unified
 2958              		.thumb
 2959              		.thumb_func
 2960              		.fpu softvfp
 2962              	xTaskGetCurrentTaskHandle:
 2963              	.LFB35:
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccy76Mh1.s 			page 122


3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2964              		.loc 1 3374 0
 2965              		.cfi_startproc
 2966              		@ args = 0, pretend = 0, frame = 0
 2967              		@ frame_needed = 0, uses_anonymous_args = 0
 2968              		@ link register save eliminated.
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 2969              		.loc 1 3380 0
 2970 0000 014B     		ldr	r3, .L288
 2971 0002 1868     		ldr	r0, [r3]
 2972              	.LVL286:
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2973              		.loc 1 3383 0
 2974 0004 7047     		bx	lr
 2975              	.L289:
 2976 0006 00BF     		.align	2
 2977              	.L288:
 2978 0008 00000000 		.word	.LANCHOR4
 2979              		.cfi_endproc
 2980              	.LFE35:
 2982              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 2983              		.align	1
 2984              		.global	xTaskGetSchedulerState
 2985              		.syntax unified
 2986              		.thumb
 2987              		.thumb_func
 2988              		.fpu softvfp
 2990              	xTaskGetSchedulerState:
 2991              	.LFB36:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2992              		.loc 1 3391 0
 2993              		.cfi_startproc
 2994              		@ args = 0, pretend = 0, frame = 0
 2995              		@ frame_needed = 0, uses_anonymous_args = 0
 2996              		@ link register save eliminated.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
ARM GAS  /tmp/ccy76Mh1.s 			page 123


 2997              		.loc 1 3394 0
 2998 0000 054B     		ldr	r3, .L294
 2999 0002 1B68     		ldr	r3, [r3]
 3000 0004 33B1     		cbz	r3, .L292
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3001              		.loc 1 3400 0
 3002 0006 054B     		ldr	r3, .L294+4
 3003 0008 1B68     		ldr	r3, [r3]
 3004 000a 002B     		cmp	r3, #0
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 3005              		.loc 1 3406 0
 3006 000c 0CBF     		ite	eq
 3007 000e 0220     		moveq	r0, #2
 3008 0010 0020     		movne	r0, #0
 3009 0012 7047     		bx	lr
 3010              	.L292:
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3011              		.loc 1 3396 0
 3012 0014 0120     		movs	r0, #1
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3013              		.loc 1 3411 0
 3014 0016 7047     		bx	lr
 3015              	.L295:
 3016              		.align	2
 3017              	.L294:
 3018 0018 00000000 		.word	.LANCHOR12
 3019 001c 00000000 		.word	.LANCHOR16
 3020              		.cfi_endproc
 3021              	.LFE36:
 3023              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3024              		.align	1
 3025              		.global	vTaskPriorityInherit
 3026              		.syntax unified
 3027              		.thumb
 3028              		.thumb_func
 3029              		.fpu softvfp
 3031              	vTaskPriorityInherit:
 3032              	.LFB37:
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/ccy76Mh1.s 			page 124


3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3033              		.loc 1 3419 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 0
 3036              		@ frame_needed = 0, uses_anonymous_args = 0
 3037              	.LVL287:
 3038 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3039              	.LCFI54:
 3040              		.cfi_def_cfa_offset 24
 3041              		.cfi_offset 4, -24
 3042              		.cfi_offset 5, -20
 3043              		.cfi_offset 6, -16
 3044              		.cfi_offset 7, -12
 3045              		.cfi_offset 8, -8
 3046              		.cfi_offset 14, -4
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3047              		.loc 1 3424 0
 3048 0004 0446     		mov	r4, r0
 3049 0006 0028     		cmp	r0, #0
 3050 0008 39D0     		beq	.L296
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3051              		.loc 1 3429 0
 3052 000a 1E4D     		ldr	r5, .L307
 3053 000c C36A     		ldr	r3, [r0, #44]
 3054 000e 2A68     		ldr	r2, [r5]
 3055 0010 D26A     		ldr	r2, [r2, #44]
 3056 0012 9342     		cmp	r3, r2
 3057 0014 33D2     		bcs	.L296
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 3058              		.loc 1 3445 0
 3059 0016 1427     		movs	r7, #20
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccy76Mh1.s 			page 125


 3060              		.loc 1 3434 0
 3061 0018 8269     		ldr	r2, [r0, #24]
 3062              		.loc 1 3445 0
 3063 001a 1B4E     		ldr	r6, .L307+4
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3064              		.loc 1 3434 0
 3065 001c 002A     		cmp	r2, #0
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3066              		.loc 1 3436 0
 3067 001e A8BF     		it	ge
 3068 0020 2A68     		ldrge	r2, [r5]
 3069              		.loc 1 3445 0
 3070 0022 07FB0363 		mla	r3, r7, r3, r6
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3071              		.loc 1 3436 0
 3072 0026 A2BF     		ittt	ge
 3073 0028 D26A     		ldrge	r2, [r2, #44]
 3074 002a C2F10702 		rsbge	r2, r2, #7
 3075 002e 8261     		strge	r2, [r0, #24]
 3076              		.loc 1 3445 0
 3077 0030 4269     		ldr	r2, [r0, #20]
 3078 0032 9A42     		cmp	r2, r3
 3079 0034 20D1     		bne	.L306
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3080              		.loc 1 3447 0
 3081 0036 00F10408 		add	r8, r0, #4
 3082 003a 4046     		mov	r0, r8
 3083              	.LVL288:
 3084 003c FFF7FEFF 		bl	uxListRemove
 3085              	.LVL289:
 3086 0040 124A     		ldr	r2, .L307+8
 3087 0042 48B9     		cbnz	r0, .L301
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3088              		.loc 1 3449 0
 3089 0044 E06A     		ldr	r0, [r4, #44]
 3090 0046 4743     		muls	r7, r0, r7
 3091 0048 F359     		ldr	r3, [r6, r7]
 3092 004a 2BB9     		cbnz	r3, .L301
 3093              		.loc 1 3449 0 is_stmt 0 discriminator 1
 3094 004c 0121     		movs	r1, #1
 3095 004e 1368     		ldr	r3, [r2]
 3096 0050 8140     		lsls	r1, r1, r0
 3097 0052 23EA0103 		bic	r3, r3, r1
 3098 0056 1360     		str	r3, [r2]
 3099              	.L301:
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3100              		.loc 1 3457 0 is_stmt 1
 3101 0058 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccy76Mh1.s 			page 126


3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3102              		.loc 1 3458 0
 3103 005a 1168     		ldr	r1, [r2]
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3104              		.loc 1 3457 0
 3105 005c D86A     		ldr	r0, [r3, #44]
 3106              		.loc 1 3458 0
 3107 005e 0123     		movs	r3, #1
 3108 0060 8340     		lsls	r3, r3, r0
 3109 0062 0B43     		orrs	r3, r3, r1
 3110 0064 1360     		str	r3, [r2]
 3111 0066 1423     		movs	r3, #20
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3112              		.loc 1 3457 0
 3113 0068 E062     		str	r0, [r4, #44]
 3114              		.loc 1 3458 0
 3115 006a 4146     		mov	r1, r8
 3116 006c 03FB0060 		mla	r0, r3, r0, r6
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3117              		.loc 1 3477 0
 3118 0070 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 3119              	.LCFI55:
 3120              		.cfi_remember_state
 3121              		.cfi_restore 14
 3122              		.cfi_restore 8
 3123              		.cfi_restore 7
 3124              		.cfi_restore 6
 3125              		.cfi_restore 5
 3126              		.cfi_restore 4
 3127              		.cfi_def_cfa_offset 0
 3128              	.LVL290:
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3129              		.loc 1 3458 0
 3130 0074 FFF7FEBF 		b	vListInsertEnd
 3131              	.LVL291:
 3132              	.L306:
 3133              	.LCFI56:
 3134              		.cfi_restore_state
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccy76Mh1.s 			page 127


 3135              		.loc 1 3463 0
 3136 0078 2B68     		ldr	r3, [r5]
 3137 007a DB6A     		ldr	r3, [r3, #44]
 3138 007c C362     		str	r3, [r0, #44]
 3139              	.L296:
 3140 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3141              	.L308:
 3142 0082 00BF     		.align	2
 3143              	.L307:
 3144 0084 00000000 		.word	.LANCHOR4
 3145 0088 00000000 		.word	.LANCHOR8
 3146 008c 00000000 		.word	.LANCHOR14
 3147              		.cfi_endproc
 3148              	.LFE37:
 3150              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3151              		.align	1
 3152              		.global	xTaskPriorityDisinherit
 3153              		.syntax unified
 3154              		.thumb
 3155              		.thumb_func
 3156              		.fpu softvfp
 3158              	xTaskPriorityDisinherit:
 3159              	.LFB38:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3160              		.loc 1 3485 0
 3161              		.cfi_startproc
 3162              		@ args = 0, pretend = 0, frame = 0
 3163              		@ frame_needed = 0, uses_anonymous_args = 0
 3164              	.LVL292:
 3165 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3166              	.LCFI57:
 3167              		.cfi_def_cfa_offset 24
 3168              		.cfi_offset 3, -24
 3169              		.cfi_offset 4, -20
 3170              		.cfi_offset 5, -16
 3171              		.cfi_offset 6, -12
 3172              		.cfi_offset 7, -8
 3173              		.cfi_offset 14, -4
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3174              		.loc 1 3489 0
 3175 0002 0446     		mov	r4, r0
 3176 0004 08B9     		cbnz	r0, .L310
 3177              	.L316:
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3178              		.loc 1 3487 0
 3179 0006 0020     		movs	r0, #0
 3180              	.LVL293:
ARM GAS  /tmp/ccy76Mh1.s 			page 128


 3181 0008 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3182              	.LVL294:
 3183              	.L310:
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 3184              		.loc 1 3495 0
 3185 000a 1C4B     		ldr	r3, .L318
 3186 000c 1B68     		ldr	r3, [r3]
 3187 000e 9842     		cmp	r0, r3
 3188 0010 02D0     		beq	.L312
 3189              		.loc 1 3495 0 is_stmt 0 discriminator 1
 3190 0012 FFF7FEFF 		bl	ulPortSetInterruptMask
 3191              	.LVL295:
 3192              	.L313:
 3193 0016 FEE7     		b	.L313
 3194              	.LVL296:
 3195              	.L312:
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3196              		.loc 1 3497 0 is_stmt 1
 3197 0018 836C     		ldr	r3, [r0, #72]
 3198 001a 13B9     		cbnz	r3, .L314
 3199              		.loc 1 3497 0 is_stmt 0 discriminator 1
 3200 001c FFF7FEFF 		bl	ulPortSetInterruptMask
 3201              	.LVL297:
 3202              	.L315:
 3203 0020 FEE7     		b	.L315
 3204              	.LVL298:
 3205              	.L314:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3206              		.loc 1 3502 0 is_stmt 1
 3207 0022 C16A     		ldr	r1, [r0, #44]
 3208 0024 426C     		ldr	r2, [r0, #68]
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3209              		.loc 1 3498 0
 3210 0026 013B     		subs	r3, r3, #1
 3211              		.loc 1 3502 0
 3212 0028 9142     		cmp	r1, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3213              		.loc 1 3498 0
 3214 002a 8364     		str	r3, [r0, #72]
 3215              		.loc 1 3502 0
 3216 002c EBD0     		beq	.L316
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 3217              		.loc 1 3505 0
 3218 002e 002B     		cmp	r3, #0
 3219 0030 E9D1     		bne	.L316
ARM GAS  /tmp/ccy76Mh1.s 			page 129


3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3220              		.loc 1 3512 0
 3221 0032 051D     		adds	r5, r0, #4
 3222 0034 2846     		mov	r0, r5
 3223              	.LVL299:
 3224 0036 FFF7FEFF 		bl	uxListRemove
 3225              	.LVL300:
 3226 003a 114E     		ldr	r6, .L318+4
 3227 003c 114A     		ldr	r2, .L318+8
 3228 003e 50B9     		cbnz	r0, .L317
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3229              		.loc 1 3514 0
 3230 0040 1421     		movs	r1, #20
 3231 0042 E76A     		ldr	r7, [r4, #44]
 3232 0044 7943     		muls	r1, r7, r1
 3233 0046 7358     		ldr	r3, [r6, r1]
 3234 0048 2BB9     		cbnz	r3, .L317
 3235              		.loc 1 3514 0 is_stmt 0 discriminator 1
 3236 004a 0120     		movs	r0, #1
 3237 004c 1368     		ldr	r3, [r2]
 3238 004e B840     		lsls	r0, r0, r7
 3239 0050 23EA0003 		bic	r3, r3, r0
 3240 0054 1360     		str	r3, [r2]
 3241              	.L317:
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 3242              		.loc 1 3524 0 is_stmt 1
 3243 0056 636C     		ldr	r3, [r4, #68]
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 3244              		.loc 1 3529 0
 3245 0058 C3F10701 		rsb	r1, r3, #7
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3246              		.loc 1 3524 0
 3247 005c E362     		str	r3, [r4, #44]
 3248              		.loc 1 3529 0
 3249 005e A161     		str	r1, [r4, #24]
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3250              		.loc 1 3530 0
ARM GAS  /tmp/ccy76Mh1.s 			page 130


 3251 0060 0124     		movs	r4, #1
 3252              	.LVL301:
 3253 0062 1168     		ldr	r1, [r2]
 3254 0064 04FA03F0 		lsl	r0, r4, r3
 3255 0068 0843     		orrs	r0, r0, r1
 3256 006a 1060     		str	r0, [r2]
 3257 006c 1420     		movs	r0, #20
 3258 006e 2946     		mov	r1, r5
 3259 0070 00FB0360 		mla	r0, r0, r3, r6
 3260 0074 FFF7FEFF 		bl	vListInsertEnd
 3261              	.LVL302:
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 3262              		.loc 1 3540 0
 3263 0078 2046     		mov	r0, r4
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3264              		.loc 1 3558 0
 3265 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3266              	.LVL303:
 3267              	.L319:
 3268              		.align	2
 3269              	.L318:
 3270 007c 00000000 		.word	.LANCHOR4
 3271 0080 00000000 		.word	.LANCHOR8
 3272 0084 00000000 		.word	.LANCHOR14
 3273              		.cfi_endproc
 3274              	.LFE38:
 3276              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3277              		.align	1
 3278              		.global	uxTaskResetEventItemValue
 3279              		.syntax unified
 3280              		.thumb
ARM GAS  /tmp/ccy76Mh1.s 			page 131


 3281              		.thumb_func
 3282              		.fpu softvfp
 3284              	uxTaskResetEventItemValue:
 3285              	.LFB39:
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccy76Mh1.s 			page 132


3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
ARM GAS  /tmp/ccy76Mh1.s 			page 133


3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task. */
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
ARM GAS  /tmp/ccy76Mh1.s 			page 134


3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 135


3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task. */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
ARM GAS  /tmp/ccy76Mh1.s 			page 136


3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3286              		.loc 1 3869 0
 3287              		.cfi_startproc
 3288              		@ args = 0, pretend = 0, frame = 0
 3289              		@ frame_needed = 0, uses_anonymous_args = 0
 3290              		@ link register save eliminated.
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 3291              		.loc 1 3872 0
 3292 0000 044B     		ldr	r3, .L321
 3293 0002 1A68     		ldr	r2, [r3]
 3294 0004 9069     		ldr	r0, [r2, #24]
 3295              	.LVL304:
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 3296              		.loc 1 3876 0
 3297 0006 1A68     		ldr	r2, [r3]
 3298 0008 1B68     		ldr	r3, [r3]
 3299 000a DB6A     		ldr	r3, [r3, #44]
 3300 000c C3F10703 		rsb	r3, r3, #7
 3301 0010 9361     		str	r3, [r2, #24]
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3302              		.loc 1 3879 0
ARM GAS  /tmp/ccy76Mh1.s 			page 137


 3303 0012 7047     		bx	lr
 3304              	.L322:
 3305              		.align	2
 3306              	.L321:
 3307 0014 00000000 		.word	.LANCHOR4
 3308              		.cfi_endproc
 3309              	.LFE39:
 3311              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3312              		.align	1
 3313              		.global	pvTaskIncrementMutexHeldCount
 3314              		.syntax unified
 3315              		.thumb
 3316              		.thumb_func
 3317              		.fpu softvfp
 3319              	pvTaskIncrementMutexHeldCount:
 3320              	.LFB40:
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3321              		.loc 1 3885 0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 0
 3324              		@ frame_needed = 0, uses_anonymous_args = 0
 3325              		@ link register save eliminated.
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 3326              		.loc 1 3888 0
 3327 0000 044B     		ldr	r3, .L328
 3328 0002 1A68     		ldr	r2, [r3]
 3329 0004 1AB1     		cbz	r2, .L324
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 3330              		.loc 1 3890 0
 3331 0006 1968     		ldr	r1, [r3]
 3332 0008 8A6C     		ldr	r2, [r1, #72]
 3333 000a 0132     		adds	r2, r2, #1
 3334 000c 8A64     		str	r2, [r1, #72]
 3335              	.L324:
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 3336              		.loc 1 3893 0
 3337 000e 1868     		ldr	r0, [r3]
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3338              		.loc 1 3894 0
 3339 0010 7047     		bx	lr
 3340              	.L329:
 3341 0012 00BF     		.align	2
 3342              	.L328:
 3343 0014 00000000 		.word	.LANCHOR4
 3344              		.cfi_endproc
 3345              	.LFE40:
 3347              		.section	.text.ulTaskNotifyTake,"ax",%progbits
ARM GAS  /tmp/ccy76Mh1.s 			page 138


 3348              		.align	1
 3349              		.global	ulTaskNotifyTake
 3350              		.syntax unified
 3351              		.thumb
 3352              		.thumb_func
 3353              		.fpu softvfp
 3355              	ulTaskNotifyTake:
 3356              	.LFB41:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3357              		.loc 1 3902 0
 3358              		.cfi_startproc
 3359              		@ args = 0, pretend = 0, frame = 0
 3360              		@ frame_needed = 0, uses_anonymous_args = 0
 3361              	.LVL305:
 3362 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3363              	.LCFI58:
 3364              		.cfi_def_cfa_offset 24
 3365              		.cfi_offset 3, -24
 3366              		.cfi_offset 4, -20
 3367              		.cfi_offset 5, -16
 3368              		.cfi_offset 6, -12
 3369              		.cfi_offset 7, -8
 3370              		.cfi_offset 14, -4
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 3371              		.loc 1 3909 0
 3372 0002 204C     		ldr	r4, .L345
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 3373              		.loc 1 3902 0
 3374 0004 0746     		mov	r7, r0
 3375 0006 0E46     		mov	r6, r1
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3376              		.loc 1 3906 0
 3377 0008 FFF7FEFF 		bl	vPortEnterCritical
 3378              	.LVL306:
 3379              		.loc 1 3909 0
 3380 000c 2368     		ldr	r3, [r4]
 3381 000e DB6C     		ldr	r3, [r3, #76]
 3382 0010 D3B9     		cbnz	r3, .L332
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 3383              		.loc 1 3912 0
 3384 0012 0125     		movs	r5, #1
 3385 0014 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccy76Mh1.s 			page 139


 3386 0016 83F85050 		strb	r5, [r3, #80]
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 3387              		.loc 1 3914 0
 3388 001a AEB1     		cbz	r6, .L332
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is going to block.  First it must be removed
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from the ready list. */
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3389              		.loc 1 3918 0
 3390 001c 2068     		ldr	r0, [r4]
 3391 001e 0430     		adds	r0, r0, #4
 3392 0020 FFF7FEFF 		bl	uxListRemove
 3393              	.LVL307:
 3394 0024 38B9     		cbnz	r0, .L334
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The current task must be in a ready list, so there is
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						no need to check, and the port reset macro can be called
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						directly. */
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3395              		.loc 1 3923 0
 3396 0026 2168     		ldr	r1, [r4]
 3397 0028 174A     		ldr	r2, .L345+4
 3398 002a C96A     		ldr	r1, [r1, #44]
 3399 002c 1368     		ldr	r3, [r2]
 3400 002e 8D40     		lsls	r5, r5, r1
 3401 0030 23EA0505 		bic	r5, r3, r5
 3402 0034 1560     		str	r5, [r2]
 3403              	.L334:
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 3404              		.loc 1 3932 0
 3405 0036 731C     		adds	r3, r6, #1
 3406 0038 19D1     		bne	.L335
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Add the task to the suspended task list instead
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							of a delayed task list to ensure the task is not
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							woken by a timing event.  It will block
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							indefinitely. */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3407              		.loc 1 3938 0
 3408 003a 2168     		ldr	r1, [r4]
 3409 003c 1348     		ldr	r0, .L345+8
 3410 003e 0431     		adds	r1, r1, #4
 3411 0040 FFF7FEFF 		bl	vListInsertEnd
 3412              	.LVL308:
 3413              	.L336:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccy76Mh1.s 			page 140


3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							woken if no notification events occur.  This may
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							handle it. */
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							woken if the event does not occur.  This may
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							handle it. */
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 3414              		.loc 1 3967 0
 3415 0044 FFF7FEFF 		bl	vPortYield
 3416              	.LVL309:
 3417              	.L332:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3418              		.loc 1 3979 0
 3419 0048 FFF7FEFF 		bl	vPortExitCritical
 3420              	.LVL310:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 3421              		.loc 1 3981 0
 3422 004c FFF7FEFF 		bl	vPortEnterCritical
 3423              	.LVL311:
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 3424              		.loc 1 3984 0
 3425 0050 2368     		ldr	r3, [r4]
 3426 0052 DD6C     		ldr	r5, [r3, #76]
 3427              	.LVL312:
ARM GAS  /tmp/ccy76Mh1.s 			page 141


3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 3428              		.loc 1 3986 0
 3429 0054 1DB1     		cbz	r5, .L337
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 3430              		.loc 1 3988 0
 3431 0056 87B1     		cbz	r7, .L338
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 3432              		.loc 1 3990 0
 3433 0058 0022     		movs	r2, #0
 3434 005a 2368     		ldr	r3, [r4]
 3435 005c DA64     		str	r2, [r3, #76]
 3436              	.L337:
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 3437              		.loc 1 4002 0
 3438 005e 0022     		movs	r2, #0
 3439 0060 2368     		ldr	r3, [r4]
 3440 0062 83F85020 		strb	r2, [r3, #80]
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3441              		.loc 1 4004 0
 3442 0066 FFF7FEFF 		bl	vPortExitCritical
 3443              	.LVL313:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3444              		.loc 1 4007 0
 3445 006a 2846     		mov	r0, r5
 3446 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3447              	.LVL314:
 3448              	.L335:
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 3449              		.loc 1 3946 0
 3450 006e 084B     		ldr	r3, .L345+12
 3451 0070 1868     		ldr	r0, [r3]
 3452              	.LVL315:
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 3453              		.loc 1 3947 0
 3454 0072 3044     		add	r0, r0, r6
 3455              	.LVL316:
 3456 0074 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3457              	.LVL317:
 3458 0078 E4E7     		b	.L336
 3459              	.LVL318:
ARM GAS  /tmp/ccy76Mh1.s 			page 142


 3460              	.L338:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3461              		.loc 1 3994 0
 3462 007a 2268     		ldr	r2, [r4]
 3463 007c D36C     		ldr	r3, [r2, #76]
 3464 007e 013B     		subs	r3, r3, #1
 3465 0080 D364     		str	r3, [r2, #76]
 3466 0082 ECE7     		b	.L337
 3467              	.L346:
 3468              		.align	2
 3469              	.L345:
 3470 0084 00000000 		.word	.LANCHOR4
 3471 0088 00000000 		.word	.LANCHOR14
 3472 008c 00000000 		.word	.LANCHOR2
 3473 0090 00000000 		.word	.LANCHOR5
 3474              		.cfi_endproc
 3475              	.LFE41:
 3477              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3478              		.align	1
 3479              		.global	xTaskNotifyWait
 3480              		.syntax unified
 3481              		.thumb
 3482              		.thumb_func
 3483              		.fpu softvfp
 3485              	xTaskNotifyWait:
 3486              	.LFB42:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3487              		.loc 1 4015 0
 3488              		.cfi_startproc
 3489              		@ args = 0, pretend = 0, frame = 0
 3490              		@ frame_needed = 0, uses_anonymous_args = 0
 3491              	.LVL319:
 3492 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3493              	.LCFI59:
 3494              		.cfi_def_cfa_offset 24
 3495              		.cfi_offset 4, -24
 3496              		.cfi_offset 5, -20
 3497              		.cfi_offset 6, -16
 3498              		.cfi_offset 7, -12
 3499              		.cfi_offset 8, -8
 3500              		.cfi_offset 14, -4
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 3501              		.loc 1 4022 0
 3502 0004 284C     		ldr	r4, .L363
ARM GAS  /tmp/ccy76Mh1.s 			page 143


4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 3503              		.loc 1 4015 0
 3504 0006 1E46     		mov	r6, r3
 3505 0008 0546     		mov	r5, r0
 3506 000a 0F46     		mov	r7, r1
 3507 000c 9046     		mov	r8, r2
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3508              		.loc 1 4019 0
 3509 000e FFF7FEFF 		bl	vPortEnterCritical
 3510              	.LVL320:
 3511              		.loc 1 4022 0
 3512 0012 2368     		ldr	r3, [r4]
 3513 0014 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3514 0018 022B     		cmp	r3, #2
 3515 001a 1FD0     		beq	.L349
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 3516              		.loc 1 4027 0
 3517 001c 2268     		ldr	r2, [r4]
 3518 001e D36C     		ldr	r3, [r2, #76]
 3519 0020 23EA0503 		bic	r3, r3, r5
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 3520              		.loc 1 4030 0
 3521 0024 0125     		movs	r5, #1
 3522              	.LVL321:
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3523              		.loc 1 4027 0
 3524 0026 D364     		str	r3, [r2, #76]
 3525              		.loc 1 4030 0
 3526 0028 2368     		ldr	r3, [r4]
 3527 002a 83F85050 		strb	r5, [r3, #80]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 3528              		.loc 1 4032 0
 3529 002e AEB1     		cbz	r6, .L349
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is going to block.  First it must be removed
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from the	ready list. */
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3530              		.loc 1 4036 0
 3531 0030 2068     		ldr	r0, [r4]
 3532 0032 0430     		adds	r0, r0, #4
 3533 0034 FFF7FEFF 		bl	uxListRemove
 3534              	.LVL322:
 3535 0038 38B9     		cbnz	r0, .L351
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The current task must be in a ready list, so there is
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						no need to check, and the port reset macro can be called
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						directly. */
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3536              		.loc 1 4041 0
 3537 003a 2168     		ldr	r1, [r4]
ARM GAS  /tmp/ccy76Mh1.s 			page 144


 3538 003c 1B4A     		ldr	r2, .L363+4
 3539 003e C96A     		ldr	r1, [r1, #44]
 3540 0040 1368     		ldr	r3, [r2]
 3541 0042 8D40     		lsls	r5, r5, r1
 3542 0044 23EA0505 		bic	r5, r3, r5
 3543 0048 1560     		str	r5, [r2]
 3544              	.L351:
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 3545              		.loc 1 4050 0
 3546 004a 731C     		adds	r3, r6, #1
 3547 004c 26D1     		bne	.L352
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Add the task to the suspended task list instead
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							of a delayed task list to ensure the task is not
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							woken by a timing event.  It will block
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							indefinitely. */
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3548              		.loc 1 4056 0
 3549 004e 2168     		ldr	r1, [r4]
 3550 0050 1748     		ldr	r0, .L363+8
 3551 0052 0431     		adds	r1, r1, #4
 3552 0054 FFF7FEFF 		bl	vListInsertEnd
 3553              	.LVL323:
 3554              	.L353:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							woken if no notification events occur.  This may
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							handle it. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* Calculate the time at which the task should be
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							woken if the event does not occur.  This may
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							handle it. */
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
ARM GAS  /tmp/ccy76Mh1.s 			page 145


4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 3555              		.loc 1 4085 0
 3556 0058 FFF7FEFF 		bl	vPortYield
 3557              	.LVL324:
 3558              	.L349:
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3559              		.loc 1 4097 0
 3560 005c FFF7FEFF 		bl	vPortExitCritical
 3561              	.LVL325:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 3562              		.loc 1 4099 0
 3563 0060 FFF7FEFF 		bl	vPortEnterCritical
 3564              	.LVL326:
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 3565              		.loc 1 4103 0
 3566 0064 B8F1000F 		cmp	r8, #0
 3567 0068 03D0     		beq	.L354
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 3568              		.loc 1 4107 0
 3569 006a 2368     		ldr	r3, [r4]
 3570 006c DB6C     		ldr	r3, [r3, #76]
 3571 006e C8F80030 		str	r3, [r8]
 3572              	.L354:
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 3573              		.loc 1 4114 0
 3574 0072 2368     		ldr	r3, [r4]
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccy76Mh1.s 			page 146


4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 3575              		.loc 1 4127 0
 3576 0074 0022     		movs	r2, #0
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3577              		.loc 1 4114 0
 3578 0076 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3579 007a 012B     		cmp	r3, #1
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3580              		.loc 1 4124 0
 3581 007c 17BF     		itett	ne
 3582 007e 0125     		movne	r5, #1
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3583              		.loc 1 4117 0
 3584 0080 0025     		moveq	r5, #0
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3585              		.loc 1 4123 0
 3586 0082 2368     		ldrne	r3, [r4]
 3587 0084 D96C     		ldrne	r1, [r3, #76]
 3588 0086 1CBF     		itt	ne
 3589 0088 B943     		bicne	r1, r1, r7
 3590 008a D964     		strne	r1, [r3, #76]
 3591              	.LVL327:
 3592              		.loc 1 4127 0
 3593 008c 2368     		ldr	r3, [r4]
 3594 008e 83F85020 		strb	r2, [r3, #80]
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3595              		.loc 1 4129 0
 3596 0092 FFF7FEFF 		bl	vPortExitCritical
 3597              	.LVL328:
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3598              		.loc 1 4132 0
 3599 0096 2846     		mov	r0, r5
 3600 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3601              	.LVL329:
 3602              	.L352:
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 3603              		.loc 1 4064 0
 3604 009c 054B     		ldr	r3, .L363+12
 3605 009e 1868     		ldr	r0, [r3]
 3606              	.LVL330:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 3607              		.loc 1 4065 0
 3608 00a0 3044     		add	r0, r0, r6
 3609              	.LVL331:
 3610 00a2 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3611              	.LVL332:
ARM GAS  /tmp/ccy76Mh1.s 			page 147


 3612 00a6 D7E7     		b	.L353
 3613              	.L364:
 3614              		.align	2
 3615              	.L363:
 3616 00a8 00000000 		.word	.LANCHOR4
 3617 00ac 00000000 		.word	.LANCHOR14
 3618 00b0 00000000 		.word	.LANCHOR2
 3619 00b4 00000000 		.word	.LANCHOR5
 3620              		.cfi_endproc
 3621              	.LFE42:
 3623              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3624              		.align	1
 3625              		.global	xTaskGenericNotify
 3626              		.syntax unified
 3627              		.thumb
 3628              		.thumb_func
 3629              		.fpu softvfp
 3631              	xTaskGenericNotify:
 3632              	.LFB43:
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3633              		.loc 1 4140 0
 3634              		.cfi_startproc
 3635              		@ args = 0, pretend = 0, frame = 0
 3636              		@ frame_needed = 0, uses_anonymous_args = 0
 3637              	.LVL333:
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              	.LCFI60:
 3640              		.cfi_def_cfa_offset 24
 3641              		.cfi_offset 3, -24
 3642              		.cfi_offset 4, -20
 3643              		.cfi_offset 5, -16
 3644              		.cfi_offset 6, -12
 3645              		.cfi_offset 7, -8
 3646              		.cfi_offset 14, -4
 3647              		.loc 1 4140 0
 3648 0002 0F46     		mov	r7, r1
 3649 0004 1646     		mov	r6, r2
 3650 0006 1D46     		mov	r5, r3
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 3651              		.loc 1 4145 0
 3652 0008 0446     		mov	r4, r0
 3653 000a 10B9     		cbnz	r0, .L366
 3654              		.loc 1 4145 0 is_stmt 0 discriminator 1
 3655 000c FFF7FEFF 		bl	ulPortSetInterruptMask
 3656              	.LVL334:
 3657              	.L367:
ARM GAS  /tmp/ccy76Mh1.s 			page 148


 3658 0010 FEE7     		b	.L367
 3659              	.LVL335:
 3660              	.L366:
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 3661              		.loc 1 4148 0 is_stmt 1
 3662 0012 FFF7FEFF 		bl	vPortEnterCritical
 3663              	.LVL336:
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 3664              		.loc 1 4150 0
 3665 0016 0DB1     		cbz	r5, .L368
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 3666              		.loc 1 4152 0
 3667 0018 E36C     		ldr	r3, [r4, #76]
 3668 001a 2B60     		str	r3, [r5]
 3669              	.L368:
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3670              		.loc 1 4157 0
 3671 001c 0223     		movs	r3, #2
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3672              		.loc 1 4155 0
 3673 001e 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2
 3674              	.LVL337:
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 3675              		.loc 1 4159 0
 3676 0022 721E     		subs	r2, r6, #1
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3677              		.loc 1 4155 0
 3678 0024 EDB2     		uxtb	r5, r5
 3679              	.LVL338:
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3680              		.loc 1 4157 0
 3681 0026 84F85030 		strb	r3, [r4, #80]
 3682              		.loc 1 4159 0
 3683 002a 032A     		cmp	r2, #3
 3684 002c 0AD8     		bhi	.L369
 3685 002e DFE802F0 		tbb	[pc, r2]
 3686              	.L371:
 3687 0032 02       		.byte	(.L370-.L371)/2
 3688 0033 06       		.byte	(.L372-.L371)/2
 3689 0034 04       		.byte	(.L384-.L371)/2
 3690 0035 10       		.byte	(.L374-.L371)/2
 3691              		.p2align 1
 3692              	.L370:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 3693              		.loc 1 4162 0
 3694 0036 E16C     		ldr	r1, [r4, #76]
ARM GAS  /tmp/ccy76Mh1.s 			page 149


 3695 0038 0F43     		orrs	r7, r7, r1
 3696              	.LVL339:
 3697              	.L384:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eOriginalNotifyState != eNotified )
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 3698              		.loc 1 4176 0
 3699 003a E764     		str	r7, [r4, #76]
 3700 003c 02E0     		b	.L369
 3701              	.LVL340:
 3702              	.L372:
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3703              		.loc 1 4166 0
 3704 003e E36C     		ldr	r3, [r4, #76]
 3705 0040 0133     		adds	r3, r3, #1
 3706 0042 E364     		str	r3, [r4, #76]
 3707              	.LVL341:
 3708              	.L369:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3709              		.loc 1 4195 0
 3710 0044 012D     		cmp	r5, #1
 3711 0046 08D0     		beq	.L376
 3712              	.L379:
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3713              		.loc 1 4140 0
 3714 0048 0125     		movs	r5, #1
 3715              	.LVL342:
 3716              	.L375:
ARM GAS  /tmp/ccy76Mh1.s 			page 150


4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 3717              		.loc 1 4235 0
 3718 004a FFF7FEFF 		bl	vPortExitCritical
 3719              	.LVL343:
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3720              		.loc 1 4238 0
 3721 004e 2846     		mov	r0, r5
 3722 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3723              	.LVL344:
 3724              	.L374:
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3725              		.loc 1 4174 0
 3726 0052 022D     		cmp	r5, #2
 3727 0054 F1D1     		bne	.L384
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3728              		.loc 1 4181 0
ARM GAS  /tmp/ccy76Mh1.s 			page 151


 3729 0056 0025     		movs	r5, #0
 3730              	.LVL345:
 3731 0058 F7E7     		b	.L375
 3732              	.LVL346:
 3733              	.L376:
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3734              		.loc 1 4197 0
 3735 005a 261D     		adds	r6, r4, #4
 3736 005c 3046     		mov	r0, r6
 3737 005e FFF7FEFF 		bl	uxListRemove
 3738              	.LVL347:
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3739              		.loc 1 4198 0
 3740 0062 0E49     		ldr	r1, .L385
 3741 0064 E26A     		ldr	r2, [r4, #44]
 3742 0066 0868     		ldr	r0, [r1]
 3743 0068 05FA02F3 		lsl	r3, r5, r2
 3744 006c 0343     		orrs	r3, r3, r0
 3745 006e 1420     		movs	r0, #20
 3746 0070 0B60     		str	r3, [r1]
 3747 0072 0B4B     		ldr	r3, .L385+4
 3748 0074 3146     		mov	r1, r6
 3749 0076 00FB0230 		mla	r0, r0, r2, r3
 3750 007a FFF7FEFF 		bl	vListInsertEnd
 3751              	.LVL348:
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3752              		.loc 1 4201 0
 3753 007e A36A     		ldr	r3, [r4, #40]
 3754 0080 13B1     		cbz	r3, .L377
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3755              		.loc 1 4201 0 is_stmt 0 discriminator 1
 3756 0082 FFF7FEFF 		bl	ulPortSetInterruptMask
 3757              	.LVL349:
 3758              	.L378:
 3759 0086 FEE7     		b	.L378
 3760              	.L377:
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3761              		.loc 1 4219 0 is_stmt 1
 3762 0088 064B     		ldr	r3, .L385+8
 3763 008a E26A     		ldr	r2, [r4, #44]
 3764 008c 1B68     		ldr	r3, [r3]
 3765 008e DB6A     		ldr	r3, [r3, #44]
 3766 0090 9A42     		cmp	r2, r3
 3767 0092 D9D9     		bls	.L379
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3768              		.loc 1 4223 0
 3769 0094 FFF7FEFF 		bl	vPortYield
 3770              	.LVL350:
 3771 0098 D7E7     		b	.L375
 3772              	.L386:
 3773 009a 00BF     		.align	2
 3774              	.L385:
 3775 009c 00000000 		.word	.LANCHOR14
 3776 00a0 00000000 		.word	.LANCHOR8
 3777 00a4 00000000 		.word	.LANCHOR4
 3778              		.cfi_endproc
 3779              	.LFE43:
ARM GAS  /tmp/ccy76Mh1.s 			page 152


 3781              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3782              		.align	1
 3783              		.global	xTaskGenericNotifyFromISR
 3784              		.syntax unified
 3785              		.thumb
 3786              		.thumb_func
 3787              		.fpu softvfp
 3789              	xTaskGenericNotifyFromISR:
 3790              	.LFB44:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3791              		.loc 1 4246 0
 3792              		.cfi_startproc
 3793              		@ args = 4, pretend = 0, frame = 0
 3794              		@ frame_needed = 0, uses_anonymous_args = 0
 3795              	.LVL351:
 3796 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3797              	.LCFI61:
 3798              		.cfi_def_cfa_offset 32
 3799              		.cfi_offset 3, -32
 3800              		.cfi_offset 4, -28
 3801              		.cfi_offset 5, -24
 3802              		.cfi_offset 6, -20
 3803              		.cfi_offset 7, -16
 3804              		.cfi_offset 8, -12
 3805              		.cfi_offset 9, -8
 3806              		.cfi_offset 14, -4
 3807              		.loc 1 4246 0
 3808 0004 089F     		ldr	r7, [sp, #32]
 3809 0006 8946     		mov	r9, r1
 3810 0008 9046     		mov	r8, r2
 3811 000a 1D46     		mov	r5, r3
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 3812              		.loc 1 4252 0
 3813 000c 0446     		mov	r4, r0
 3814 000e 10B9     		cbnz	r0, .L388
 3815              		.loc 1 4252 0 is_stmt 0 discriminator 1
 3816 0010 FFF7FEFF 		bl	ulPortSetInterruptMask
 3817              	.LVL352:
 3818              	.L389:
 3819 0014 FEE7     		b	.L389
 3820              	.LVL353:
 3821              	.L388:
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  /tmp/ccy76Mh1.s 			page 153


4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3822              		.loc 1 4270 0 is_stmt 1
 3823 0016 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3824              	.LVL354:
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 3825              		.loc 1 4274 0
 3826 001a FFF7FEFF 		bl	ulPortSetInterruptMask
 3827              	.LVL355:
 3828 001e 0646     		mov	r6, r0
 3829              	.LVL356:
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 3830              		.loc 1 4276 0
 3831 0020 0DB1     		cbz	r5, .L390
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 3832              		.loc 1 4278 0
 3833 0022 E36C     		ldr	r3, [r4, #76]
 3834 0024 2B60     		str	r3, [r5]
 3835              	.L390:
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3836              		.loc 1 4282 0
 3837 0026 0223     		movs	r3, #2
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3838              		.loc 1 4281 0
 3839 0028 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2
 3840              	.LVL357:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 3841              		.loc 1 4284 0
 3842 002c 08F1FF32 		add	r2, r8, #-1
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 3843              		.loc 1 4281 0
 3844 0030 EDB2     		uxtb	r5, r5
 3845              	.LVL358:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3846              		.loc 1 4282 0
ARM GAS  /tmp/ccy76Mh1.s 			page 154


 3847 0032 84F85030 		strb	r3, [r4, #80]
 3848              		.loc 1 4284 0
 3849 0036 032A     		cmp	r2, #3
 3850 0038 07D8     		bhi	.L391
 3851 003a DFE802F0 		tbb	[pc, r2]
 3852              	.L393:
 3853 003e 02       		.byte	(.L392-.L393)/2
 3854 003f 0F       		.byte	(.L394-.L393)/2
 3855 0040 15       		.byte	(.L411-.L393)/2
 3856 0041 13       		.byte	(.L396-.L393)/2
 3857              		.p2align 1
 3858              	.L392:
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 3859              		.loc 1 4287 0
 3860 0042 E16C     		ldr	r1, [r4, #76]
 3861 0044 41EA0901 		orr	r1, r1, r9
 3862 0048 E164     		str	r1, [r4, #76]
 3863              	.L391:
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eOriginalNotifyState != eNotified )
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 3864              		.loc 1 4320 0
 3865 004a 012D     		cmp	r5, #1
 3866 004c 0FD0     		beq	.L398
 3867              	.LVL359:
ARM GAS  /tmp/ccy76Mh1.s 			page 155


 3868              	.L403:
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3869              		.loc 1 4246 0
 3870 004e 0124     		movs	r4, #1
 3871              	.LVL360:
 3872              	.L397:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 3873              		.loc 1 4352 0
 3874 0050 3046     		mov	r0, r6
 3875 0052 FFF7FEFF 		bl	vPortClearInterruptMask
 3876              	.LVL361:
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3877              		.loc 1 4355 0
 3878 0056 2046     		mov	r0, r4
 3879 0058 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3880              	.LVL362:
 3881              	.L394:
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3882              		.loc 1 4291 0
 3883 005c E36C     		ldr	r3, [r4, #76]
 3884 005e 0133     		adds	r3, r3, #1
 3885 0060 E364     		str	r3, [r4, #76]
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3886              		.loc 1 4292 0
ARM GAS  /tmp/ccy76Mh1.s 			page 156


 3887 0062 F2E7     		b	.L391
 3888              	.L396:
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3889              		.loc 1 4299 0
 3890 0064 022D     		cmp	r5, #2
 3891 0066 2BD0     		beq	.L404
 3892              	.L411:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3893              		.loc 1 4301 0
 3894 0068 C4F84C90 		str	r9, [r4, #76]
 3895 006c EDE7     		b	.L391
 3896              	.L398:
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3897              		.loc 1 4323 0
 3898 006e A36A     		ldr	r3, [r4, #40]
 3899 0070 13B1     		cbz	r3, .L399
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3900              		.loc 1 4323 0 is_stmt 0 discriminator 1
 3901 0072 FFF7FEFF 		bl	ulPortSetInterruptMask
 3902              	.LVL363:
 3903              	.L400:
 3904 0076 FEE7     		b	.L400
 3905              	.LVL364:
 3906              	.L399:
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3907              		.loc 1 4325 0 is_stmt 1
 3908 0078 124B     		ldr	r3, .L413
 3909 007a 1B68     		ldr	r3, [r3]
 3910 007c E3B9     		cbnz	r3, .L401
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3911              		.loc 1 4327 0
 3912 007e 04F10408 		add	r8, r4, #4
 3913 0082 4046     		mov	r0, r8
 3914              	.LVL365:
 3915 0084 FFF7FEFF 		bl	uxListRemove
 3916              	.LVL366:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3917              		.loc 1 4328 0
 3918 0088 0F4A     		ldr	r2, .L413+4
 3919 008a 1420     		movs	r0, #20
 3920 008c E36A     		ldr	r3, [r4, #44]
 3921 008e 1168     		ldr	r1, [r2]
 3922 0090 9D40     		lsls	r5, r5, r3
 3923              	.LVL367:
 3924 0092 0D43     		orrs	r5, r5, r1
 3925 0094 4146     		mov	r1, r8
 3926 0096 1560     		str	r5, [r2]
 3927 0098 0C4A     		ldr	r2, .L413+8
 3928 009a 00FB0320 		mla	r0, r0, r3, r2
 3929              	.L412:
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3930              		.loc 1 4334 0
 3931 009e FFF7FEFF 		bl	vListInsertEnd
 3932              	.LVL368:
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3933              		.loc 1 4337 0
 3934 00a2 0B4B     		ldr	r3, .L413+12
ARM GAS  /tmp/ccy76Mh1.s 			page 157


 3935 00a4 E26A     		ldr	r2, [r4, #44]
 3936 00a6 1B68     		ldr	r3, [r3]
 3937 00a8 DB6A     		ldr	r3, [r3, #44]
 3938 00aa 9A42     		cmp	r2, r3
 3939 00ac CFD9     		bls	.L403
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3940              		.loc 1 4341 0
 3941 00ae 002F     		cmp	r7, #0
 3942 00b0 CDD0     		beq	.L403
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3943              		.loc 1 4343 0
 3944 00b2 0124     		movs	r4, #1
 3945              	.LVL369:
 3946 00b4 3C60     		str	r4, [r7]
 3947 00b6 CBE7     		b	.L397
 3948              	.LVL370:
 3949              	.L401:
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3950              		.loc 1 4334 0
 3951 00b8 04F11801 		add	r1, r4, #24
 3952 00bc 0548     		ldr	r0, .L413+16
 3953              	.LVL371:
 3954 00be EEE7     		b	.L412
 3955              	.LVL372:
 3956              	.L404:
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3957              		.loc 1 4306 0
 3958 00c0 0024     		movs	r4, #0
 3959              	.LVL373:
 3960 00c2 C5E7     		b	.L397
 3961              	.L414:
 3962              		.align	2
 3963              	.L413:
 3964 00c4 00000000 		.word	.LANCHOR16
 3965 00c8 00000000 		.word	.LANCHOR14
 3966 00cc 00000000 		.word	.LANCHOR8
 3967 00d0 00000000 		.word	.LANCHOR4
 3968 00d4 00000000 		.word	.LANCHOR3
 3969              		.cfi_endproc
 3970              	.LFE44:
 3972              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 3973              		.align	1
 3974              		.global	vTaskNotifyGiveFromISR
 3975              		.syntax unified
 3976              		.thumb
 3977              		.thumb_func
 3978              		.fpu softvfp
 3980              	vTaskNotifyGiveFromISR:
 3981              	.LFB45:
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccy76Mh1.s 			page 158


 3982              		.loc 1 4363 0
 3983              		.cfi_startproc
 3984              		@ args = 0, pretend = 0, frame = 0
 3985              		@ frame_needed = 0, uses_anonymous_args = 0
 3986              	.LVL374:
 3987 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3988              	.LCFI62:
 3989              		.cfi_def_cfa_offset 24
 3990              		.cfi_offset 4, -24
 3991              		.cfi_offset 5, -20
 3992              		.cfi_offset 6, -16
 3993              		.cfi_offset 7, -12
 3994              		.cfi_offset 8, -8
 3995              		.cfi_offset 14, -4
 3996              		.loc 1 4363 0
 3997 0004 0E46     		mov	r6, r1
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 3998              		.loc 1 4368 0
 3999 0006 0446     		mov	r4, r0
 4000 0008 10B9     		cbnz	r0, .L416
 4001              		.loc 1 4368 0 is_stmt 0 discriminator 1
 4002 000a FFF7FEFF 		bl	ulPortSetInterruptMask
 4003              	.LVL375:
 4004              	.L417:
 4005 000e FEE7     		b	.L417
 4006              	.LVL376:
 4007              	.L416:
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 4008              		.loc 1 4386 0 is_stmt 1
 4009 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4010              	.LVL377:
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4011              		.loc 1 4390 0
ARM GAS  /tmp/ccy76Mh1.s 			page 159


 4012 0014 FFF7FEFF 		bl	ulPortSetInterruptMask
 4013              	.LVL378:
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 4014              		.loc 1 4393 0
 4015 0018 0223     		movs	r3, #2
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 4016              		.loc 1 4392 0
 4017 001a 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2
 4018              		.loc 1 4393 0
 4019 001e 84F85030 		strb	r3, [r4, #80]
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 4020              		.loc 1 4397 0
 4021 0022 E36C     		ldr	r3, [r4, #76]
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 4022              		.loc 1 4392 0
 4023 0024 EDB2     		uxtb	r5, r5
 4024              		.loc 1 4397 0
 4025 0026 0133     		adds	r3, r3, #1
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 4026              		.loc 1 4403 0
 4027 0028 012D     		cmp	r5, #1
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4028              		.loc 1 4390 0
 4029 002a 0746     		mov	r7, r0
 4030              	.LVL379:
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4031              		.loc 1 4397 0
 4032 002c E364     		str	r3, [r4, #76]
 4033              		.loc 1 4403 0
 4034 002e 22D1     		bne	.L419
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 4035              		.loc 1 4406 0
 4036 0030 A36A     		ldr	r3, [r4, #40]
 4037 0032 13B1     		cbz	r3, .L420
 4038              		.loc 1 4406 0 is_stmt 0 discriminator 1
 4039 0034 FFF7FEFF 		bl	ulPortSetInterruptMask
 4040              	.LVL380:
 4041              	.L421:
 4042 0038 FEE7     		b	.L421
 4043              	.LVL381:
 4044              	.L420:
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4045              		.loc 1 4408 0 is_stmt 1
 4046 003a 134B     		ldr	r3, .L429
ARM GAS  /tmp/ccy76Mh1.s 			page 160


 4047 003c 1B68     		ldr	r3, [r3]
 4048 003e FBB9     		cbnz	r3, .L422
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 4049              		.loc 1 4410 0
 4050 0040 04F10408 		add	r8, r4, #4
 4051 0044 4046     		mov	r0, r8
 4052              	.LVL382:
 4053 0046 FFF7FEFF 		bl	uxListRemove
 4054              	.LVL383:
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4055              		.loc 1 4411 0
 4056 004a 104A     		ldr	r2, .L429+4
 4057 004c 1420     		movs	r0, #20
 4058 004e E36A     		ldr	r3, [r4, #44]
 4059 0050 1168     		ldr	r1, [r2]
 4060 0052 9D40     		lsls	r5, r5, r3
 4061              	.LVL384:
 4062 0054 0D43     		orrs	r5, r5, r1
 4063 0056 4146     		mov	r1, r8
 4064 0058 1560     		str	r5, [r2]
 4065 005a 0D4A     		ldr	r2, .L429+8
 4066 005c 00FB0320 		mla	r0, r0, r3, r2
 4067              	.L428:
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 4068              		.loc 1 4417 0
 4069 0060 FFF7FEFF 		bl	vListInsertEnd
 4070              	.LVL385:
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4071              		.loc 1 4420 0
 4072 0064 0B4B     		ldr	r3, .L429+12
 4073 0066 E26A     		ldr	r2, [r4, #44]
 4074 0068 1B68     		ldr	r3, [r3]
 4075 006a DB6A     		ldr	r3, [r3, #44]
 4076 006c 9A42     		cmp	r2, r3
 4077 006e 02D9     		bls	.L419
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 4078              		.loc 1 4424 0
 4079 0070 0EB1     		cbz	r6, .L419
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 4080              		.loc 1 4426 0
 4081 0072 0123     		movs	r3, #1
 4082 0074 3360     		str	r3, [r6]
 4083              	.L419:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccy76Mh1.s 			page 161


4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 4084              		.loc 1 4435 0
 4085 0076 3846     		mov	r0, r7
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4086              		.loc 1 4436 0
 4087 0078 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 4088              	.LCFI63:
 4089              		.cfi_remember_state
 4090              		.cfi_restore 14
 4091              		.cfi_restore 8
 4092              		.cfi_restore 7
 4093              		.cfi_restore 6
 4094              		.cfi_restore 5
 4095              		.cfi_restore 4
 4096              		.cfi_def_cfa_offset 0
 4097              	.LVL386:
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4098              		.loc 1 4435 0
 4099 007c FFF7FEBF 		b	vPortClearInterruptMask
 4100              	.LVL387:
 4101              	.L422:
 4102              	.LCFI64:
 4103              		.cfi_restore_state
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4104              		.loc 1 4417 0
 4105 0080 04F11801 		add	r1, r4, #24
 4106 0084 0448     		ldr	r0, .L429+16
 4107              	.LVL388:
 4108 0086 EBE7     		b	.L428
 4109              	.L430:
 4110              		.align	2
 4111              	.L429:
 4112 0088 00000000 		.word	.LANCHOR16
 4113 008c 00000000 		.word	.LANCHOR14
 4114 0090 00000000 		.word	.LANCHOR8
 4115 0094 00000000 		.word	.LANCHOR4
 4116 0098 00000000 		.word	.LANCHOR3
 4117              		.cfi_endproc
 4118              	.LFE45:
 4120              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4121              		.align	1
 4122              		.global	xTaskNotifyStateClear
 4123              		.syntax unified
 4124              		.thumb
 4125              		.thumb_func
 4126              		.fpu softvfp
 4128              	xTaskNotifyStateClear:
 4129              	.LFB46:
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccy76Mh1.s 			page 162


4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4130              		.loc 1 4445 0
 4131              		.cfi_startproc
 4132              		@ args = 0, pretend = 0, frame = 0
 4133              		@ frame_needed = 0, uses_anonymous_args = 0
 4134              	.LVL389:
 4135 0000 10B5     		push	{r4, lr}
 4136              	.LCFI65:
 4137              		.cfi_def_cfa_offset 8
 4138              		.cfi_offset 4, -8
 4139              		.cfi_offset 14, -4
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
 4140              		.loc 1 4453 0
 4141 0002 80B9     		cbnz	r0, .L434
 4142              		.loc 1 4453 0 is_stmt 0 discriminator 1
 4143 0004 094B     		ldr	r3, .L436
 4144 0006 1C68     		ldr	r4, [r3]
 4145              	.L432:
 4146              	.LVL390:
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4147              		.loc 1 4455 0 is_stmt 1 discriminator 4
 4148 0008 FFF7FEFF 		bl	vPortEnterCritical
 4149              	.LVL391:
 4150 000c 0020     		movs	r0, #0
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 4151              		.loc 1 4457 0 discriminator 4
 4152 000e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4153 0012 022B     		cmp	r3, #2
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
 4154              		.loc 1 4459 0 discriminator 4
 4155 0014 0ABF     		itet	eq
 4156 0016 84F85000 		strbeq	r0, [r4, #80]
 4157              	.LVL392:
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 4158              		.loc 1 4464 0 discriminator 4
 4159 001a 0446     		movne	r4, r0
 4160              	.LVL393:
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
ARM GAS  /tmp/ccy76Mh1.s 			page 163


 4161              		.loc 1 4460 0 discriminator 4
 4162 001c 0124     		moveq	r4, #1
 4163              	.LVL394:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4164              		.loc 1 4467 0 discriminator 4
 4165 001e FFF7FEFF 		bl	vPortExitCritical
 4166              	.LVL395:
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4167              		.loc 1 4470 0 discriminator 4
 4168 0022 2046     		mov	r0, r4
 4169 0024 10BD     		pop	{r4, pc}
 4170              	.LVL396:
 4171              	.L434:
 4172 0026 0446     		mov	r4, r0
 4173 0028 EEE7     		b	.L432
 4174              	.L437:
 4175 002a 00BF     		.align	2
 4176              	.L436:
 4177 002c 00000000 		.word	.LANCHOR4
 4178              		.cfi_endproc
 4179              	.LFE46:
 4181              		.global	pxCurrentTCB
 4182              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4183              		.align	2
 4184              		.set	.LANCHOR4,. + 0
 4187              	pxCurrentTCB:
 4188 0000 00000000 		.space	4
 4189              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4190              		.align	2
 4191              		.set	.LANCHOR0,. + 0
 4194              	pxDelayedTaskList:
 4195 0000 00000000 		.space	4
 4196              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4197              		.align	2
 4198              		.set	.LANCHOR6,. + 0
 4201              	pxOverflowDelayedTaskList:
 4202 0000 00000000 		.space	4
 4203              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4204              		.align	2
 4205              		.set	.LANCHOR8,. + 0
 4208              	pxReadyTasksLists:
 4209 0000 00000000 		.space	140
 4209      00000000 
 4209      00000000 
 4209      00000000 
 4209      00000000 
 4210              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4211              		.align	2
 4212              		.set	.LANCHOR7,. + 0
 4215              	uxCurrentNumberOfTasks:
 4216 0000 00000000 		.space	4
 4217              		.section	.bss.uxPendedTicks,"aw",%nobits
 4218              		.align	2
ARM GAS  /tmp/ccy76Mh1.s 			page 164


 4219              		.set	.LANCHOR18,. + 0
 4222              	uxPendedTicks:
 4223 0000 00000000 		.space	4
 4224              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4225              		.align	2
 4226              		.set	.LANCHOR16,. + 0
 4229              	uxSchedulerSuspended:
 4230 0000 00000000 		.space	4
 4231              		.section	.bss.uxTaskNumber,"aw",%nobits
 4232              		.align	2
 4233              		.set	.LANCHOR13,. + 0
 4236              	uxTaskNumber:
 4237 0000 00000000 		.space	4
 4238              		.section	.bss.uxTasksDeleted,"aw",%nobits
 4239              		.align	2
 4240              		.set	.LANCHOR15,. + 0
 4243              	uxTasksDeleted:
 4244 0000 00000000 		.space	4
 4245              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 4246              		.align	2
 4247              		.set	.LANCHOR14,. + 0
 4250              	uxTopReadyPriority:
 4251 0000 00000000 		.space	4
 4252              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4253              		.align	2
 4254              		.set	.LANCHOR9,. + 0
 4257              	xDelayedTaskList1:
 4258 0000 00000000 		.space	20
 4258      00000000 
 4258      00000000 
 4258      00000000 
 4258      00000000 
 4259              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 4260              		.align	2
 4261              		.set	.LANCHOR10,. + 0
 4264              	xDelayedTaskList2:
 4265 0000 00000000 		.space	20
 4265      00000000 
 4265      00000000 
 4265      00000000 
 4265      00000000 
 4266              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 4267              		.align	2
 4268              		.set	.LANCHOR1,. + 0
 4271              	xNextTaskUnblockTime:
 4272 0000 00000000 		.space	4
 4273              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4274              		.align	2
 4275              		.set	.LANCHOR17,. + 0
 4278              	xNumOfOverflows:
 4279 0000 00000000 		.space	4
 4280              		.section	.bss.xPendingReadyList,"aw",%nobits
 4281              		.align	2
 4282              		.set	.LANCHOR3,. + 0
 4285              	xPendingReadyList:
 4286 0000 00000000 		.space	20
 4286      00000000 
ARM GAS  /tmp/ccy76Mh1.s 			page 165


 4286      00000000 
 4286      00000000 
 4286      00000000 
 4287              		.section	.bss.xSchedulerRunning,"aw",%nobits
 4288              		.align	2
 4289              		.set	.LANCHOR12,. + 0
 4292              	xSchedulerRunning:
 4293 0000 00000000 		.space	4
 4294              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 4295              		.align	2
 4296              		.set	.LANCHOR2,. + 0
 4299              	xSuspendedTaskList:
 4300 0000 00000000 		.space	20
 4300      00000000 
 4300      00000000 
 4300      00000000 
 4300      00000000 
 4301              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 4302              		.align	2
 4303              		.set	.LANCHOR11,. + 0
 4306              	xTasksWaitingTermination:
 4307 0000 00000000 		.space	20
 4307      00000000 
 4307      00000000 
 4307      00000000 
 4307      00000000 
 4308              		.section	.bss.xTickCount,"aw",%nobits
 4309              		.align	2
 4310              		.set	.LANCHOR5,. + 0
 4313              	xTickCount:
 4314 0000 00000000 		.space	4
 4315              		.section	.bss.xYieldPending,"aw",%nobits
 4316              		.align	2
 4317              		.set	.LANCHOR19,. + 0
 4320              	xYieldPending:
 4321 0000 00000000 		.space	4
 4322              		.section	.rodata.vTaskStartScheduler.str1.1,"aMS",%progbits,1
 4323              	.LC0:
 4324 0000 49444C45 		.ascii	"IDLE\000"
 4324      00
 4325              		.text
 4326              	.Letext0:
 4327              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4328              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_default_types.h"
 4329              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 4330              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 4331              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 4332              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 4333              		.file 9 "Inc/FreeRTOSConfig.h"
 4334              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 4335              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 4336              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4337              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccy76Mh1.s 			page 166


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccy76Mh1.s:16     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccy76Mh1.s:22     .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccy76Mh1.s:59     .text.prvResetNextTaskUnblockTime:000000000000001c $d
     /tmp/ccy76Mh1.s:67     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccy76Mh1.s:73     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccy76Mh1.s:126    .text.prvTaskIsTaskSuspended:0000000000000028 $d
     /tmp/ccy76Mh1.s:132    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccy76Mh1.s:138    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccy76Mh1.s:207    .text.prvAddCurrentTaskToDelayedList:000000000000003c $d
     /tmp/ccy76Mh1.s:216    .text.xTaskGenericCreate:0000000000000000 $t
     /tmp/ccy76Mh1.s:223    .text.xTaskGenericCreate:0000000000000000 xTaskGenericCreate
     /tmp/ccy76Mh1.s:533    .text.xTaskGenericCreate:0000000000000180 $d
     /tmp/ccy76Mh1.s:550    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccy76Mh1.s:557    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccy76Mh1.s:692    .text.vTaskDelete:0000000000000090 $d
     /tmp/ccy76Mh1.s:704    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccy76Mh1.s:711    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccy76Mh1.s:748    .text.uxTaskPriorityGet:0000000000000018 $d
     /tmp/ccy76Mh1.s:753    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccy76Mh1.s:760    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccy76Mh1.s:800    .text.uxTaskPriorityGetFromISR:000000000000001c $d
     /tmp/ccy76Mh1.s:805    .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccy76Mh1.s:812    .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccy76Mh1.s:969    .text.vTaskPrioritySet:00000000000000b0 $d
     /tmp/ccy76Mh1.s:976    .text.vTaskResume:0000000000000000 $t
     /tmp/ccy76Mh1.s:983    .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccy76Mh1.s:1074   .text.vTaskResume:0000000000000060 $d
     /tmp/ccy76Mh1.s:1081   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccy76Mh1.s:1088   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccy76Mh1.s:1188   .text.xTaskResumeFromISR:0000000000000078 $d
     /tmp/ccy76Mh1.s:1197   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccy76Mh1.s:1204   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccy76Mh1.s:1290   .text.vTaskStartScheduler:000000000000004c $d
     /tmp/ccy76Mh1.s:1941   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccy76Mh1.s:1299   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccy76Mh1.s:1306   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccy76Mh1.s:1336   .text.vTaskEndScheduler:0000000000000014 $d
     /tmp/ccy76Mh1.s:1341   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccy76Mh1.s:1348   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccy76Mh1.s:1364   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccy76Mh1.s:1369   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccy76Mh1.s:1376   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccy76Mh1.s:1392   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccy76Mh1.s:1397   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccy76Mh1.s:1404   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccy76Mh1.s:1427   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccy76Mh1.s:1432   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccy76Mh1.s:1439   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccy76Mh1.s:1454   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccy76Mh1.s:1459   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccy76Mh1.s:1466   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccy76Mh1.s:1647   .text.xTaskIncrementTick:00000000000000f0 $d
     /tmp/ccy76Mh1.s:1662   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccy76Mh1.s:1669   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccy76Mh1.s:1820   .text.xTaskResumeAll:00000000000000b4 $d
ARM GAS  /tmp/ccy76Mh1.s 			page 167


     /tmp/ccy76Mh1.s:1832   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccy76Mh1.s:1839   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccy76Mh1.s:1927   .text.vTaskDelay:0000000000000050 $d
     /tmp/ccy76Mh1.s:1935   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccy76Mh1.s:2029   .text.prvIdleTask:0000000000000054 $d
     /tmp/ccy76Mh1.s:2042   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccy76Mh1.s:2049   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccy76Mh1.s:2143   .text.vTaskSwitchContext:0000000000000054 $d
     /tmp/ccy76Mh1.s:2154   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccy76Mh1.s:2161   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccy76Mh1.s:2325   .text.vTaskSuspend:0000000000000098 $d
     /tmp/ccy76Mh1.s:2336   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccy76Mh1.s:2343   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccy76Mh1.s:2436   .text.vTaskPlaceOnEventList:0000000000000054 $d
     /tmp/ccy76Mh1.s:2444   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccy76Mh1.s:2451   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccy76Mh1.s:2559   .text.vTaskPlaceOnUnorderedEventList:0000000000000068 $d
     /tmp/ccy76Mh1.s:2568   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccy76Mh1.s:2575   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccy76Mh1.s:2660   .text.xTaskRemoveFromEventList:0000000000000060 $d
     /tmp/ccy76Mh1.s:2670   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccy76Mh1.s:2677   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccy76Mh1.s:2767   .text.xTaskRemoveFromUnorderedEventList:0000000000000060 $d
     /tmp/ccy76Mh1.s:2776   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccy76Mh1.s:2783   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccy76Mh1.s:2816   .text.vTaskSetTimeOutState:0000000000000018 $d
     /tmp/ccy76Mh1.s:2822   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccy76Mh1.s:2829   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccy76Mh1.s:2921   .text.xTaskCheckForTimeOut:0000000000000054 $d
     /tmp/ccy76Mh1.s:2928   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccy76Mh1.s:2935   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccy76Mh1.s:2950   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccy76Mh1.s:2955   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccy76Mh1.s:2962   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccy76Mh1.s:2978   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccy76Mh1.s:2983   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccy76Mh1.s:2990   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccy76Mh1.s:3018   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccy76Mh1.s:3024   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccy76Mh1.s:3031   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccy76Mh1.s:3144   .text.vTaskPriorityInherit:0000000000000084 $d
     /tmp/ccy76Mh1.s:3151   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccy76Mh1.s:3158   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccy76Mh1.s:3270   .text.xTaskPriorityDisinherit:000000000000007c $d
     /tmp/ccy76Mh1.s:3277   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccy76Mh1.s:3284   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccy76Mh1.s:3307   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccy76Mh1.s:3312   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccy76Mh1.s:3319   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccy76Mh1.s:3343   .text.pvTaskIncrementMutexHeldCount:0000000000000014 $d
     /tmp/ccy76Mh1.s:3348   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccy76Mh1.s:3355   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccy76Mh1.s:3470   .text.ulTaskNotifyTake:0000000000000084 $d
     /tmp/ccy76Mh1.s:3478   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccy76Mh1.s:3485   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccy76Mh1.s:3616   .text.xTaskNotifyWait:00000000000000a8 $d
     /tmp/ccy76Mh1.s:3624   .text.xTaskGenericNotify:0000000000000000 $t
ARM GAS  /tmp/ccy76Mh1.s 			page 168


     /tmp/ccy76Mh1.s:3631   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccy76Mh1.s:3687   .text.xTaskGenericNotify:0000000000000032 $d
     /tmp/ccy76Mh1.s:3691   .text.xTaskGenericNotify:0000000000000036 $t
     /tmp/ccy76Mh1.s:3775   .text.xTaskGenericNotify:000000000000009c $d
     /tmp/ccy76Mh1.s:3782   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccy76Mh1.s:3789   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccy76Mh1.s:3853   .text.xTaskGenericNotifyFromISR:000000000000003e $d
     /tmp/ccy76Mh1.s:3857   .text.xTaskGenericNotifyFromISR:0000000000000042 $t
     /tmp/ccy76Mh1.s:3964   .text.xTaskGenericNotifyFromISR:00000000000000c4 $d
     /tmp/ccy76Mh1.s:3973   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccy76Mh1.s:3980   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccy76Mh1.s:4112   .text.vTaskNotifyGiveFromISR:0000000000000088 $d
     /tmp/ccy76Mh1.s:4121   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccy76Mh1.s:4128   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccy76Mh1.s:4177   .text.xTaskNotifyStateClear:000000000000002c $d
     /tmp/ccy76Mh1.s:4187   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccy76Mh1.s:4183   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccy76Mh1.s:4190   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccy76Mh1.s:4194   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccy76Mh1.s:4197   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccy76Mh1.s:4201   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccy76Mh1.s:4204   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccy76Mh1.s:4208   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccy76Mh1.s:4211   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccy76Mh1.s:4215   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccy76Mh1.s:4218   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccy76Mh1.s:4222   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccy76Mh1.s:4225   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccy76Mh1.s:4229   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccy76Mh1.s:4232   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccy76Mh1.s:4236   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccy76Mh1.s:4239   .bss.uxTasksDeleted:0000000000000000 $d
     /tmp/ccy76Mh1.s:4243   .bss.uxTasksDeleted:0000000000000000 uxTasksDeleted
     /tmp/ccy76Mh1.s:4246   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccy76Mh1.s:4250   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccy76Mh1.s:4253   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccy76Mh1.s:4257   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccy76Mh1.s:4260   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccy76Mh1.s:4264   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccy76Mh1.s:4267   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccy76Mh1.s:4271   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccy76Mh1.s:4274   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccy76Mh1.s:4278   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccy76Mh1.s:4281   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccy76Mh1.s:4285   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccy76Mh1.s:4288   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccy76Mh1.s:4292   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccy76Mh1.s:4295   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccy76Mh1.s:4299   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccy76Mh1.s:4302   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccy76Mh1.s:4306   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccy76Mh1.s:4309   .bss.xTickCount:0000000000000000 $d
     /tmp/ccy76Mh1.s:4313   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccy76Mh1.s:4316   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccy76Mh1.s:4320   .bss.xYieldPending:0000000000000000 xYieldPending
                     .debug_frame:0000000000000010 $d

ARM GAS  /tmp/ccy76Mh1.s 			page 169


UNDEFINED SYMBOLS
ulPortSetInterruptMask
vListInsert
pvPortMalloc
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInitialise
vListInsertEnd
vPortExitCritical
vPortYield
vPortFree
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
