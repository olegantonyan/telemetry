ARM GAS  /tmp/ccZSOxmT.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvCopyDataToQueue,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvCopyDataToQueue:
  23              	.LFB14:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
ARM GAS  /tmp/ccZSOxmT.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccZSOxmT.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the xRxLock and xTxLock structure members. */
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( BaseType_t ) -1 )
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( BaseType_t ) 0 )
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccZSOxmT.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile BaseType_t xRxLock;	/*< Stores the number of items received from the queue (removed from 
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile BaseType_t xTxLock;	/*< Stores the number of items transmitted to the queue (added to the
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccZSOxmT.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xRxLock == queueUNLOCKED )			\
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->xRxLock = queueLOCKED_UNMODIFIED;	\
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->xTxLock == queueUNLOCKED )			\
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->xTxLock = queueLOCKED_UNMODIFIED;	\
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
ARM GAS  /tmp/ccZSOxmT.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, c
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxNewQueue;
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** size_t xQueueSizeInBytes;
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** QueueHandle_t xReturn = NULL;
 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
ARM GAS  /tmp/ccZSOxmT.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* There is not going to be a queue storage area. */
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueSizeInBytes = ( size_t ) 0;
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue is one byte longer than asked for to make wrap checking
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		easier/faster. */
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA 
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Allocate the new queue structure and storage area. */
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxNewQueue != NULL )
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* No RAM was allocated for the queue storage area, but PC head
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			cannot be set to NULL because NULL is used as a key to say the queue
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			is used as a mutex.  Therefore just set pcHead to point to the queue
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			as a benign value that is known to be within the memory map. */
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Initialise the queue members as described above where the queue type
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is defined. */
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->uxLength = uxQueueLength;
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->uxItemSize = uxItemSize;
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->ucQueueType = ucQueueType;
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_TRACE_FACILITY */
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configUSE_QUEUE_SETS == 1 )
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxQueueSetContainer = NULL;
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_QUEUE_SETS */
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceQUEUE_CREATE( pxNewQueue );
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pxNewQueue;
ARM GAS  /tmp/ccZSOxmT.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mtCOVERAGE_TEST_MARKER();
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xReturn );
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_MUTEXES == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Allocate the new queue structure. */
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Information required for priority inheritance. */
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Queues used as a mutex no data is actually copied into or out
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			of the queue. */
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pcWriteTo = NULL;
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Each mutex has a length of 1 (like a binary semaphore) and
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			an item size of 0 as nothing is actually copied into or out
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			of the mutex. */
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucQueueType = ucQueueType;
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->pxQueueSetContainer = NULL;
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start with the correct state. */
ARM GAS  /tmp/ccZSOxmT.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
ARM GAS  /tmp/ccZSOxmT.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Have we unwound the call count? */
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
ARM GAS  /tmp/ccZSOxmT.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn == pdPASS )
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_COUNTING_SEMAPHORES == 1 )
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( xHandle );
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccZSOxmT.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_COUNTING_SEMAPHORES */
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  /tmp/ccZSOxmT.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/ccZSOxmT.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  /tmp/ccZSOxmT.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Return to the original privilege level before exiting the
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			function. */
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueAltGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TimeOut_t xTimeOut;
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ;; )
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Is there room on the queue now?  To be running we must be
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the highest priority task wanting to access the queue. */
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND( pxQueue );
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
ARM GAS  /tmp/ccZSOxmT.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately. */
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							portYIELD_WITHIN_API();
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return pdPASS;
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return errQUEUE_FULL;
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvIsQueueFull( pxQueue ) != pdFALSE )
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
ARM GAS  /tmp/ccZSOxmT.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_ALTERNATIVE_API == 1 )
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueAltGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicks
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xEntryTimeSet = pdFALSE;
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	TimeOut_t xTimeOut;
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcOriginalReadPosition;
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxQueue );
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ;; )
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Remember our read position in case we are just peeking. */
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					prvCopyDataFromQueue( pxQueue, pvBuffer );
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xJustPeeking == pdFALSE )
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE( pxQueue );
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* Data is actually being removed (not just peeked). */
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						--( pxQueue->uxMessagesWaiting );
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* Record the information required to implement
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								priority inheritance should it become necessary. */
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle();
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						#endif
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
ARM GAS  /tmp/ccZSOxmT.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						traceQUEUE_PEEK( pxQueue );
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The data is not being removed, so reset our read
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pointer. */
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The data is being left in the queue, so see if there are
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						any other tasks waiting for the data. */
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Tasks that are removed from the event list will get added to
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							the pending ready list as the scheduler is still suspended. */
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority than this task. */
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								portYIELD_WITHIN_API();
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return pdPASS;
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTicksToWait == ( TickType_t ) 0 )
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						traceQUEUE_RECEIVE_FAILED( pxQueue );
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return errQUEUE_EMPTY;
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xEntryTimeSet == pdFALSE )
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskSetTimeOutState( &xTimeOut );
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xEntryTimeSet = pdTRUE;
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccZSOxmT.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskENTER_CRITICAL();
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						#if ( configUSE_MUTEXES == 1 )
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								taskENTER_CRITICAL();
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								taskEXIT_CRITICAL();
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						#endif
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						portYIELD_WITHIN_API();
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			taskEXIT_CRITICAL();
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_ALTERNATIVE_API */
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
ARM GAS  /tmp/ccZSOxmT.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccZSOxmT.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  /tmp/ccZSOxmT.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /tmp/ccZSOxmT.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			++( pxQueue->uxMessagesWaiting );
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->xTxLock == queueUNLOCKED )
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  /tmp/ccZSOxmT.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
ARM GAS  /tmp/ccZSOxmT.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				++( pxQueue->xTxLock );
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be	the highest priority task wanting to access the queue. */
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				peeked. */
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					--( pxQueue->uxMessagesWaiting );
ARM GAS  /tmp/ccZSOxmT.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pointer. */
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccZSOxmT.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  /tmp/ccZSOxmT.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_EMPTY;
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /tmp/ccZSOxmT.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->xRxLock == queueUNLOCKED )
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				++( pxQueue->xRxLock );
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccZSOxmT.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccZSOxmT.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
ARM GAS  /tmp/ccZSOxmT.s 			page 32


1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	vPortFree( pxQueue );
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  25              		.loc 1 1785 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 38B5     		push	{r3, r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 3, -16
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37              		.loc 1 1785 0
  38 0002 1546     		mov	r5, r2
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  /tmp/ccZSOxmT.s 			page 33


1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  39              		.loc 1 1788 0
  40 0004 026C     		ldr	r2, [r0, #64]
  41              	.LVL1:
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
  42              		.loc 1 1785 0
  43 0006 0446     		mov	r4, r0
  44              		.loc 1 1788 0
  45 0008 5AB9     		cbnz	r2, .L2
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  46              		.loc 1 1792 0
  47 000a 0568     		ldr	r5, [r0]
  48              	.LVL2:
  49 000c 0DB1     		cbz	r5, .L3
  50              	.LVL3:
  51              	.L11:
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  52              		.loc 1 1786 0
  53 000e 0020     		movs	r0, #0
  54 0010 03E0     		b	.L4
  55              	.LVL4:
  56              	.L3:
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  57              		.loc 1 1795 0
  58 0012 4068     		ldr	r0, [r0, #4]
  59              	.LVL5:
  60 0014 FFF7FEFF 		bl	xTaskPriorityDisinherit
  61              	.LVL6:
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
  62              		.loc 1 1796 0
  63 0018 6560     		str	r5, [r4, #4]
  64              	.LVL7:
  65              	.L4:
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccZSOxmT.s 			page 34


1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	++( pxQueue->uxMessagesWaiting );
  66              		.loc 1 1852 0
  67 001a A36B     		ldr	r3, [r4, #56]
  68 001c 0133     		adds	r3, r3, #1
  69 001e A363     		str	r3, [r4, #56]
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  70              		.loc 1 1855 0
  71 0020 38BD     		pop	{r3, r4, r5, pc}
  72              	.LVL8:
  73              	.L2:
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  74              		.loc 1 1805 0
  75 0022 65B9     		cbnz	r5, .L5
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  76              		.loc 1 1807 0
  77 0024 8068     		ldr	r0, [r0, #8]
  78              	.LVL9:
  79 0026 FFF7FEFF 		bl	memcpy
  80              	.LVL10:
ARM GAS  /tmp/ccZSOxmT.s 			page 35


1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
  81              		.loc 1 1808 0
  82 002a A368     		ldr	r3, [r4, #8]
  83 002c 226C     		ldr	r2, [r4, #64]
  84 002e 1344     		add	r3, r3, r2
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
  85              		.loc 1 1809 0
  86 0030 6268     		ldr	r2, [r4, #4]
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
  87              		.loc 1 1808 0
  88 0032 A360     		str	r3, [r4, #8]
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
  89              		.loc 1 1809 0
  90 0034 9342     		cmp	r3, r2
  91 0036 EAD3     		bcc	.L11
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  92              		.loc 1 1811 0
  93 0038 2368     		ldr	r3, [r4]
  94 003a A360     		str	r3, [r4, #8]
  95 003c E7E7     		b	.L11
  96              	.LVL11:
  97              	.L5:
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  98              		.loc 1 1820 0
  99 003e C068     		ldr	r0, [r0, #12]
 100              	.LVL12:
 101 0040 FFF7FEFF 		bl	memcpy
 102              	.LVL13:
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 103              		.loc 1 1821 0
 104 0044 236C     		ldr	r3, [r4, #64]
 105 0046 E268     		ldr	r2, [r4, #12]
 106 0048 5B42     		negs	r3, r3
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 107              		.loc 1 1822 0
 108 004a 2168     		ldr	r1, [r4]
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 109              		.loc 1 1821 0
 110 004c 1A44     		add	r2, r2, r3
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 111              		.loc 1 1822 0
 112 004e 8A42     		cmp	r2, r1
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 113              		.loc 1 1821 0
 114 0050 E260     		str	r2, [r4, #12]
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 115              		.loc 1 1824 0
 116 0052 3EBF     		ittt	cc
 117 0054 6268     		ldrcc	r2, [r4, #4]
 118 0056 9B18     		addcc	r3, r3, r2
 119 0058 E360     		strcc	r3, [r4, #12]
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 120              		.loc 1 1831 0
 121 005a 022D     		cmp	r5, #2
 122 005c D7D1     		bne	.L11
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 123              		.loc 1 1833 0
ARM GAS  /tmp/ccZSOxmT.s 			page 36


 124 005e A36B     		ldr	r3, [r4, #56]
 125 0060 002B     		cmp	r3, #0
 126 0062 D4D0     		beq	.L11
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 127              		.loc 1 1839 0
 128 0064 A36B     		ldr	r3, [r4, #56]
 129 0066 013B     		subs	r3, r3, #1
 130 0068 A363     		str	r3, [r4, #56]
 131 006a D0E7     		b	.L11
 132              		.cfi_endproc
 133              	.LFE14:
 135              		.section	.text.unlikely.prvCopyDataFromQueue,"ax",%progbits
 136              		.align	1
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu softvfp
 142              	prvCopyDataFromQueue:
 143              	.LFB15:
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 144              		.loc 1 1859 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              	.LVL14:
 150 0000 0346     		mov	r3, r0
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 151              		.loc 1 1860 0
 152 0002 1A6C     		ldr	r2, [r3, #64]
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 153              		.loc 1 1859 0
 154 0004 10B4     		push	{r4}
 155              	.LCFI1:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 4, -4
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 158              		.loc 1 1859 0
 159 0006 0846     		mov	r0, r1
 160              	.LVL15:
 161              		.loc 1 1860 0
 162 0008 62B1     		cbz	r2, .L12
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 163              		.loc 1 1862 0
 164 000a D968     		ldr	r1, [r3, #12]
 165              	.LVL16:
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 166              		.loc 1 1863 0
 167 000c 5C68     		ldr	r4, [r3, #4]
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 168              		.loc 1 1862 0
 169 000e 1144     		add	r1, r1, r2
 170              		.loc 1 1863 0
ARM GAS  /tmp/ccZSOxmT.s 			page 37


 171 0010 A142     		cmp	r1, r4
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 172              		.loc 1 1862 0
 173 0012 D960     		str	r1, [r3, #12]
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 174              		.loc 1 1865 0
 175 0014 28BF     		it	cs
 176 0016 1968     		ldrcs	r1, [r3]
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 177              		.loc 1 1873 0
 178 0018 10BC     		pop	{r4}
 179              	.LCFI2:
 180              		.cfi_remember_state
 181              		.cfi_restore 4
 182              		.cfi_def_cfa_offset 0
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 183              		.loc 1 1865 0
 184 001a 28BF     		it	cs
 185 001c D960     		strcs	r1, [r3, #12]
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 186              		.loc 1 1871 0
 187 001e D968     		ldr	r1, [r3, #12]
 188 0020 FFF7FEBF 		b	memcpy
 189              	.LVL17:
 190              	.L12:
 191              	.LCFI3:
 192              		.cfi_restore_state
 193              		.loc 1 1873 0
 194 0024 10BC     		pop	{r4}
 195              	.LCFI4:
 196              		.cfi_restore 4
 197              		.cfi_def_cfa_offset 0
 198 0026 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE15:
 202              		.section	.text.prvUnlockQueue,"ax",%progbits
 203              		.align	1
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu softvfp
 209              	prvUnlockQueue:
 210              	.LFB16:
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 211              		.loc 1 1877 0
 212              		.cfi_startproc
ARM GAS  /tmp/ccZSOxmT.s 			page 38


 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              	.LVL18:
 216 0000 38B5     		push	{r3, r4, r5, lr}
 217              	.LCFI5:
 218              		.cfi_def_cfa_offset 16
 219              		.cfi_offset 3, -16
 220              		.cfi_offset 4, -12
 221              		.cfi_offset 5, -8
 222              		.cfi_offset 14, -4
 223              		.loc 1 1877 0
 224 0002 0446     		mov	r4, r0
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 225              		.loc 1 1884 0
 226 0004 FFF7FEFF 		bl	vPortEnterCritical
 227              	.LVL19:
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get added to
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the pending ready list as the scheduler is still suspended. */
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
ARM GAS  /tmp/ccZSOxmT.s 			page 39


1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 228              		.loc 1 1936 0
 229 0008 04F12405 		add	r5, r4, #36
 230              	.L16:
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 231              		.loc 1 1887 0
 232 000c A36C     		ldr	r3, [r4, #72]
 233 000e 002B     		cmp	r3, #0
 234 0010 12DC     		bgt	.L19
 235              	.L17:
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that a
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						context	switch is required. */
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->xTxLock );
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 236              		.loc 1 1957 0
 237 0012 4FF0FF33 		mov	r3, #-1
 238 0016 A364     		str	r3, [r4, #72]
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 239              		.loc 1 1959 0
 240 0018 FFF7FEFF 		bl	vPortExitCritical
 241              	.LVL20:
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
ARM GAS  /tmp/ccZSOxmT.s 			page 40


1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 242              		.loc 1 1962 0
 243 001c FFF7FEFF 		bl	vPortEnterCritical
 244              	.LVL21:
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 245              		.loc 1 1968 0
 246 0020 04F11005 		add	r5, r4, #16
 247              	.L20:
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 248              		.loc 1 1964 0
 249 0024 636C     		ldr	r3, [r4, #68]
 250 0026 002B     		cmp	r3, #0
 251 0028 13DC     		bgt	.L23
 252              	.L21:
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->xRxLock );
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 253              		.loc 1 1985 0
 254 002a 4FF0FF33 		mov	r3, #-1
 255 002e 6364     		str	r3, [r4, #68]
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 256              		.loc 1 1988 0
 257 0030 BDE83840 		pop	{r3, r4, r5, lr}
 258              	.LCFI6:
 259              		.cfi_remember_state
 260              		.cfi_restore 14
 261              		.cfi_restore 5
 262              		.cfi_restore 4
 263              		.cfi_restore 3
 264              		.cfi_def_cfa_offset 0
 265              	.LVL22:
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 266              		.loc 1 1987 0
 267 0034 FFF7FEBF 		b	vPortExitCritical
 268              	.LVL23:
 269              	.L19:
ARM GAS  /tmp/ccZSOxmT.s 			page 41


 270              	.LCFI7:
 271              		.cfi_restore_state
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 272              		.loc 1 1934 0
 273 0038 636A     		ldr	r3, [r4, #36]
 274 003a 002B     		cmp	r3, #0
 275 003c E9D0     		beq	.L17
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 276              		.loc 1 1936 0
 277 003e 2846     		mov	r0, r5
 278 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 279              	.LVL24:
 280 0044 08B1     		cbz	r0, .L18
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 281              		.loc 1 1940 0
 282 0046 FFF7FEFF 		bl	vTaskMissedYield
 283              	.LVL25:
 284              	.L18:
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 285              		.loc 1 1954 0
 286 004a A36C     		ldr	r3, [r4, #72]
 287 004c 013B     		subs	r3, r3, #1
 288 004e A364     		str	r3, [r4, #72]
 289 0050 DCE7     		b	.L16
 290              	.L23:
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 291              		.loc 1 1966 0
 292 0052 2369     		ldr	r3, [r4, #16]
 293 0054 002B     		cmp	r3, #0
 294 0056 E8D0     		beq	.L21
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 295              		.loc 1 1968 0
 296 0058 2846     		mov	r0, r5
 297 005a FFF7FEFF 		bl	xTaskRemoveFromEventList
 298              	.LVL26:
 299 005e 08B1     		cbz	r0, .L22
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 300              		.loc 1 1970 0
 301 0060 FFF7FEFF 		bl	vTaskMissedYield
 302              	.LVL27:
 303              	.L22:
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 304              		.loc 1 1977 0
 305 0064 636C     		ldr	r3, [r4, #68]
 306 0066 013B     		subs	r3, r3, #1
 307 0068 6364     		str	r3, [r4, #68]
 308 006a DBE7     		b	.L20
 309              		.cfi_endproc
 310              	.LFE16:
 312              		.section	.text.xQueueGenericReset,"ax",%progbits
 313              		.align	1
 314              		.global	xQueueGenericReset
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 320              	xQueueGenericReset:
ARM GAS  /tmp/ccZSOxmT.s 			page 42


 321              	.LFB1:
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 322              		.loc 1 261 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL28:
 327 0000 38B5     		push	{r3, r4, r5, lr}
 328              	.LCFI8:
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 3, -16
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 334              		.loc 1 261 0
 335 0002 0D46     		mov	r5, r1
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 336              		.loc 1 264 0
 337 0004 0446     		mov	r4, r0
 338 0006 10B9     		cbnz	r0, .L37
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 339              		.loc 1 264 0 is_stmt 0 discriminator 1
 340 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 341              	.LVL29:
 342              	.L38:
 343 000c FEE7     		b	.L38
 344              	.LVL30:
 345              	.L37:
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 346              		.loc 1 266 0 is_stmt 1
 347 000e FFF7FEFF 		bl	vPortEnterCritical
 348              	.LVL31:
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 349              		.loc 1 268 0
 350 0012 206C     		ldr	r0, [r4, #64]
 351 0014 E36B     		ldr	r3, [r4, #60]
 352 0016 2268     		ldr	r2, [r4]
 353 0018 4343     		muls	r3, r0, r3
 354 001a D118     		adds	r1, r2, r3
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 355              		.loc 1 271 0
 356 001c 1B1A     		subs	r3, r3, r0
 357 001e 1344     		add	r3, r3, r2
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 358              		.loc 1 268 0
 359 0020 6160     		str	r1, [r4, #4]
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xRxLock = queueUNLOCKED;
 360              		.loc 1 271 0
 361 0022 E360     		str	r3, [r4, #12]
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 362              		.loc 1 269 0
 363 0024 0021     		movs	r1, #0
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 364              		.loc 1 272 0
 365 0026 4FF0FF33 		mov	r3, #-1
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
ARM GAS  /tmp/ccZSOxmT.s 			page 43


 366              		.loc 1 269 0
 367 002a A163     		str	r1, [r4, #56]
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 368              		.loc 1 270 0
 369 002c A260     		str	r2, [r4, #8]
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->xTxLock = queueUNLOCKED;
 370              		.loc 1 272 0
 371 002e 6364     		str	r3, [r4, #68]
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 372              		.loc 1 273 0
 373 0030 A364     		str	r3, [r4, #72]
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 374              		.loc 1 275 0
 375 0032 6DB9     		cbnz	r5, .L39
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 376              		.loc 1 282 0
 377 0034 2369     		ldr	r3, [r4, #16]
 378 0036 3BB1     		cbz	r3, .L41
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 379              		.loc 1 284 0
 380 0038 04F11000 		add	r0, r4, #16
 381 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 382              	.LVL32:
 383 0040 0128     		cmp	r0, #1
 384 0042 01D1     		bne	.L41
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 385              		.loc 1 286 0
 386 0044 FFF7FEFF 		bl	vPortYield
 387              	.LVL33:
 388              	.L41:
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 389              		.loc 1 305 0
 390 0048 FFF7FEFF 		bl	vPortExitCritical
 391              	.LVL34:
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 392              		.loc 1 310 0
 393 004c 0120     		movs	r0, #1
 394 004e 38BD     		pop	{r3, r4, r5, pc}
 395              	.LVL35:
 396              	.L39:
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 397              		.loc 1 301 0
 398 0050 04F11000 		add	r0, r4, #16
 399 0054 FFF7FEFF 		bl	vListInitialise
 400              	.LVL36:
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 401              		.loc 1 302 0
 402 0058 04F12400 		add	r0, r4, #36
 403 005c FFF7FEFF 		bl	vListInitialise
 404              	.LVL37:
 405 0060 F2E7     		b	.L41
 406              		.cfi_endproc
 407              	.LFE1:
 409              		.section	.text.xQueueGenericCreate,"ax",%progbits
 410              		.align	1
 411              		.global	xQueueGenericCreate
 412              		.syntax unified
ARM GAS  /tmp/ccZSOxmT.s 			page 44


 413              		.thumb
 414              		.thumb_func
 415              		.fpu softvfp
 417              	xQueueGenericCreate:
 418              	.LFB2:
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxNewQueue;
 419              		.loc 1 314 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              	.LVL38:
 424 0000 70B5     		push	{r4, r5, r6, lr}
 425              	.LCFI9:
 426              		.cfi_def_cfa_offset 16
 427              		.cfi_offset 4, -16
 428              		.cfi_offset 5, -12
 429              		.cfi_offset 6, -8
 430              		.cfi_offset 14, -4
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxNewQueue;
 431              		.loc 1 314 0
 432 0002 0D46     		mov	r5, r1
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 433              		.loc 1 323 0
 434 0004 0646     		mov	r6, r0
 435 0006 10B9     		cbnz	r0, .L44
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 436              		.loc 1 323 0 is_stmt 0 discriminator 1
 437 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 438              	.LVL39:
 439              	.L45:
 440 000c FEE7     		b	.L45
 441              	.LVL40:
 442              	.L44:
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 443              		.loc 1 325 0 is_stmt 1
 444 000e 81B1     		cbz	r1, .L51
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 445              		.loc 1 334 0
 446 0010 4843     		muls	r0, r1, r0
 447              	.LVL41:
 448 0012 0130     		adds	r0, r0, #1
 449              	.LVL42:
 450              	.L46:
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 451              		.loc 1 338 0
 452 0014 4C30     		adds	r0, r0, #76
 453              	.LVL43:
 454 0016 FFF7FEFF 		bl	pvPortMalloc
 455              	.LVL44:
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 456              		.loc 1 340 0
 457 001a 0446     		mov	r4, r0
 458 001c 78B1     		cbz	r0, .L47
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 459              		.loc 1 342 0
 460 001e 55B9     		cbnz	r5, .L48
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccZSOxmT.s 			page 45


 461              		.loc 1 348 0
 462 0020 2060     		str	r0, [r4]
 463              	.L49:
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->uxItemSize = uxItemSize;
 464              		.loc 1 359 0
 465 0022 E663     		str	r6, [r4, #60]
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 466              		.loc 1 360 0
 467 0024 2564     		str	r5, [r4, #64]
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 468              		.loc 1 361 0
 469 0026 0121     		movs	r1, #1
 470 0028 2046     		mov	r0, r4
 471              	.LVL45:
 472 002a FFF7FEFF 		bl	xQueueGenericReset
 473              	.LVL46:
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 474              		.loc 1 386 0
 475 002e 2046     		mov	r0, r4
 476 0030 70BD     		pop	{r4, r5, r6, pc}
 477              	.LVL47:
 478              	.L51:
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 479              		.loc 1 328 0
 480 0032 0846     		mov	r0, r1
 481              	.LVL48:
 482 0034 EEE7     		b	.L46
 483              	.LVL49:
 484              	.L48:
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 485              		.loc 1 354 0
 486 0036 00F14C03 		add	r3, r0, #76
 487 003a 0360     		str	r3, [r0]
 488 003c F1E7     		b	.L49
 489              	.L47:
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490              		.loc 1 383 0
 491 003e FFF7FEFF 		bl	ulPortSetInterruptMask
 492              	.LVL50:
 493              	.L50:
 494 0042 FEE7     		b	.L50
 495              		.cfi_endproc
 496              	.LFE2:
 498              		.section	.text.xQueueGenericSend,"ax",%progbits
 499              		.align	1
 500              		.global	xQueueGenericSend
 501              		.syntax unified
 502              		.thumb
 503              		.thumb_func
 504              		.fpu softvfp
 506              	xQueueGenericSend:
 507              	.LFB4:
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 508              		.loc 1 610 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 16
 511              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZSOxmT.s 			page 46


 512              	.LVL51:
 513 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 514              	.LCFI10:
 515              		.cfi_def_cfa_offset 28
 516              		.cfi_offset 4, -28
 517              		.cfi_offset 5, -24
 518              		.cfi_offset 6, -20
 519              		.cfi_offset 7, -16
 520              		.cfi_offset 8, -12
 521              		.cfi_offset 9, -8
 522              		.cfi_offset 14, -4
 523 0004 85B0     		sub	sp, sp, #20
 524              	.LCFI11:
 525              		.cfi_def_cfa_offset 48
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 526              		.loc 1 610 0
 527 0006 8946     		mov	r9, r1
 528 0008 0192     		str	r2, [sp, #4]
 529 000a 1F46     		mov	r7, r3
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 530              		.loc 1 615 0
 531 000c 0446     		mov	r4, r0
 532 000e 10B9     		cbnz	r0, .L54
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 533              		.loc 1 615 0 is_stmt 0 discriminator 1
 534 0010 FFF7FEFF 		bl	ulPortSetInterruptMask
 535              	.LVL52:
 536              	.L55:
 537 0014 FEE7     		b	.L55
 538              	.LVL53:
 539              	.L54:
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 540              		.loc 1 616 0 is_stmt 1
 541 0016 0029     		cmp	r1, #0
 542 0018 70D1     		bne	.L56
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 543              		.loc 1 616 0 is_stmt 0 discriminator 2
 544 001a 036C     		ldr	r3, [r0, #64]
 545              	.LVL54:
 546 001c 002B     		cmp	r3, #0
 547 001e 6DD0     		beq	.L56
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 548              		.loc 1 616 0
 549 0020 FFF7FEFF 		bl	ulPortSetInterruptMask
 550              	.LVL55:
 551              	.L58:
 552 0024 FEE7     		b	.L58
 553              	.L80:
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 554              		.loc 1 620 0 is_stmt 1 discriminator 2
 555 0026 019E     		ldr	r6, [sp, #4]
 556 0028 002E     		cmp	r6, #0
 557 002a 71D0     		beq	.L62
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 558              		.loc 1 620 0 is_stmt 0
 559 002c FFF7FEFF 		bl	ulPortSetInterruptMask
 560              	.LVL56:
ARM GAS  /tmp/ccZSOxmT.s 			page 47


 561              	.L64:
 562 0030 FEE7     		b	.L64
 563              	.LVL57:
 564              	.L67:
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 565              		.loc 1 709 0 is_stmt 1
 566 0032 0028     		cmp	r0, #0
 567 0034 50D0     		beq	.L69
 568 0036 4DE0     		b	.L68
 569              	.LVL58:
 570              	.L66:
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 571              		.loc 1 729 0
 572 0038 019D     		ldr	r5, [sp, #4]
 573 003a 1DB9     		cbnz	r5, .L72
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574              		.loc 1 733 0
 575 003c FFF7FEFF 		bl	vPortExitCritical
 576              	.LVL59:
 577              	.L96:
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 578              		.loc 1 803 0
 579 0040 0020     		movs	r0, #0
 580 0042 4CE0     		b	.L53
 581              	.LVL60:
 582              	.L72:
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 583              		.loc 1 740 0
 584 0044 16B9     		cbnz	r6, .L73
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 585              		.loc 1 744 0
 586 0046 02A8     		add	r0, sp, #8
 587 0048 FFF7FEFF 		bl	vTaskSetTimeOutState
 588              	.LVL61:
 589              	.L73:
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 590              		.loc 1 754 0
 591 004c FFF7FEFF 		bl	vPortExitCritical
 592              	.LVL62:
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 593              		.loc 1 759 0
 594 0050 FFF7FEFF 		bl	vTaskSuspendAll
 595              	.LVL63:
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 596              		.loc 1 760 0
 597 0054 FFF7FEFF 		bl	vPortEnterCritical
 598              	.LVL64:
 599 0058 636C     		ldr	r3, [r4, #68]
 600 005a 0133     		adds	r3, r3, #1
 601 005c 08BF     		it	eq
 602 005e C4F84480 		streq	r8, [r4, #68]
 603 0062 A36C     		ldr	r3, [r4, #72]
 604 0064 0133     		adds	r3, r3, #1
 605 0066 08BF     		it	eq
 606 0068 C4F84880 		streq	r8, [r4, #72]
 607 006c FFF7FEFF 		bl	vPortExitCritical
 608              	.LVL65:
ARM GAS  /tmp/ccZSOxmT.s 			page 48


 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 609              		.loc 1 763 0
 610 0070 01A9     		add	r1, sp, #4
 611 0072 02A8     		add	r0, sp, #8
 612 0074 FFF7FEFF 		bl	xTaskCheckForTimeOut
 613              	.LVL66:
 614 0078 0028     		cmp	r0, #0
 615 007a 39D1     		bne	.L76
 616              	.LVL67:
 617              	.LBB4:
 618              	.LBB5:
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
ARM GAS  /tmp/ccZSOxmT.s 			page 49


 619              		.loc 1 2034 0
 620 007c FFF7FEFF 		bl	vPortEnterCritical
 621              	.LVL68:
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 622              		.loc 1 2036 0
 623 0080 A66B     		ldr	r6, [r4, #56]
 624 0082 E56B     		ldr	r5, [r4, #60]
 625              	.LVL69:
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 626              		.loc 1 2045 0
 627 0084 FFF7FEFF 		bl	vPortExitCritical
 628              	.LVL70:
 629              	.LBE5:
 630              	.LBE4:
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 631              		.loc 1 765 0
 632 0088 AE42     		cmp	r6, r5
 633 008a 2BD1     		bne	.L77
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 634              		.loc 1 768 0
 635 008c 0199     		ldr	r1, [sp, #4]
 636 008e 04F11000 		add	r0, r4, #16
 637 0092 FFF7FEFF 		bl	vTaskPlaceOnEventList
 638              	.LVL71:
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 639              		.loc 1 775 0
 640 0096 2046     		mov	r0, r4
 641 0098 FFF7FEFF 		bl	prvUnlockQueue
 642              	.LVL72:
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 643              		.loc 1 782 0
 644 009c FFF7FEFF 		bl	xTaskResumeAll
 645              	.LVL73:
 646 00a0 08B9     		cbnz	r0, .L78
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 647              		.loc 1 784 0
 648 00a2 FFF7FEFF 		bl	vPortYield
 649              	.LVL74:
 650              	.L78:
 651 00a6 0126     		movs	r6, #1
 652              	.LVL75:
 653              	.L81:
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 654              		.loc 1 630 0
 655 00a8 FFF7FEFF 		bl	vPortEnterCritical
 656              	.LVL76:
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 657              		.loc 1 636 0
ARM GAS  /tmp/ccZSOxmT.s 			page 50


 658 00ac A26B     		ldr	r2, [r4, #56]
 659 00ae E36B     		ldr	r3, [r4, #60]
 660 00b0 9A42     		cmp	r2, r3
 661 00b2 01D3     		bcc	.L65
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 662              		.loc 1 636 0 is_stmt 0 discriminator 1
 663 00b4 022F     		cmp	r7, #2
 664 00b6 BFD1     		bne	.L66
 665              	.L65:
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 666              		.loc 1 639 0 is_stmt 1
 667 00b8 3A46     		mov	r2, r7
 668 00ba 4946     		mov	r1, r9
 669 00bc 2046     		mov	r0, r4
 670 00be FFF7FEFF 		bl	prvCopyDataToQueue
 671              	.LVL77:
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 672              		.loc 1 694 0
 673 00c2 636A     		ldr	r3, [r4, #36]
 674 00c4 002B     		cmp	r3, #0
 675 00c6 B4D0     		beq	.L67
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 676              		.loc 1 696 0
 677 00c8 04F12400 		add	r0, r4, #36
 678              	.LVL78:
 679 00cc FFF7FEFF 		bl	xTaskRemoveFromEventList
 680              	.LVL79:
 681 00d0 0128     		cmp	r0, #1
 682 00d2 01D1     		bne	.L69
 683              	.L68:
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 684              		.loc 1 702 0
 685 00d4 FFF7FEFF 		bl	vPortYield
 686              	.LVL80:
 687              	.L69:
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 688              		.loc 1 724 0
 689 00d8 FFF7FEFF 		bl	vPortExitCritical
 690              	.LVL81:
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 691              		.loc 1 725 0
 692 00dc 0120     		movs	r0, #1
 693              	.LVL82:
 694              	.L53:
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 695              		.loc 1 806 0
 696 00de 05B0     		add	sp, sp, #20
 697              	.LCFI12:
 698              		.cfi_remember_state
 699              		.cfi_def_cfa_offset 28
 700              		@ sp needed
 701 00e0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 702              	.LVL83:
 703              	.L77:
 704              	.LCFI13:
 705              		.cfi_restore_state
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
ARM GAS  /tmp/ccZSOxmT.s 			page 51


 706              		.loc 1 790 0
 707 00e4 2046     		mov	r0, r4
 708 00e6 FFF7FEFF 		bl	prvUnlockQueue
 709              	.LVL84:
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 710              		.loc 1 791 0
 711 00ea FFF7FEFF 		bl	xTaskResumeAll
 712              	.LVL85:
 713 00ee DAE7     		b	.L78
 714              	.L76:
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 715              		.loc 1 797 0
 716 00f0 2046     		mov	r0, r4
 717 00f2 FFF7FEFF 		bl	prvUnlockQueue
 718              	.LVL86:
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 719              		.loc 1 798 0
 720 00f6 FFF7FEFF 		bl	xTaskResumeAll
 721              	.LVL87:
 722 00fa A1E7     		b	.L96
 723              	.LVL88:
 724              	.L56:
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 725              		.loc 1 617 0
 726 00fc 022F     		cmp	r7, #2
 727 00fe 02D1     		bne	.L59
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 728              		.loc 1 617 0 is_stmt 0 discriminator 2
 729 0100 E36B     		ldr	r3, [r4, #60]
 730 0102 012B     		cmp	r3, #1
 731 0104 07D1     		bne	.L93
 732              	.L59:
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 733              		.loc 1 620 0 is_stmt 1
 734 0106 FFF7FEFF 		bl	xTaskGetSchedulerState
 735              	.LVL89:
 736 010a 0028     		cmp	r0, #0
 737 010c 8BD0     		beq	.L80
 738 010e 0026     		movs	r6, #0
 739              	.L62:
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 740              		.loc 1 760 0
 741 0110 4FF00008 		mov	r8, #0
 742 0114 C8E7     		b	.L81
 743              	.LVL90:
 744              	.L93:
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 745              		.loc 1 617 0
 746 0116 FFF7FEFF 		bl	ulPortSetInterruptMask
 747              	.LVL91:
 748              	.L61:
 749 011a FEE7     		b	.L61
 750              		.cfi_endproc
 751              	.LFE4:
 753              		.section	.text.xQueueCreateMutex,"ax",%progbits
 754              		.align	1
 755              		.global	xQueueCreateMutex
ARM GAS  /tmp/ccZSOxmT.s 			page 52


 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu softvfp
 761              	xQueueCreateMutex:
 762              	.LFB3:
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 763              		.loc 1 392 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              	.LVL92:
 768 0000 38B5     		push	{r3, r4, r5, lr}
 769              	.LCFI14:
 770              		.cfi_def_cfa_offset 16
 771              		.cfi_offset 3, -16
 772              		.cfi_offset 4, -12
 773              		.cfi_offset 5, -8
 774              		.cfi_offset 14, -4
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 775              		.loc 1 400 0
 776 0002 4C20     		movs	r0, #76
 777              	.LVL93:
 778 0004 FFF7FEFF 		bl	pvPortMalloc
 779              	.LVL94:
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 780              		.loc 1 401 0
 781 0008 0446     		mov	r4, r0
 782 000a C8B1     		cbz	r0, .L98
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 783              		.loc 1 416 0
 784 000c 0123     		movs	r3, #1
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 785              		.loc 1 404 0
 786 000e 0025     		movs	r5, #0
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 787              		.loc 1 416 0
 788 0010 C363     		str	r3, [r0, #60]
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 789              		.loc 1 418 0
 790 0012 4FF0FF33 		mov	r3, #-1
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 791              		.loc 1 415 0
 792 0016 8563     		str	r5, [r0, #56]
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 793              		.loc 1 404 0
 794 0018 4560     		str	r5, [r0, #4]
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->xTxLock = queueUNLOCKED;
 795              		.loc 1 418 0
 796 001a 4364     		str	r3, [r0, #68]
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 797              		.loc 1 405 0
 798 001c 0560     		str	r5, [r0]
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 799              		.loc 1 419 0
 800 001e 8364     		str	r3, [r0, #72]
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.pcReadFrom = NULL;
ARM GAS  /tmp/ccZSOxmT.s 			page 53


 801              		.loc 1 409 0
 802 0020 8560     		str	r5, [r0, #8]
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 803              		.loc 1 410 0
 804 0022 C560     		str	r5, [r0, #12]
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->xRxLock = queueUNLOCKED;
 805              		.loc 1 417 0
 806 0024 0564     		str	r5, [r0, #64]
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 807              		.loc 1 434 0
 808 0026 1030     		adds	r0, r0, #16
 809              	.LVL95:
 810 0028 FFF7FEFF 		bl	vListInitialise
 811              	.LVL96:
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 812              		.loc 1 435 0
 813 002c 04F12400 		add	r0, r4, #36
 814 0030 FFF7FEFF 		bl	vListInitialise
 815              	.LVL97:
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 816              		.loc 1 440 0
 817 0034 2B46     		mov	r3, r5
 818 0036 2A46     		mov	r2, r5
 819 0038 2946     		mov	r1, r5
 820 003a 2046     		mov	r0, r4
 821 003c FFF7FEFF 		bl	xQueueGenericSend
 822              	.LVL98:
 823              	.L98:
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 824              		.loc 1 448 0
 825 0040 2046     		mov	r0, r4
 826 0042 38BD     		pop	{r3, r4, r5, pc}
 827              		.cfi_endproc
 828              	.LFE3:
 830              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 831              		.align	1
 832              		.global	xQueueGenericSendFromISR
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu softvfp
 838              	xQueueGenericSendFromISR:
 839              	.LFB5:
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 840              		.loc 1 1055 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL99:
 845 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 846              	.LCFI15:
 847              		.cfi_def_cfa_offset 24
 848              		.cfi_offset 4, -24
 849              		.cfi_offset 5, -20
 850              		.cfi_offset 6, -16
 851              		.cfi_offset 7, -12
 852              		.cfi_offset 8, -8
ARM GAS  /tmp/ccZSOxmT.s 			page 54


 853              		.cfi_offset 14, -4
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 854              		.loc 1 1055 0
 855 0004 0E46     		mov	r6, r1
 856 0006 9046     		mov	r8, r2
 857 0008 1D46     		mov	r5, r3
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 858              		.loc 1 1060 0
 859 000a 0446     		mov	r4, r0
 860 000c 10B9     		cbnz	r0, .L103
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 861              		.loc 1 1060 0 is_stmt 0 discriminator 1
 862 000e FFF7FEFF 		bl	ulPortSetInterruptMask
 863              	.LVL100:
 864              	.L104:
 865 0012 FEE7     		b	.L104
 866              	.LVL101:
 867              	.L103:
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 868              		.loc 1 1061 0 is_stmt 1
 869 0014 D9B9     		cbnz	r1, .L105
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 870              		.loc 1 1061 0 is_stmt 0 discriminator 2
 871 0016 036C     		ldr	r3, [r0, #64]
 872              	.LVL102:
 873 0018 CBB1     		cbz	r3, .L105
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 874              		.loc 1 1061 0
 875 001a FFF7FEFF 		bl	ulPortSetInterruptMask
 876              	.LVL103:
 877              	.L107:
 878 001e FEE7     		b	.L107
 879              	.LVL104:
 880              	.L113:
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 881              		.loc 1 1157 0 is_stmt 1
 882 0020 04F12400 		add	r0, r4, #36
 883 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 884              	.LVL105:
 885 0028 60B3     		cbz	r0, .L136
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 886              		.loc 1 1161 0
 887 002a B8F1000F 		cmp	r8, #0
 888 002e 29D0     		beq	.L136
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 889              		.loc 1 1163 0
 890 0030 0124     		movs	r4, #1
 891              	.LVL106:
 892 0032 C8F80040 		str	r4, [r8]
 893              	.L111:
 894              	.LVL107:
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 895              		.loc 1 1197 0
 896 0036 3846     		mov	r0, r7
 897 0038 FFF7FEFF 		bl	vPortClearInterruptMask
 898              	.LVL108:
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccZSOxmT.s 			page 55


 899              		.loc 1 1200 0
 900 003c 2046     		mov	r0, r4
 901 003e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 902              	.LVL109:
 903              	.L112:
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 904              		.loc 1 1186 0
 905 0042 A36C     		ldr	r3, [r4, #72]
 906 0044 0133     		adds	r3, r3, #1
 907 0046 A364     		str	r3, [r4, #72]
 908 0048 1CE0     		b	.L136
 909              	.LVL110:
 910              	.L118:
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 911              		.loc 1 1194 0
 912 004a 0024     		movs	r4, #0
 913              	.LVL111:
 914 004c F3E7     		b	.L111
 915              	.LVL112:
 916              	.L105:
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 917              		.loc 1 1062 0
 918 004e 022D     		cmp	r5, #2
 919 0050 02D1     		bne	.L108
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 920              		.loc 1 1062 0 is_stmt 0 discriminator 2
 921 0052 E36B     		ldr	r3, [r4, #60]
 922 0054 012B     		cmp	r3, #1
 923 0056 17D1     		bne	.L132
 924              	.L108:
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 925              		.loc 1 1078 0 is_stmt 1
 926 0058 FFF7FEFF 		bl	vPortValidateInterruptPriority
 927              	.LVL113:
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 928              		.loc 1 1085 0
 929 005c FFF7FEFF 		bl	ulPortSetInterruptMask
 930              	.LVL114:
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 931              		.loc 1 1087 0
 932 0060 A26B     		ldr	r2, [r4, #56]
 933 0062 E36B     		ldr	r3, [r4, #60]
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 934              		.loc 1 1085 0
 935 0064 0746     		mov	r7, r0
 936              	.LVL115:
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 937              		.loc 1 1087 0
 938 0066 9A42     		cmp	r2, r3
 939 0068 01D3     		bcc	.L116
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 940              		.loc 1 1087 0 is_stmt 0 discriminator 1
 941 006a 022D     		cmp	r5, #2
 942 006c EDD1     		bne	.L118
 943              	.L116:
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 944              		.loc 1 1096 0 is_stmt 1
ARM GAS  /tmp/ccZSOxmT.s 			page 56


 945 006e 2A46     		mov	r2, r5
 946 0070 3146     		mov	r1, r6
 947 0072 2046     		mov	r0, r4
 948              	.LVL116:
 949 0074 FFF7FEFF 		bl	prvCopyDataToQueue
 950              	.LVL117:
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 951              		.loc 1 1100 0
 952 0078 A36C     		ldr	r3, [r4, #72]
 953 007a 0133     		adds	r3, r3, #1
 954 007c E1D1     		bne	.L112
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 955              		.loc 1 1155 0
 956 007e 636A     		ldr	r3, [r4, #36]
 957 0080 002B     		cmp	r3, #0
 958 0082 CDD1     		bne	.L113
 959              	.L136:
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 960              		.loc 1 1189 0
 961 0084 0124     		movs	r4, #1
 962              	.LVL118:
 963 0086 D6E7     		b	.L111
 964              	.LVL119:
 965              	.L132:
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 966              		.loc 1 1062 0
 967 0088 FFF7FEFF 		bl	ulPortSetInterruptMask
 968              	.LVL120:
 969              	.L110:
 970 008c FEE7     		b	.L110
 971              		.cfi_endproc
 972              	.LFE5:
 974              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 975              		.align	1
 976              		.global	xQueueGiveFromISR
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu softvfp
 982              	xQueueGiveFromISR:
 983              	.LFB6:
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 984              		.loc 1 1204 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 0
 987              		@ frame_needed = 0, uses_anonymous_args = 0
 988              	.LVL121:
 989 0000 70B5     		push	{r4, r5, r6, lr}
 990              	.LCFI16:
 991              		.cfi_def_cfa_offset 16
 992              		.cfi_offset 4, -16
 993              		.cfi_offset 5, -12
 994              		.cfi_offset 6, -8
 995              		.cfi_offset 14, -4
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 996              		.loc 1 1204 0
 997 0002 0D46     		mov	r5, r1
ARM GAS  /tmp/ccZSOxmT.s 			page 57


1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 998              		.loc 1 1215 0
 999 0004 0446     		mov	r4, r0
 1000 0006 10B9     		cbnz	r0, .L138
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1001              		.loc 1 1215 0 is_stmt 0 discriminator 1
 1002 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 1003              	.LVL122:
 1004              	.L139:
 1005 000c FEE7     		b	.L139
 1006              	.LVL123:
 1007              	.L138:
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1008              		.loc 1 1219 0 is_stmt 1
 1009 000e 036C     		ldr	r3, [r0, #64]
 1010 0010 13B1     		cbz	r3, .L140
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1011              		.loc 1 1219 0 is_stmt 0 discriminator 1
 1012 0012 FFF7FEFF 		bl	ulPortSetInterruptMask
 1013              	.LVL124:
 1014              	.L141:
 1015 0016 FEE7     		b	.L141
 1016              	.LVL125:
 1017              	.L140:
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1018              		.loc 1 1224 0 is_stmt 1
 1019 0018 0368     		ldr	r3, [r0]
 1020 001a 0BB9     		cbnz	r3, .L142
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1021              		.loc 1 1224 0 is_stmt 0 discriminator 2
 1022 001c 4368     		ldr	r3, [r0, #4]
 1023 001e 3BBB     		cbnz	r3, .L159
 1024              	.L142:
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1025              		.loc 1 1240 0 is_stmt 1
 1026 0020 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1027              	.LVL126:
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1028              		.loc 1 1242 0
 1029 0024 FFF7FEFF 		bl	ulPortSetInterruptMask
 1030              	.LVL127:
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1031              		.loc 1 1247 0
 1032 0028 A26B     		ldr	r2, [r4, #56]
 1033 002a E36B     		ldr	r3, [r4, #60]
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1034              		.loc 1 1242 0
 1035 002c 0646     		mov	r6, r0
 1036              	.LVL128:
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1037              		.loc 1 1247 0
 1038 002e 9A42     		cmp	r2, r3
 1039 0030 01D3     		bcc	.L149
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1040              		.loc 1 1355 0
 1041 0032 0024     		movs	r4, #0
 1042              	.LVL129:
ARM GAS  /tmp/ccZSOxmT.s 			page 58


 1043 0034 13E0     		b	.L147
 1044              	.LVL130:
 1045              	.L149:
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1046              		.loc 1 1257 0
 1047 0036 A36B     		ldr	r3, [r4, #56]
 1048 0038 0133     		adds	r3, r3, #1
 1049 003a A363     		str	r3, [r4, #56]
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1050              		.loc 1 1261 0
 1051 003c A36C     		ldr	r3, [r4, #72]
 1052 003e 0133     		adds	r3, r3, #1
 1053 0040 12D1     		bne	.L145
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1054              		.loc 1 1316 0
 1055 0042 636A     		ldr	r3, [r4, #36]
 1056 0044 0BB9     		cbnz	r3, .L146
 1057              	.LVL131:
 1058              	.L161:
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1059              		.loc 1 1350 0
 1060 0046 0124     		movs	r4, #1
 1061              	.LVL132:
 1062 0048 09E0     		b	.L147
 1063              	.LVL133:
 1064              	.L146:
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1065              		.loc 1 1318 0
 1066 004a 04F12400 		add	r0, r4, #36
 1067              	.LVL134:
 1068 004e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1069              	.LVL135:
 1070 0052 0028     		cmp	r0, #0
 1071 0054 F7D0     		beq	.L161
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1072              		.loc 1 1322 0
 1073 0056 002D     		cmp	r5, #0
 1074 0058 F5D0     		beq	.L161
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1075              		.loc 1 1324 0
 1076 005a 0124     		movs	r4, #1
 1077              	.LVL136:
 1078 005c 2C60     		str	r4, [r5]
 1079              	.L147:
 1080              	.LVL137:
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1081              		.loc 1 1358 0
 1082 005e 3046     		mov	r0, r6
 1083 0060 FFF7FEFF 		bl	vPortClearInterruptMask
 1084              	.LVL138:
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1085              		.loc 1 1361 0
 1086 0064 2046     		mov	r0, r4
 1087 0066 70BD     		pop	{r4, r5, r6, pc}
 1088              	.LVL139:
 1089              	.L145:
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccZSOxmT.s 			page 59


 1090              		.loc 1 1347 0
 1091 0068 A36C     		ldr	r3, [r4, #72]
 1092 006a 0133     		adds	r3, r3, #1
 1093 006c A364     		str	r3, [r4, #72]
 1094 006e EAE7     		b	.L161
 1095              	.LVL140:
 1096              	.L159:
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1097              		.loc 1 1224 0
 1098 0070 FFF7FEFF 		bl	ulPortSetInterruptMask
 1099              	.LVL141:
 1100              	.L144:
 1101 0074 FEE7     		b	.L144
 1102              		.cfi_endproc
 1103              	.LFE6:
 1105              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1106              		.align	1
 1107              		.global	xQueueGenericReceive
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1111              		.fpu softvfp
 1113              	xQueueGenericReceive:
 1114              	.LFB7:
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1115              		.loc 1 1365 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 16
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL142:
 1120 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1121              	.LCFI17:
 1122              		.cfi_def_cfa_offset 28
 1123              		.cfi_offset 4, -28
 1124              		.cfi_offset 5, -24
 1125              		.cfi_offset 6, -20
 1126              		.cfi_offset 7, -16
 1127              		.cfi_offset 8, -12
 1128              		.cfi_offset 9, -8
 1129              		.cfi_offset 14, -4
 1130 0004 85B0     		sub	sp, sp, #20
 1131              	.LCFI18:
 1132              		.cfi_def_cfa_offset 48
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1133              		.loc 1 1365 0
 1134 0006 8846     		mov	r8, r1
 1135 0008 0192     		str	r2, [sp, #4]
 1136 000a 9946     		mov	r9, r3
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1137              		.loc 1 1371 0
 1138 000c 0446     		mov	r4, r0
 1139 000e 10B9     		cbnz	r0, .L163
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1140              		.loc 1 1371 0 is_stmt 0 discriminator 1
 1141 0010 FFF7FEFF 		bl	ulPortSetInterruptMask
 1142              	.LVL143:
 1143              	.L164:
ARM GAS  /tmp/ccZSOxmT.s 			page 60


 1144 0014 FEE7     		b	.L164
 1145              	.LVL144:
 1146              	.L163:
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1147              		.loc 1 1372 0 is_stmt 1
 1148 0016 0029     		cmp	r1, #0
 1149 0018 40F08880 		bne	.L165
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1150              		.loc 1 1372 0 is_stmt 0 discriminator 2
 1151 001c 036C     		ldr	r3, [r0, #64]
 1152              	.LVL145:
 1153 001e 002B     		cmp	r3, #0
 1154 0020 00F08480 		beq	.L165
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1155              		.loc 1 1372 0
 1156 0024 FFF7FEFF 		bl	ulPortSetInterruptMask
 1157              	.LVL146:
 1158              	.L167:
 1159 0028 FEE7     		b	.L167
 1160              	.L187:
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1161              		.loc 1 1375 0 is_stmt 1 discriminator 2
 1162 002a 019E     		ldr	r6, [sp, #4]
 1163 002c 002E     		cmp	r6, #0
 1164 002e 00F08380 		beq	.L168
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1165              		.loc 1 1375 0 is_stmt 0
 1166 0032 FFF7FEFF 		bl	ulPortSetInterruptMask
 1167              	.LVL147:
 1168              	.L170:
 1169 0036 FEE7     		b	.L170
 1170              	.LVL148:
 1171              	.L172:
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1172              		.loc 1 1445 0 is_stmt 1
 1173 0038 636A     		ldr	r3, [r4, #36]
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1174              		.loc 1 1441 0
 1175 003a E560     		str	r5, [r4, #12]
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1176              		.loc 1 1445 0
 1177 003c 002B     		cmp	r3, #0
 1178 003e 63D0     		beq	.L175
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1179              		.loc 1 1447 0
 1180 0040 04F12400 		add	r0, r4, #36
 1181 0044 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1182              	.LVL149:
 1183 0048 0028     		cmp	r0, #0
 1184 004a 5DD0     		beq	.L175
 1185 004c 5AE0     		b	.L177
 1186              	.LVL150:
 1187              	.L171:
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1188              		.loc 1 1468 0
 1189 004e 019D     		ldr	r5, [sp, #4]
 1190 0050 1DB9     		cbnz	r5, .L179
ARM GAS  /tmp/ccZSOxmT.s 			page 61


1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1191              		.loc 1 1472 0
 1192 0052 FFF7FEFF 		bl	vPortExitCritical
 1193              	.LVL151:
 1194              	.L198:
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1195              		.loc 1 1545 0
 1196 0056 0020     		movs	r0, #0
 1197 0058 59E0     		b	.L162
 1198              	.LVL152:
 1199              	.L179:
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1200              		.loc 1 1476 0
 1201 005a 16B9     		cbnz	r6, .L180
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1202              		.loc 1 1480 0
 1203 005c 02A8     		add	r0, sp, #8
 1204 005e FFF7FEFF 		bl	vTaskSetTimeOutState
 1205              	.LVL153:
 1206              	.L180:
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1207              		.loc 1 1490 0
 1208 0062 FFF7FEFF 		bl	vPortExitCritical
 1209              	.LVL154:
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1210              		.loc 1 1495 0
 1211 0066 FFF7FEFF 		bl	vTaskSuspendAll
 1212              	.LVL155:
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1213              		.loc 1 1496 0
 1214 006a FFF7FEFF 		bl	vPortEnterCritical
 1215              	.LVL156:
 1216 006e 636C     		ldr	r3, [r4, #68]
 1217 0070 0133     		adds	r3, r3, #1
 1218 0072 08BF     		it	eq
 1219 0074 6764     		streq	r7, [r4, #68]
 1220 0076 A36C     		ldr	r3, [r4, #72]
 1221 0078 0133     		adds	r3, r3, #1
 1222 007a 08BF     		it	eq
 1223 007c A764     		streq	r7, [r4, #72]
 1224 007e FFF7FEFF 		bl	vPortExitCritical
 1225              	.LVL157:
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1226              		.loc 1 1499 0
 1227 0082 01A9     		add	r1, sp, #4
 1228 0084 02A8     		add	r0, sp, #8
 1229 0086 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1230              	.LVL158:
 1231 008a 0028     		cmp	r0, #0
 1232 008c 48D1     		bne	.L183
 1233              	.LVL159:
 1234              	.LBB8:
 1235              	.LBB9:
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1236              		.loc 1 1995 0
 1237 008e FFF7FEFF 		bl	vPortEnterCritical
 1238              	.LVL160:
ARM GAS  /tmp/ccZSOxmT.s 			page 62


1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1239              		.loc 1 1997 0
 1240 0092 A56B     		ldr	r5, [r4, #56]
 1241              	.LVL161:
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1242              		.loc 1 2006 0
 1243 0094 FFF7FEFF 		bl	vPortExitCritical
 1244              	.LVL162:
 1245              	.LBE9:
 1246              	.LBE8:
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1247              		.loc 1 1501 0
 1248 0098 002D     		cmp	r5, #0
 1249 009a 3BD1     		bne	.L184
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1250              		.loc 1 1507 0
 1251 009c 2368     		ldr	r3, [r4]
 1252 009e 33B9     		cbnz	r3, .L185
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1253              		.loc 1 1509 0
 1254 00a0 FFF7FEFF 		bl	vPortEnterCritical
 1255              	.LVL163:
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1256              		.loc 1 1511 0
 1257 00a4 6068     		ldr	r0, [r4, #4]
 1258 00a6 FFF7FEFF 		bl	vTaskPriorityInherit
 1259              	.LVL164:
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1260              		.loc 1 1513 0
 1261 00aa FFF7FEFF 		bl	vPortExitCritical
 1262              	.LVL165:
 1263              	.L185:
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1264              		.loc 1 1522 0
 1265 00ae 0199     		ldr	r1, [sp, #4]
 1266 00b0 04F12400 		add	r0, r4, #36
 1267 00b4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1268              	.LVL166:
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1269              		.loc 1 1523 0
 1270 00b8 2046     		mov	r0, r4
 1271 00ba FFF7FEFF 		bl	prvUnlockQueue
 1272              	.LVL167:
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1273              		.loc 1 1524 0
 1274 00be FFF7FEFF 		bl	xTaskResumeAll
 1275              	.LVL168:
 1276 00c2 08B9     		cbnz	r0, .L186
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1277              		.loc 1 1526 0
 1278 00c4 FFF7FEFF 		bl	vPortYield
 1279              	.LVL169:
 1280              	.L186:
 1281 00c8 0126     		movs	r6, #1
 1282              	.LVL170:
 1283              	.L188:
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  /tmp/ccZSOxmT.s 			page 63


 1284              		.loc 1 1385 0
 1285 00ca FFF7FEFF 		bl	vPortEnterCritical
 1286              	.LVL171:
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1287              		.loc 1 1389 0
 1288 00ce A36B     		ldr	r3, [r4, #56]
 1289 00d0 002B     		cmp	r3, #0
 1290 00d2 BCD0     		beq	.L171
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1291              		.loc 1 1395 0
 1292 00d4 4146     		mov	r1, r8
 1293 00d6 2046     		mov	r0, r4
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1294              		.loc 1 1393 0
 1295 00d8 E568     		ldr	r5, [r4, #12]
 1296              	.LVL172:
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1297              		.loc 1 1395 0
 1298 00da FFF7FEFF 		bl	prvCopyDataFromQueue
 1299              	.LVL173:
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1300              		.loc 1 1397 0
 1301 00de B9F1000F 		cmp	r9, #0
 1302 00e2 A9D1     		bne	.L172
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1303              		.loc 1 1402 0
 1304 00e4 A36B     		ldr	r3, [r4, #56]
 1305 00e6 013B     		subs	r3, r3, #1
 1306 00e8 A363     		str	r3, [r4, #56]
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1307              		.loc 1 1406 0
 1308 00ea 2368     		ldr	r3, [r4]
 1309 00ec 13B9     		cbnz	r3, .L173
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1310              		.loc 1 1410 0
 1311 00ee FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1312              	.LVL174:
 1313 00f2 6060     		str	r0, [r4, #4]
 1314              	.L173:
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1315              		.loc 1 1419 0
 1316 00f4 2369     		ldr	r3, [r4, #16]
 1317 00f6 3BB1     		cbz	r3, .L175
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1318              		.loc 1 1421 0
 1319 00f8 04F11000 		add	r0, r4, #16
 1320 00fc FFF7FEFF 		bl	xTaskRemoveFromEventList
 1321              	.LVL175:
 1322 0100 0128     		cmp	r0, #1
 1323 0102 01D1     		bne	.L175
 1324              	.L177:
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1325              		.loc 1 1423 0
 1326 0104 FFF7FEFF 		bl	vPortYield
 1327              	.LVL176:
 1328              	.L175:
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
ARM GAS  /tmp/ccZSOxmT.s 			page 64


 1329              		.loc 1 1463 0
 1330 0108 FFF7FEFF 		bl	vPortExitCritical
 1331              	.LVL177:
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1332              		.loc 1 1464 0
 1333 010c 0120     		movs	r0, #1
 1334              	.LVL178:
 1335              	.L162:
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1336              		.loc 1 1548 0
 1337 010e 05B0     		add	sp, sp, #20
 1338              	.LCFI19:
 1339              		.cfi_remember_state
 1340              		.cfi_def_cfa_offset 28
 1341              		@ sp needed
 1342 0110 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1343              	.LVL179:
 1344              	.L184:
 1345              	.LCFI20:
 1346              		.cfi_restore_state
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1347              		.loc 1 1536 0
 1348 0114 2046     		mov	r0, r4
 1349 0116 FFF7FEFF 		bl	prvUnlockQueue
 1350              	.LVL180:
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1351              		.loc 1 1537 0
 1352 011a FFF7FEFF 		bl	xTaskResumeAll
 1353              	.LVL181:
 1354 011e D3E7     		b	.L186
 1355              	.L183:
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1356              		.loc 1 1542 0
 1357 0120 2046     		mov	r0, r4
 1358 0122 FFF7FEFF 		bl	prvUnlockQueue
 1359              	.LVL182:
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FAILED( pxQueue );
 1360              		.loc 1 1543 0
 1361 0126 FFF7FEFF 		bl	xTaskResumeAll
 1362              	.LVL183:
 1363 012a 94E7     		b	.L198
 1364              	.LVL184:
 1365              	.L165:
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1366              		.loc 1 1375 0
 1367 012c FFF7FEFF 		bl	xTaskGetSchedulerState
 1368              	.LVL185:
 1369 0130 0028     		cmp	r0, #0
 1370 0132 3FF47AAF 		beq	.L187
 1371 0136 0026     		movs	r6, #0
 1372              	.L168:
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1373              		.loc 1 1496 0
 1374 0138 0027     		movs	r7, #0
 1375 013a C6E7     		b	.L188
 1376              		.cfi_endproc
 1377              	.LFE7:
ARM GAS  /tmp/ccZSOxmT.s 			page 65


 1379              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1380              		.align	1
 1381              		.global	xQueueReceiveFromISR
 1382              		.syntax unified
 1383              		.thumb
 1384              		.thumb_func
 1385              		.fpu softvfp
 1387              	xQueueReceiveFromISR:
 1388              	.LFB8:
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1389              		.loc 1 1552 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 0
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393              	.LVL186:
 1394 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1395              	.LCFI21:
 1396              		.cfi_def_cfa_offset 24
 1397              		.cfi_offset 3, -24
 1398              		.cfi_offset 4, -20
 1399              		.cfi_offset 5, -16
 1400              		.cfi_offset 6, -12
 1401              		.cfi_offset 7, -8
 1402              		.cfi_offset 14, -4
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1403              		.loc 1 1552 0
 1404 0002 0E46     		mov	r6, r1
 1405 0004 1746     		mov	r7, r2
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1406              		.loc 1 1557 0
 1407 0006 0446     		mov	r4, r0
 1408 0008 10B9     		cbnz	r0, .L200
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1409              		.loc 1 1557 0 is_stmt 0 discriminator 1
 1410 000a FFF7FEFF 		bl	ulPortSetInterruptMask
 1411              	.LVL187:
 1412              	.L201:
 1413 000e FEE7     		b	.L201
 1414              	.LVL188:
 1415              	.L200:
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1416              		.loc 1 1558 0 is_stmt 1
 1417 0010 29BB     		cbnz	r1, .L202
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1418              		.loc 1 1558 0 is_stmt 0 discriminator 2
 1419 0012 036C     		ldr	r3, [r0, #64]
 1420 0014 1BB3     		cbz	r3, .L202
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1421              		.loc 1 1558 0
 1422 0016 FFF7FEFF 		bl	ulPortSetInterruptMask
 1423              	.LVL189:
 1424              	.L204:
 1425 001a FEE7     		b	.L204
 1426              	.LVL190:
 1427              	.L209:
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
 1428              		.loc 1 1583 0 is_stmt 1
ARM GAS  /tmp/ccZSOxmT.s 			page 66


 1429 001c 3146     		mov	r1, r6
 1430 001e 2046     		mov	r0, r4
 1431              	.LVL191:
 1432 0020 FFF7FEFF 		bl	prvCopyDataFromQueue
 1433              	.LVL192:
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1434              		.loc 1 1584 0
 1435 0024 A36B     		ldr	r3, [r4, #56]
 1436 0026 013B     		subs	r3, r3, #1
 1437 0028 A363     		str	r3, [r4, #56]
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1438              		.loc 1 1590 0
 1439 002a 636C     		ldr	r3, [r4, #68]
 1440 002c 0133     		adds	r3, r3, #1
 1441 002e 12D1     		bne	.L205
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1442              		.loc 1 1592 0
 1443 0030 2369     		ldr	r3, [r4, #16]
 1444 0032 0BB9     		cbnz	r3, .L206
 1445              	.L221:
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1446              		.loc 1 1624 0
 1447 0034 0124     		movs	r4, #1
 1448              	.LVL193:
 1449 0036 09E0     		b	.L207
 1450              	.LVL194:
 1451              	.L206:
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1452              		.loc 1 1594 0
 1453 0038 04F11000 		add	r0, r4, #16
 1454 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1455              	.LVL195:
 1456 0040 0028     		cmp	r0, #0
 1457 0042 F7D0     		beq	.L221
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1458              		.loc 1 1598 0
 1459 0044 002F     		cmp	r7, #0
 1460 0046 F5D0     		beq	.L221
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1461              		.loc 1 1600 0
 1462 0048 0124     		movs	r4, #1
 1463              	.LVL196:
 1464 004a 3C60     		str	r4, [r7]
 1465              	.L207:
 1466              	.LVL197:
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1467              		.loc 1 1632 0
 1468 004c 2846     		mov	r0, r5
 1469 004e FFF7FEFF 		bl	vPortClearInterruptMask
 1470              	.LVL198:
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1471              		.loc 1 1635 0
 1472 0052 2046     		mov	r0, r4
 1473 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1474              	.LVL199:
 1475              	.L205:
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccZSOxmT.s 			page 67


 1476              		.loc 1 1621 0
 1477 0056 636C     		ldr	r3, [r4, #68]
 1478 0058 0133     		adds	r3, r3, #1
 1479 005a 6364     		str	r3, [r4, #68]
 1480 005c EAE7     		b	.L221
 1481              	.LVL200:
 1482              	.L202:
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1483              		.loc 1 1574 0
 1484 005e FFF7FEFF 		bl	vPortValidateInterruptPriority
 1485              	.LVL201:
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1486              		.loc 1 1576 0
 1487 0062 FFF7FEFF 		bl	ulPortSetInterruptMask
 1488              	.LVL202:
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1489              		.loc 1 1579 0
 1490 0066 A36B     		ldr	r3, [r4, #56]
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1491              		.loc 1 1576 0
 1492 0068 0546     		mov	r5, r0
 1493              	.LVL203:
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1494              		.loc 1 1579 0
 1495 006a 002B     		cmp	r3, #0
 1496 006c D6D1     		bne	.L209
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1497              		.loc 1 1628 0
 1498 006e 1C46     		mov	r4, r3
 1499              	.LVL204:
 1500 0070 ECE7     		b	.L207
 1501              		.cfi_endproc
 1502              	.LFE8:
 1504              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1505              		.align	1
 1506              		.global	xQueuePeekFromISR
 1507              		.syntax unified
 1508              		.thumb
 1509              		.thumb_func
 1510              		.fpu softvfp
 1512              	xQueuePeekFromISR:
 1513              	.LFB9:
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1514              		.loc 1 1639 0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              	.LVL205:
 1519 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1520              	.LCFI22:
 1521              		.cfi_def_cfa_offset 24
 1522              		.cfi_offset 3, -24
 1523              		.cfi_offset 4, -20
 1524              		.cfi_offset 5, -16
 1525              		.cfi_offset 6, -12
 1526              		.cfi_offset 7, -8
 1527              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZSOxmT.s 			page 68


1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1528              		.loc 1 1639 0
 1529 0002 0D46     		mov	r5, r1
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1530              		.loc 1 1645 0
 1531 0004 0446     		mov	r4, r0
 1532 0006 10B9     		cbnz	r0, .L223
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1533              		.loc 1 1645 0 is_stmt 0 discriminator 1
 1534 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 1535              	.LVL206:
 1536              	.L224:
 1537 000c FEE7     		b	.L224
 1538              	.LVL207:
 1539              	.L223:
 1540 000e 036C     		ldr	r3, [r0, #64]
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1541              		.loc 1 1646 0 is_stmt 1
 1542 0010 41B9     		cbnz	r1, .L225
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1543              		.loc 1 1646 0 is_stmt 0 discriminator 2
 1544 0012 13B1     		cbz	r3, .L230
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1545              		.loc 1 1646 0
 1546 0014 FFF7FEFF 		bl	ulPortSetInterruptMask
 1547              	.LVL208:
 1548              	.L227:
 1549 0018 FEE7     		b	.L227
 1550              	.LVL209:
 1551              	.L230:
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1552              		.loc 1 1647 0 is_stmt 1 discriminator 1
 1553 001a FFF7FEFF 		bl	ulPortSetInterruptMask
 1554              	.LVL210:
 1555              	.L228:
 1556 001e FEE7     		b	.L228
 1557              	.LVL211:
 1558              	.L232:
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 1559              		.loc 1 1682 0
 1560 0020 1C46     		mov	r4, r3
 1561              	.LVL212:
 1562 0022 10E0     		b	.L229
 1563              	.LVL213:
 1564              	.L225:
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1565              		.loc 1 1647 0
 1566 0024 002B     		cmp	r3, #0
 1567 0026 F8D0     		beq	.L230
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1568              		.loc 1 1663 0
 1569 0028 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1570              	.LVL214:
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1571              		.loc 1 1665 0
 1572 002c FFF7FEFF 		bl	ulPortSetInterruptMask
 1573              	.LVL215:
ARM GAS  /tmp/ccZSOxmT.s 			page 69


1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1574              		.loc 1 1668 0
 1575 0030 A36B     		ldr	r3, [r4, #56]
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1576              		.loc 1 1665 0
 1577 0032 0646     		mov	r6, r0
 1578              	.LVL216:
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1579              		.loc 1 1668 0
 1580 0034 002B     		cmp	r3, #0
 1581 0036 F3D0     		beq	.L232
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1582              		.loc 1 1674 0
 1583 0038 E768     		ldr	r7, [r4, #12]
 1584              	.LVL217:
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1585              		.loc 1 1675 0
 1586 003a 2046     		mov	r0, r4
 1587              	.LVL218:
 1588 003c 2946     		mov	r1, r5
 1589 003e FFF7FEFF 		bl	prvCopyDataFromQueue
 1590              	.LVL219:
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1591              		.loc 1 1676 0
 1592 0042 E760     		str	r7, [r4, #12]
 1593              	.LVL220:
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1594              		.loc 1 1678 0
 1595 0044 0124     		movs	r4, #1
 1596              	.LVL221:
 1597              	.L229:
1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1598              		.loc 1 1686 0
 1599 0046 3046     		mov	r0, r6
 1600 0048 FFF7FEFF 		bl	vPortClearInterruptMask
 1601              	.LVL222:
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1602              		.loc 1 1689 0
 1603 004c 2046     		mov	r0, r4
 1604 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1605              		.cfi_endproc
 1606              	.LFE9:
 1608              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 1609              		.align	1
 1610              		.global	uxQueueMessagesWaiting
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu softvfp
 1616              	uxQueueMessagesWaiting:
 1617              	.LFB10:
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1618              		.loc 1 1693 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622              	.LVL223:
ARM GAS  /tmp/ccZSOxmT.s 			page 70


 1623 0000 10B5     		push	{r4, lr}
 1624              	.LCFI23:
 1625              		.cfi_def_cfa_offset 8
 1626              		.cfi_offset 4, -8
 1627              		.cfi_offset 14, -4
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1628              		.loc 1 1696 0
 1629 0002 0446     		mov	r4, r0
 1630 0004 10B9     		cbnz	r0, .L241
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1631              		.loc 1 1696 0 is_stmt 0 discriminator 1
 1632 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 1633              	.LVL224:
 1634              	.L242:
 1635 000a FEE7     		b	.L242
 1636              	.LVL225:
 1637              	.L241:
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1638              		.loc 1 1698 0 is_stmt 1
 1639 000c FFF7FEFF 		bl	vPortEnterCritical
 1640              	.LVL226:
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1641              		.loc 1 1700 0
 1642 0010 A46B     		ldr	r4, [r4, #56]
 1643              	.LVL227:
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1644              		.loc 1 1702 0
 1645 0012 FFF7FEFF 		bl	vPortExitCritical
 1646              	.LVL228:
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1647              		.loc 1 1705 0
 1648 0016 2046     		mov	r0, r4
 1649 0018 10BD     		pop	{r4, pc}
 1650              		.cfi_endproc
 1651              	.LFE10:
 1653              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 1654              		.align	1
 1655              		.global	uxQueueSpacesAvailable
 1656              		.syntax unified
 1657              		.thumb
 1658              		.thumb_func
 1659              		.fpu softvfp
 1661              	uxQueueSpacesAvailable:
 1662              	.LFB11:
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1663              		.loc 1 1709 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 0
 1666              		@ frame_needed = 0, uses_anonymous_args = 0
 1667              	.LVL229:
 1668 0000 38B5     		push	{r3, r4, r5, lr}
 1669              	.LCFI24:
 1670              		.cfi_def_cfa_offset 16
 1671              		.cfi_offset 3, -16
 1672              		.cfi_offset 4, -12
 1673              		.cfi_offset 5, -8
 1674              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZSOxmT.s 			page 71


1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1675              		.loc 1 1714 0
 1676 0002 0546     		mov	r5, r0
 1677 0004 10B9     		cbnz	r0, .L244
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1678              		.loc 1 1714 0 is_stmt 0 discriminator 1
 1679 0006 FFF7FEFF 		bl	ulPortSetInterruptMask
 1680              	.LVL230:
 1681              	.L245:
 1682 000a FEE7     		b	.L245
 1683              	.LVL231:
 1684              	.L244:
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1685              		.loc 1 1716 0 is_stmt 1
 1686 000c FFF7FEFF 		bl	vPortEnterCritical
 1687              	.LVL232:
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1688              		.loc 1 1718 0
 1689 0010 A86B     		ldr	r0, [r5, #56]
 1690 0012 EC6B     		ldr	r4, [r5, #60]
 1691 0014 241A     		subs	r4, r4, r0
 1692              	.LVL233:
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1693              		.loc 1 1720 0
 1694 0016 FFF7FEFF 		bl	vPortExitCritical
 1695              	.LVL234:
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1696              		.loc 1 1723 0
 1697 001a 2046     		mov	r0, r4
 1698 001c 38BD     		pop	{r3, r4, r5, pc}
 1699              		.cfi_endproc
 1700              	.LFE11:
 1702              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 1703              		.align	1
 1704              		.global	uxQueueMessagesWaitingFromISR
 1705              		.syntax unified
 1706              		.thumb
 1707              		.thumb_func
 1708              		.fpu softvfp
 1710              	uxQueueMessagesWaitingFromISR:
 1711              	.LFB12:
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 1712              		.loc 1 1727 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              	.LVL235:
 1717 0000 08B5     		push	{r3, lr}
 1718              	.LCFI25:
 1719              		.cfi_def_cfa_offset 8
 1720              		.cfi_offset 3, -8
 1721              		.cfi_offset 14, -4
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1722              		.loc 1 1730 0
 1723 0002 10B9     		cbnz	r0, .L247
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1724              		.loc 1 1730 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccZSOxmT.s 			page 72


 1725 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 1726              	.LVL236:
 1727              	.L248:
 1728 0008 FEE7     		b	.L248
 1729              	.LVL237:
 1730              	.L247:
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1731              		.loc 1 1732 0 is_stmt 1
 1732 000a 806B     		ldr	r0, [r0, #56]
 1733              	.LVL238:
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1734              		.loc 1 1735 0
 1735 000c 08BD     		pop	{r3, pc}
 1736              		.cfi_endproc
 1737              	.LFE12:
 1739              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 1740              		.align	1
 1741              		.global	xQueueIsQueueEmptyFromISR
 1742              		.syntax unified
 1743              		.thumb
 1744              		.thumb_func
 1745              		.fpu softvfp
 1747              	xQueueIsQueueEmptyFromISR:
 1748              	.LFB18:
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1749              		.loc 1 2013 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              	.LVL239:
 1754 0000 08B5     		push	{r3, lr}
 1755              	.LCFI26:
 1756              		.cfi_def_cfa_offset 8
 1757              		.cfi_offset 3, -8
 1758              		.cfi_offset 14, -4
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 1759              		.loc 1 2016 0
 1760 0002 10B9     		cbnz	r0, .L250
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 1761              		.loc 1 2016 0 is_stmt 0 discriminator 1
 1762 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 1763              	.LVL240:
 1764              	.L251:
 1765 0008 FEE7     		b	.L251
 1766              	.LVL241:
 1767              	.L250:
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1768              		.loc 1 2017 0 is_stmt 1
 1769 000a 806B     		ldr	r0, [r0, #56]
 1770              	.LVL242:
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1771              		.loc 1 2027 0
 1772 000c B0FA80F0 		clz	r0, r0
 1773              	.LVL243:
 1774 0010 4009     		lsrs	r0, r0, #5
 1775 0012 08BD     		pop	{r3, pc}
 1776              		.cfi_endproc
ARM GAS  /tmp/ccZSOxmT.s 			page 73


 1777              	.LFE18:
 1779              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 1780              		.align	1
 1781              		.global	xQueueIsQueueFullFromISR
 1782              		.syntax unified
 1783              		.thumb
 1784              		.thumb_func
 1785              		.fpu softvfp
 1787              	xQueueIsQueueFullFromISR:
 1788              	.LFB20:
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 1789              		.loc 1 2052 0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 0
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793              	.LVL244:
 1794 0000 08B5     		push	{r3, lr}
 1795              	.LCFI27:
 1796              		.cfi_def_cfa_offset 8
 1797              		.cfi_offset 3, -8
 1798              		.cfi_offset 14, -4
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 1799              		.loc 1 2055 0
 1800 0002 10B9     		cbnz	r0, .L253
 1801              		.loc 1 2055 0 is_stmt 0 discriminator 1
 1802 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 1803              	.LVL245:
 1804              	.L254:
 1805 0008 FEE7     		b	.L254
 1806              	.LVL246:
 1807              	.L253:
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 1808              		.loc 1 2056 0 is_stmt 1
 1809 000a 836B     		ldr	r3, [r0, #56]
 1810              	.LVL247:
 1811 000c C06B     		ldr	r0, [r0, #60]
 1812              	.LVL248:
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 1813              		.loc 1 2066 0
 1814 000e C31A     		subs	r3, r0, r3
ARM GAS  /tmp/ccZSOxmT.s 			page 74


 1815              	.LVL249:
 1816 0010 5842     		rsbs	r0, r3, #0
 1817 0012 5841     		adcs	r0, r0, r3
 1818 0014 08BD     		pop	{r3, pc}
 1819              		.cfi_endproc
 1820              	.LFE20:
 1822              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 1823              		.align	1
 1824              		.global	vQueueAddToRegistry
 1825              		.syntax unified
 1826              		.thumb
 1827              		.thumb_func
 1828              		.fpu softvfp
 1830              	vQueueAddToRegistry:
 1831              	.LFB21:
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
ARM GAS  /tmp/ccZSOxmT.s 			page 75


2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
ARM GAS  /tmp/ccZSOxmT.s 			page 76


2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  /tmp/ccZSOxmT.s 			page 77


2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  /tmp/ccZSOxmT.s 			page 78


2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  /tmp/ccZSOxmT.s 			page 79


2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1832              		.loc 1 2347 0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836              	.LVL250:
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 1837              		.loc 1 2352 0
 1838 0000 0023     		movs	r3, #0
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
 1839              		.loc 1 2347 0
 1840 0002 30B5     		push	{r4, r5, lr}
 1841              	.LCFI28:
 1842              		.cfi_def_cfa_offset 12
 1843              		.cfi_offset 4, -12
 1844              		.cfi_offset 5, -8
 1845              		.cfi_offset 14, -4
2353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 1846              		.loc 1 2354 0
 1847 0004 064A     		ldr	r2, .L260
 1848              	.LVL251:
 1849              	.L258:
 1850 0006 52F83350 		ldr	r5, [r2, r3, lsl #3]
 1851 000a 02EBC304 		add	r4, r2, r3, lsl #3
 1852 000e 1DB9     		cbnz	r5, .L256
2355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 1853              		.loc 1 2357 0
 1854 0010 42F83310 		str	r1, [r2, r3, lsl #3]
2358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 1855              		.loc 1 2358 0
 1856 0014 6060     		str	r0, [r4, #4]
2359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 1857              		.loc 1 2361 0
 1858 0016 30BD     		pop	{r4, r5, pc}
 1859              	.L256:
2352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1860              		.loc 1 2352 0 discriminator 2
 1861 0018 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccZSOxmT.s 			page 80


 1862              	.LVL252:
 1863 001a 082B     		cmp	r3, #8
 1864 001c F3D1     		bne	.L258
 1865 001e 30BD     		pop	{r4, r5, pc}
 1866              	.L261:
 1867              		.align	2
 1868              	.L260:
 1869 0020 00000000 		.word	xQueueRegistry
 1870              		.cfi_endproc
 1871              	.LFE21:
 1873              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 1874              		.align	1
 1875              		.global	vQueueUnregisterQueue
 1876              		.syntax unified
 1877              		.thumb
 1878              		.thumb_func
 1879              		.fpu softvfp
 1881              	vQueueUnregisterQueue:
 1882              	.LFB22:
2362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 1883              		.loc 1 2376 0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 1887              		@ link register save eliminated.
 1888              	.LVL253:
2377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 1889              		.loc 1 2381 0
 1890 0000 0023     		movs	r3, #0
2382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 1891              		.loc 1 2383 0
 1892 0002 074A     		ldr	r2, .L267
 1893              	.LVL254:
 1894              	.L265:
 1895 0004 02EBC301 		add	r1, r2, r3, lsl #3
 1896 0008 4968     		ldr	r1, [r1, #4]
 1897 000a 8142     		cmp	r1, r0
 1898 000c 03D1     		bne	.L263
ARM GAS  /tmp/ccZSOxmT.s 			page 81


2384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 1899              		.loc 1 2386 0
 1900 000e 0021     		movs	r1, #0
 1901 0010 42F83310 		str	r1, [r2, r3, lsl #3]
2387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 1902              		.loc 1 2387 0
 1903 0014 7047     		bx	lr
 1904              	.L263:
2381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1905              		.loc 1 2381 0 discriminator 2
 1906 0016 0133     		adds	r3, r3, #1
 1907              	.LVL255:
 1908 0018 082B     		cmp	r3, #8
 1909 001a F3D1     		bne	.L265
 1910 001c 7047     		bx	lr
 1911              	.L268:
 1912 001e 00BF     		.align	2
 1913              	.L267:
 1914 0020 00000000 		.word	xQueueRegistry
 1915              		.cfi_endproc
 1916              	.LFE22:
 1918              		.section	.text.vQueueDelete,"ax",%progbits
 1919              		.align	1
 1920              		.global	vQueueDelete
 1921              		.syntax unified
 1922              		.thumb
 1923              		.thumb_func
 1924              		.fpu softvfp
 1926              	vQueueDelete:
 1927              	.LFB13:
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1928              		.loc 1 1739 0
 1929              		.cfi_startproc
 1930              		@ args = 0, pretend = 0, frame = 0
 1931              		@ frame_needed = 0, uses_anonymous_args = 0
 1932              	.LVL256:
 1933 0000 10B5     		push	{r4, lr}
 1934              	.LCFI29:
 1935              		.cfi_def_cfa_offset 8
 1936              		.cfi_offset 4, -8
 1937              		.cfi_offset 14, -4
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1938              		.loc 1 1742 0
 1939 0002 10B9     		cbnz	r0, .L270
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1940              		.loc 1 1742 0 is_stmt 0 discriminator 1
 1941 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 1942              	.LVL257:
 1943              	.L271:
 1944 0008 FEE7     		b	.L271
 1945              	.LVL258:
 1946              	.L270:
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1947              		.loc 1 1747 0 is_stmt 1
 1948 000a FFF7FEFF 		bl	vQueueUnregisterQueue
ARM GAS  /tmp/ccZSOxmT.s 			page 82


 1949              	.LVL259:
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1950              		.loc 1 1751 0
 1951 000e BDE81040 		pop	{r4, lr}
 1952              	.LCFI30:
 1953              		.cfi_restore 14
 1954              		.cfi_restore 4
 1955              		.cfi_def_cfa_offset 0
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 1956              		.loc 1 1750 0
 1957 0012 FFF7FEBF 		b	vPortFree
 1958              	.LVL260:
 1959              		.cfi_endproc
 1960              	.LFE13:
 1962              		.comm	xQueueRegistry,64,4
 1963              		.text
 1964              	.Letext0:
 1965              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1966              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_default_types.h"
 1967              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 1968              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 1969              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 1970              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 1971              		.file 8 "Inc/FreeRTOSConfig.h"
 1972              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 1973              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1974              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1975              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1976              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccZSOxmT.s 			page 83


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccZSOxmT.s:16     .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccZSOxmT.s:22     .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccZSOxmT.s:136    .text.unlikely.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccZSOxmT.s:142    .text.unlikely.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccZSOxmT.s:203    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccZSOxmT.s:209    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccZSOxmT.s:313    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccZSOxmT.s:320    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccZSOxmT.s:410    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccZSOxmT.s:417    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccZSOxmT.s:499    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccZSOxmT.s:506    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccZSOxmT.s:754    .text.xQueueCreateMutex:0000000000000000 $t
     /tmp/ccZSOxmT.s:761    .text.xQueueCreateMutex:0000000000000000 xQueueCreateMutex
     /tmp/ccZSOxmT.s:831    .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:838    .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccZSOxmT.s:975    .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:982    .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccZSOxmT.s:1106   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/ccZSOxmT.s:1113   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/ccZSOxmT.s:1380   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:1387   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccZSOxmT.s:1505   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:1512   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccZSOxmT.s:1609   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccZSOxmT.s:1616   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccZSOxmT.s:1654   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccZSOxmT.s:1661   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccZSOxmT.s:1703   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:1710   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccZSOxmT.s:1740   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:1747   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccZSOxmT.s:1780   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccZSOxmT.s:1787   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccZSOxmT.s:1823   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccZSOxmT.s:1830   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccZSOxmT.s:1869   .text.vQueueAddToRegistry:0000000000000020 $d
                            *COM*:0000000000000040 xQueueRegistry
     /tmp/ccZSOxmT.s:1874   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccZSOxmT.s:1881   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccZSOxmT.s:1914   .text.vQueueUnregisterQueue:0000000000000020 $d
     /tmp/ccZSOxmT.s:1919   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccZSOxmT.s:1926   .text.vQueueDelete:0000000000000000 vQueueDelete
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xTaskPriorityDisinherit
memcpy
vPortEnterCritical
vPortExitCritical
xTaskRemoveFromEventList
vTaskMissedYield
ulPortSetInterruptMask
vPortYield
vListInitialise
ARM GAS  /tmp/ccZSOxmT.s 			page 84


pvPortMalloc
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetSchedulerState
vPortClearInterruptMask
vPortValidateInterruptPriority
vTaskPriorityInherit
pvTaskIncrementMutexHeldCount
vPortFree
