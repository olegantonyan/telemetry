ARM GAS  /tmp/ccVDpVa6.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.StartDefaultTask,"ax",%progbits
  16              		.align	1
  17              		.global	StartDefaultTask
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	StartDefaultTask:
  24              	.LFB71:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V.
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  31:Src/main.c    ****   *    this license.
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
ARM GAS  /tmp/ccVDpVa6.s 			page 2


  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f1xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** #include "usb_device.h"
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN Includes */
  55:Src/main.c    **** #include "usbd_cdc_if.h"
  56:Src/main.c    **** #include "serial_log/serial_log.h"
  57:Src/main.c    **** #include "rf/rf.h"
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** CRC_HandleTypeDef hcrc;
  62:Src/main.c    **** 
  63:Src/main.c    **** IWDG_HandleTypeDef hiwdg;
  64:Src/main.c    **** 
  65:Src/main.c    **** SPI_HandleTypeDef hspi1;
  66:Src/main.c    **** 
  67:Src/main.c    **** osThreadId defaultTaskHandle;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_CRC_Init(void);
  78:Src/main.c    **** static void MX_IWDG_Init(void);
  79:Src/main.c    **** static void MX_SPI1_Init(void);
  80:Src/main.c    **** void StartDefaultTask(void const * argument);
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE BEGIN PFP */
  83:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE END PFP */
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE BEGIN 0 */
  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END 0 */
  90:Src/main.c    **** 
ARM GAS  /tmp/ccVDpVa6.s 			page 3


  91:Src/main.c    **** int main(void)
  92:Src/main.c    **** {
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE BEGIN 1 */
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE END 1 */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 101:Src/main.c    ****   HAL_Init();
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Configure the system clock */
 108:Src/main.c    ****   SystemClock_Config();
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE END SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* Initialize all configured peripherals */
 115:Src/main.c    ****   MX_GPIO_Init();
 116:Src/main.c    ****   MX_CRC_Init();
 117:Src/main.c    ****   MX_IWDG_Init();
 118:Src/main.c    ****   MX_SPI1_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END 2 */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 125:Src/main.c    ****   /* add mutexes, ... */
 126:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 129:Src/main.c    ****   /* add semaphores, ... */
 130:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 133:Src/main.c    ****   /* start timers, add new ones, ... */
 134:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* Create the thread(s) */
 137:Src/main.c    ****   /* definition and creation of defaultTask */
 138:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 139:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 142:Src/main.c    ****   /* add threads, ... */
 143:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 146:Src/main.c    ****   /* add queues, ... */
 147:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
ARM GAS  /tmp/ccVDpVa6.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Start scheduler */
 151:Src/main.c    ****   osKernelStart();
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* Infinite loop */
 156:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 157:Src/main.c    ****   while (1)
 158:Src/main.c    ****   {
 159:Src/main.c    ****   /* USER CODE END WHILE */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* USER CODE BEGIN 3 */
 162:Src/main.c    **** 
 163:Src/main.c    ****   }
 164:Src/main.c    ****   /* USER CODE END 3 */
 165:Src/main.c    **** 
 166:Src/main.c    **** }
 167:Src/main.c    **** 
 168:Src/main.c    **** /** System Clock Configuration
 169:Src/main.c    **** */
 170:Src/main.c    **** void SystemClock_Config(void)
 171:Src/main.c    **** {
 172:Src/main.c    **** 
 173:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 174:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 175:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 176:Src/main.c    **** 
 177:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 178:Src/main.c    ****     */
 179:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 180:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 181:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 182:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 183:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 186:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 187:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188:Src/main.c    ****   {
 189:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 190:Src/main.c    ****   }
 191:Src/main.c    **** 
 192:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 193:Src/main.c    ****     */
 194:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 195:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 196:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 197:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 198:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 199:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 200:Src/main.c    **** 
 201:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 202:Src/main.c    ****   {
 203:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 204:Src/main.c    ****   }
ARM GAS  /tmp/ccVDpVa6.s 			page 5


 205:Src/main.c    **** 
 206:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 207:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 208:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 211:Src/main.c    ****   }
 212:Src/main.c    **** 
 213:Src/main.c    ****     /**Configure the Systick interrupt time
 214:Src/main.c    ****     */
 215:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 216:Src/main.c    **** 
 217:Src/main.c    ****     /**Configure the Systick
 218:Src/main.c    ****     */
 219:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 220:Src/main.c    **** 
 221:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 222:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 223:Src/main.c    **** }
 224:Src/main.c    **** 
 225:Src/main.c    **** /* CRC init function */
 226:Src/main.c    **** static void MX_CRC_Init(void)
 227:Src/main.c    **** {
 228:Src/main.c    **** 
 229:Src/main.c    ****   hcrc.Instance = CRC;
 230:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 231:Src/main.c    ****   {
 232:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 233:Src/main.c    ****   }
 234:Src/main.c    **** 
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** /* IWDG init function */
 238:Src/main.c    **** static void MX_IWDG_Init(void)
 239:Src/main.c    **** {
 240:Src/main.c    **** 
 241:Src/main.c    ****   hiwdg.Instance = IWDG;
 242:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 243:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 244:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 245:Src/main.c    ****   {
 246:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 247:Src/main.c    ****   }
 248:Src/main.c    **** 
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** /* SPI1 init function */
 252:Src/main.c    **** static void MX_SPI1_Init(void)
 253:Src/main.c    **** {
 254:Src/main.c    **** 
 255:Src/main.c    ****   hspi1.Instance = SPI1;
 256:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 257:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 258:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 259:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 260:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 261:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
ARM GAS  /tmp/ccVDpVa6.s 			page 6


 262:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 263:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 264:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 265:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 266:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 267:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 268:Src/main.c    ****   {
 269:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 270:Src/main.c    ****   }
 271:Src/main.c    **** 
 272:Src/main.c    **** }
 273:Src/main.c    **** 
 274:Src/main.c    **** /** Configure pins as
 275:Src/main.c    ****         * Analog
 276:Src/main.c    ****         * Input
 277:Src/main.c    ****         * Output
 278:Src/main.c    ****         * EVENT_OUT
 279:Src/main.c    ****         * EXTI
 280:Src/main.c    **** */
 281:Src/main.c    **** static void MX_GPIO_Init(void)
 282:Src/main.c    **** {
 283:Src/main.c    **** 
 284:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* GPIO Ports Clock Enable */
 287:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 288:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 289:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 290:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 291:Src/main.c    **** 
 292:Src/main.c    ****   /*Configure GPIO pin Output Level */
 293:Src/main.c    ****   HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 294:Src/main.c    **** 
 295:Src/main.c    ****   /*Configure GPIO pin Output Level */
 296:Src/main.c    ****   HAL_GPIO_WritePin(SI4463_nSEL_GPIO_Port, SI4463_nSEL_Pin, GPIO_PIN_RESET);
 297:Src/main.c    **** 
 298:Src/main.c    ****   /*Configure GPIO pin : RED_LED_Pin */
 299:Src/main.c    ****   GPIO_InitStruct.Pin = RED_LED_Pin;
 300:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 301:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 302:Src/main.c    ****   HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 303:Src/main.c    **** 
 304:Src/main.c    ****   /*Configure GPIO pin : SI4463_IRQ_Pin */
 305:Src/main.c    ****   GPIO_InitStruct.Pin = SI4463_IRQ_Pin;
 306:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 307:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 308:Src/main.c    ****   HAL_GPIO_Init(SI4463_IRQ_GPIO_Port, &GPIO_InitStruct);
 309:Src/main.c    **** 
 310:Src/main.c    ****   /*Configure GPIO pin : SI4463_nSEL_Pin */
 311:Src/main.c    ****   GPIO_InitStruct.Pin = SI4463_nSEL_Pin;
 312:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 313:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 314:Src/main.c    ****   HAL_GPIO_Init(SI4463_nSEL_GPIO_Port, &GPIO_InitStruct);
 315:Src/main.c    **** 
 316:Src/main.c    **** }
 317:Src/main.c    **** 
 318:Src/main.c    **** /* USER CODE BEGIN 4 */
ARM GAS  /tmp/ccVDpVa6.s 			page 7


 319:Src/main.c    **** 
 320:Src/main.c    **** /* USER CODE END 4 */
 321:Src/main.c    **** 
 322:Src/main.c    **** /* StartDefaultTask function */
 323:Src/main.c    **** void StartDefaultTask(void const * argument)
 324:Src/main.c    **** {
  26              		.loc 1 324 0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 64
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 91B0     		sub	sp, sp, #68
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 72
 325:Src/main.c    ****   /* init code for USB_DEVICE */
 326:Src/main.c    ****   MX_USB_DEVICE_Init();
  39              		.loc 1 326 0
  40 0004 FFF7FEFF 		bl	MX_USB_DEVICE_Init
  41              	.LVL1:
 327:Src/main.c    **** 
 328:Src/main.c    ****   /* USER CODE BEGIN 5 */
 329:Src/main.c    ****   //serial_log_init();
 330:Src/main.c    ****   rf_init(&hspi1, SI4463_nSEL_GPIO_Port, SI4463_nSEL_Pin);
  42              		.loc 1 330 0
  43 0008 0222     		movs	r2, #2
  44 000a 1149     		ldr	r1, .L7
  45 000c 1148     		ldr	r0, .L7+4
  46 000e FFF7FEFF 		bl	rf_init
  47              	.LVL2:
  48              	.LBB14:
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* Infinite loop */
 333:Src/main.c    ****   for(;;)
 334:Src/main.c    ****   {
 335:Src/main.c    **** 
 336:Src/main.c    ****     //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 337:Src/main.c    ****     osDelay(1000);
 338:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  49              		.loc 1 338 0
  50 0012 114C     		ldr	r4, .L7+8
  51              	.L3:
 337:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  52              		.loc 1 337 0
  53 0014 4FF47A70 		mov	r0, #1000
  54 0018 FFF7FEFF 		bl	osDelay
  55              	.LVL3:
  56              		.loc 1 338 0
  57 001c 4FF40051 		mov	r1, #8192
  58 0020 2046     		mov	r0, r4
  59 0022 FFF7FEFF 		bl	HAL_GPIO_TogglePin
  60              	.LVL4:
 339:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
ARM GAS  /tmp/ccVDpVa6.s 			page 8


 340:Src/main.c    **** 
 341:Src/main.c    ****     uint8_t data[64] = { 0 };
  61              		.loc 1 341 0
  62 0026 0021     		movs	r1, #0
  63 0028 4022     		movs	r2, #64
  64 002a 6846     		mov	r0, sp
  65 002c FFF7FEFF 		bl	memset
  66              	.LVL5:
 342:Src/main.c    ****     if (rf_receive(data, sizeof data)) {
  67              		.loc 1 342 0
  68 0030 4021     		movs	r1, #64
  69 0032 6846     		mov	r0, sp
  70 0034 FFF7FEFF 		bl	rf_receive
  71              	.LVL6:
  72 0038 0028     		cmp	r0, #0
  73 003a EBD0     		beq	.L3
 343:Src/main.c    ****       CDC_Transmit_FS((uint8_t *)data, sizeof data);
  74              		.loc 1 343 0
  75 003c 4021     		movs	r1, #64
  76 003e 6846     		mov	r0, sp
  77 0040 FFF7FEFF 		bl	CDC_Transmit_FS
  78              	.LVL7:
 344:Src/main.c    ****       osDelay(500);
  79              		.loc 1 344 0
  80 0044 4FF4FA70 		mov	r0, #500
  81 0048 FFF7FEFF 		bl	osDelay
  82              	.LVL8:
  83              	.LBE14:
 334:Src/main.c    **** 
  84              		.loc 1 334 0
  85 004c E2E7     		b	.L3
  86              	.L8:
  87 004e 00BF     		.align	2
  88              	.L7:
  89 0050 000C0140 		.word	1073810432
  90 0054 00000000 		.word	hspi1
  91 0058 00100140 		.word	1073811456
  92              		.cfi_endproc
  93              	.LFE71:
  95              		.section	.text.SystemClock_Config,"ax",%progbits
  96              		.align	1
  97              		.global	SystemClock_Config
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu softvfp
 103              	SystemClock_Config:
 104              	.LFB66:
 171:Src/main.c    **** 
 105              		.loc 1 171 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 80
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 179:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 109              		.loc 1 179 0
 110 0000 0923     		movs	r3, #9
 171:Src/main.c    **** 
ARM GAS  /tmp/ccVDpVa6.s 			page 9


 111              		.loc 1 171 0
 112 0002 70B5     		push	{r4, r5, r6, lr}
 113              	.LCFI2:
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 4, -16
 116              		.cfi_offset 5, -12
 117              		.cfi_offset 6, -8
 118              		.cfi_offset 14, -4
 119 0004 94B0     		sub	sp, sp, #80
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 96
 179:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 122              		.loc 1 179 0
 123 0006 0A93     		str	r3, [sp, #40]
 180:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 124              		.loc 1 180 0
 125 0008 4FF48033 		mov	r3, #65536
 182:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 126              		.loc 1 182 0
 127 000c 0124     		movs	r4, #1
 180:Src/main.c    ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 128              		.loc 1 180 0
 129 000e 0B93     		str	r3, [sp, #44]
 181:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 130              		.loc 1 181 0
 131 0010 0022     		movs	r2, #0
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 132              		.loc 1 184 0
 133 0012 0226     		movs	r6, #2
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 134              		.loc 1 185 0
 135 0014 1293     		str	r3, [sp, #72]
 186:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 136              		.loc 1 186 0
 137 0016 4FF48013 		mov	r3, #1048576
 187:Src/main.c    ****   {
 138              		.loc 1 187 0
 139 001a 0AA8     		add	r0, sp, #40
 181:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 140              		.loc 1 181 0
 141 001c 0C92     		str	r2, [sp, #48]
 182:Src/main.c    ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 142              		.loc 1 182 0
 143 001e 0E94     		str	r4, [sp, #56]
 183:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 144              		.loc 1 183 0
 145 0020 1094     		str	r4, [sp, #64]
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 146              		.loc 1 184 0
 147 0022 1196     		str	r6, [sp, #68]
 186:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 148              		.loc 1 186 0
 149 0024 1393     		str	r3, [sp, #76]
 187:Src/main.c    ****   {
 150              		.loc 1 187 0
 151 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 152              	.LVL9:
ARM GAS  /tmp/ccVDpVa6.s 			page 10


 153 002a 00B1     		cbz	r0, .L10
 154              	.L16:
 155 002c FEE7     		b	.L16
 156              	.L10:
 194:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 157              		.loc 1 194 0
 158 002e 0F25     		movs	r5, #15
 198:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 159              		.loc 1 198 0
 160 0030 4FF48063 		mov	r3, #1024
 197:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 161              		.loc 1 197 0
 162 0034 0790     		str	r0, [sp, #28]
 199:Src/main.c    **** 
 163              		.loc 1 199 0
 164 0036 0990     		str	r0, [sp, #36]
 201:Src/main.c    ****   {
 165              		.loc 1 201 0
 166 0038 2146     		mov	r1, r4
 167 003a 05A8     		add	r0, sp, #20
 194:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 168              		.loc 1 194 0
 169 003c 0595     		str	r5, [sp, #20]
 196:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 170              		.loc 1 196 0
 171 003e 0696     		str	r6, [sp, #24]
 198:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 172              		.loc 1 198 0
 173 0040 0893     		str	r3, [sp, #32]
 201:Src/main.c    ****   {
 174              		.loc 1 201 0
 175 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 176              	.LVL10:
 177 0046 00B1     		cbz	r0, .L12
 178              	.L17:
 179 0048 FEE7     		b	.L17
 180              	.L12:
 206:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 181              		.loc 1 206 0
 182 004a 1023     		movs	r3, #16
 183 004c 0193     		str	r3, [sp, #4]
 207:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 184              		.loc 1 207 0
 185 004e 4FF48003 		mov	r3, #4194304
 208:Src/main.c    ****   {
 186              		.loc 1 208 0
 187 0052 01A8     		add	r0, sp, #4
 207:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 188              		.loc 1 207 0
 189 0054 0493     		str	r3, [sp, #16]
 208:Src/main.c    ****   {
 190              		.loc 1 208 0
 191 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 192              	.LVL11:
 193 005a 0446     		mov	r4, r0
 194 005c 00B1     		cbz	r0, .L14
 195              	.L18:
ARM GAS  /tmp/ccVDpVa6.s 			page 11


 196 005e FEE7     		b	.L18
 197              	.L14:
 215:Src/main.c    **** 
 198              		.loc 1 215 0
 199 0060 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 200              	.LVL12:
 201 0064 4FF47A73 		mov	r3, #1000
 202 0068 B0FBF3F0 		udiv	r0, r0, r3
 203 006c FFF7FEFF 		bl	HAL_SYSTICK_Config
 204              	.LVL13:
 219:Src/main.c    **** 
 205              		.loc 1 219 0
 206 0070 0420     		movs	r0, #4
 207 0072 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 208              	.LVL14:
 222:Src/main.c    **** }
 209              		.loc 1 222 0
 210 0076 2246     		mov	r2, r4
 211 0078 2946     		mov	r1, r5
 212 007a 4FF0FF30 		mov	r0, #-1
 213 007e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 214              	.LVL15:
 223:Src/main.c    **** 
 215              		.loc 1 223 0
 216 0082 14B0     		add	sp, sp, #80
 217              	.LCFI4:
 218              		.cfi_def_cfa_offset 16
 219              		@ sp needed
 220 0084 70BD     		pop	{r4, r5, r6, pc}
 221              		.cfi_endproc
 222              	.LFE66:
 224              		.section	.text.startup.main,"ax",%progbits
 225              		.align	1
 226              		.global	main
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	main:
 233              	.LFB65:
  92:Src/main.c    **** 
 234              		.loc 1 92 0
 235              		.cfi_startproc
 236              		@ Volatile: function does not return.
 237              		@ args = 0, pretend = 0, frame = 40
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 00B5     		push	{lr}
 240              	.LCFI5:
 241              		.cfi_def_cfa_offset 4
 242              		.cfi_offset 14, -4
 243 0002 8BB0     		sub	sp, sp, #44
 244              	.LCFI6:
 245              		.cfi_def_cfa_offset 48
 101:Src/main.c    **** 
 246              		.loc 1 101 0
 247 0004 FFF7FEFF 		bl	HAL_Init
 248              	.LVL16:
ARM GAS  /tmp/ccVDpVa6.s 			page 12


 108:Src/main.c    **** 
 249              		.loc 1 108 0
 250 0008 FFF7FEFF 		bl	SystemClock_Config
 251              	.LVL17:
 252              	.LBB27:
 253              	.LBB28:
 254              	.LBB29:
 287:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 255              		.loc 1 287 0
 256 000c 424B     		ldr	r3, .L30
 257              	.LBE29:
 293:Src/main.c    **** 
 258              		.loc 1 293 0
 259 000e 4FF40051 		mov	r1, #8192
 260              	.LBB30:
 287:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 261              		.loc 1 287 0
 262 0012 9A69     		ldr	r2, [r3, #24]
 263              	.LBE30:
 293:Src/main.c    **** 
 264              		.loc 1 293 0
 265 0014 4148     		ldr	r0, .L30+4
 266              	.LBB31:
 287:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 267              		.loc 1 287 0
 268 0016 42F01002 		orr	r2, r2, #16
 269 001a 9A61     		str	r2, [r3, #24]
 270 001c 9A69     		ldr	r2, [r3, #24]
 271              	.LBE31:
 300:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 272              		.loc 1 300 0
 273 001e 0124     		movs	r4, #1
 274              	.LBB32:
 287:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 275              		.loc 1 287 0
 276 0020 02F01002 		and	r2, r2, #16
 277 0024 0192     		str	r2, [sp, #4]
 278 0026 019A     		ldr	r2, [sp, #4]
 279              	.LBE32:
 280              	.LBB33:
 288:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 281              		.loc 1 288 0
 282 0028 9A69     		ldr	r2, [r3, #24]
 283              	.LBE33:
 301:Src/main.c    ****   HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 284              		.loc 1 301 0
 285 002a 0225     		movs	r5, #2
 286              	.LBB34:
 288:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 287              		.loc 1 288 0
 288 002c 42F02002 		orr	r2, r2, #32
 289 0030 9A61     		str	r2, [r3, #24]
 290 0032 9A69     		ldr	r2, [r3, #24]
 291 0034 02F02002 		and	r2, r2, #32
 292 0038 0292     		str	r2, [sp, #8]
 293 003a 029A     		ldr	r2, [sp, #8]
 294              	.LBE34:
ARM GAS  /tmp/ccVDpVa6.s 			page 13


 295              	.LBB35:
 289:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 296              		.loc 1 289 0
 297 003c 9A69     		ldr	r2, [r3, #24]
 298 003e 42F00402 		orr	r2, r2, #4
 299 0042 9A61     		str	r2, [r3, #24]
 300 0044 9A69     		ldr	r2, [r3, #24]
 301 0046 02F00402 		and	r2, r2, #4
 302 004a 0392     		str	r2, [sp, #12]
 303 004c 039A     		ldr	r2, [sp, #12]
 304              	.LBE35:
 305              	.LBB36:
 290:Src/main.c    **** 
 306              		.loc 1 290 0
 307 004e 9A69     		ldr	r2, [r3, #24]
 308 0050 42F00802 		orr	r2, r2, #8
 309 0054 9A61     		str	r2, [r3, #24]
 310 0056 9B69     		ldr	r3, [r3, #24]
 311              	.LBE36:
 293:Src/main.c    **** 
 312              		.loc 1 293 0
 313 0058 0022     		movs	r2, #0
 314              	.LBB37:
 290:Src/main.c    **** 
 315              		.loc 1 290 0
 316 005a 03F00803 		and	r3, r3, #8
 317 005e 0493     		str	r3, [sp, #16]
 318 0060 049B     		ldr	r3, [sp, #16]
 319              	.LBE37:
 293:Src/main.c    **** 
 320              		.loc 1 293 0
 321 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 322              	.LVL18:
 296:Src/main.c    **** 
 323              		.loc 1 296 0
 324 0066 0022     		movs	r2, #0
 325 0068 0221     		movs	r1, #2
 326 006a 2D48     		ldr	r0, .L30+8
 327 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 328              	.LVL19:
 299:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 329              		.loc 1 299 0
 330 0070 4FF40053 		mov	r3, #8192
 302:Src/main.c    **** 
 331              		.loc 1 302 0
 332 0074 05A9     		add	r1, sp, #20
 333 0076 2948     		ldr	r0, .L30+4
 299:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 334              		.loc 1 299 0
 335 0078 0593     		str	r3, [sp, #20]
 300:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 336              		.loc 1 300 0
 337 007a 0694     		str	r4, [sp, #24]
 301:Src/main.c    ****   HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 338              		.loc 1 301 0
 339 007c 0895     		str	r5, [sp, #32]
 302:Src/main.c    **** 
ARM GAS  /tmp/ccVDpVa6.s 			page 14


 340              		.loc 1 302 0
 341 007e FFF7FEFF 		bl	HAL_GPIO_Init
 342              	.LVL20:
 306:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 343              		.loc 1 306 0
 344 0082 284B     		ldr	r3, .L30+12
 308:Src/main.c    **** 
 345              		.loc 1 308 0
 346 0084 05A9     		add	r1, sp, #20
 347 0086 2648     		ldr	r0, .L30+8
 306:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 348              		.loc 1 306 0
 349 0088 0693     		str	r3, [sp, #24]
 305:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 350              		.loc 1 305 0
 351 008a 0594     		str	r4, [sp, #20]
 307:Src/main.c    ****   HAL_GPIO_Init(SI4463_IRQ_GPIO_Port, &GPIO_InitStruct);
 352              		.loc 1 307 0
 353 008c 0794     		str	r4, [sp, #28]
 308:Src/main.c    **** 
 354              		.loc 1 308 0
 355 008e FFF7FEFF 		bl	HAL_GPIO_Init
 356              	.LVL21:
 314:Src/main.c    **** 
 357              		.loc 1 314 0
 358 0092 2348     		ldr	r0, .L30+8
 359 0094 05A9     		add	r1, sp, #20
 311:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 360              		.loc 1 311 0
 361 0096 0595     		str	r5, [sp, #20]
 312:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 362              		.loc 1 312 0
 363 0098 0694     		str	r4, [sp, #24]
 313:Src/main.c    ****   HAL_GPIO_Init(SI4463_nSEL_GPIO_Port, &GPIO_InitStruct);
 364              		.loc 1 313 0
 365 009a 0895     		str	r5, [sp, #32]
 314:Src/main.c    **** 
 366              		.loc 1 314 0
 367 009c FFF7FEFF 		bl	HAL_GPIO_Init
 368              	.LVL22:
 369              	.LBE28:
 370              	.LBE27:
 371              	.LBB38:
 372              	.LBB39:
 229:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 373              		.loc 1 229 0
 374 00a0 2148     		ldr	r0, .L30+16
 375 00a2 224B     		ldr	r3, .L30+20
 376 00a4 0360     		str	r3, [r0]
 230:Src/main.c    ****   {
 377              		.loc 1 230 0
 378 00a6 FFF7FEFF 		bl	HAL_CRC_Init
 379              	.LVL23:
 380 00aa 00B1     		cbz	r0, .L20
 381              	.L27:
 382 00ac FEE7     		b	.L27
 383              	.L20:
ARM GAS  /tmp/ccVDpVa6.s 			page 15


 384              	.LBE39:
 385              	.LBE38:
 386              	.LBB40:
 387              	.LBB41:
 241:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 388              		.loc 1 241 0
 389 00ae 204B     		ldr	r3, .L30+24
 390 00b0 204A     		ldr	r2, .L30+28
 242:Src/main.c    ****   hiwdg.Init.Reload = 4095;
 391              		.loc 1 242 0
 392 00b2 5860     		str	r0, [r3, #4]
 241:Src/main.c    ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 393              		.loc 1 241 0
 394 00b4 1A60     		str	r2, [r3]
 243:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 395              		.loc 1 243 0
 396 00b6 40F6FF72 		movw	r2, #4095
 244:Src/main.c    ****   {
 397              		.loc 1 244 0
 398 00ba 1846     		mov	r0, r3
 243:Src/main.c    ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 399              		.loc 1 243 0
 400 00bc 9A60     		str	r2, [r3, #8]
 244:Src/main.c    ****   {
 401              		.loc 1 244 0
 402 00be FFF7FEFF 		bl	HAL_IWDG_Init
 403              	.LVL24:
 404 00c2 00B1     		cbz	r0, .L22
 405              	.L28:
 406 00c4 FEE7     		b	.L28
 407              	.L22:
 408              	.LBE41:
 409              	.LBE40:
 410              	.LBB42:
 411              	.LBB43:
 256:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 412              		.loc 1 256 0
 413 00c6 4FF48272 		mov	r2, #260
 255:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 414              		.loc 1 255 0
 415 00ca 1B4B     		ldr	r3, .L30+32
 256:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 416              		.loc 1 256 0
 417 00cc 1B49     		ldr	r1, .L30+36
 257:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 418              		.loc 1 257 0
 419 00ce 9860     		str	r0, [r3, #8]
 256:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 420              		.loc 1 256 0
 421 00d0 83E80600 		stm	r3, {r1, r2}
 261:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 422              		.loc 1 261 0
 423 00d4 4FF40072 		mov	r2, #512
 424 00d8 9A61     		str	r2, [r3, #24]
 262:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 425              		.loc 1 262 0
 426 00da 1022     		movs	r2, #16
ARM GAS  /tmp/ccVDpVa6.s 			page 16


 427 00dc DA61     		str	r2, [r3, #28]
 266:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 428              		.loc 1 266 0
 429 00de 0A22     		movs	r2, #10
 258:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 430              		.loc 1 258 0
 431 00e0 D860     		str	r0, [r3, #12]
 259:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 432              		.loc 1 259 0
 433 00e2 1861     		str	r0, [r3, #16]
 260:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 434              		.loc 1 260 0
 435 00e4 5861     		str	r0, [r3, #20]
 263:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 436              		.loc 1 263 0
 437 00e6 1862     		str	r0, [r3, #32]
 264:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 438              		.loc 1 264 0
 439 00e8 5862     		str	r0, [r3, #36]
 265:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 440              		.loc 1 265 0
 441 00ea 9862     		str	r0, [r3, #40]
 267:Src/main.c    ****   {
 442              		.loc 1 267 0
 443 00ec 1846     		mov	r0, r3
 266:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 444              		.loc 1 266 0
 445 00ee DA62     		str	r2, [r3, #44]
 267:Src/main.c    ****   {
 446              		.loc 1 267 0
 447 00f0 FFF7FEFF 		bl	HAL_SPI_Init
 448              	.LVL25:
 449 00f4 0646     		mov	r6, r0
 450 00f6 00B1     		cbz	r0, .L24
 451              	.L29:
 452 00f8 FEE7     		b	.L29
 453              	.L24:
 454              	.LBE43:
 455              	.LBE42:
 138:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 456              		.loc 1 138 0
 457 00fa 114D     		ldr	r5, .L30+40
 458 00fc 05AC     		add	r4, sp, #20
 459 00fe 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 460 0100 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 461 0102 2B68     		ldr	r3, [r5]
 139:Src/main.c    **** 
 462              		.loc 1 139 0
 463 0104 3146     		mov	r1, r6
 464 0106 05A8     		add	r0, sp, #20
 138:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 465              		.loc 1 138 0
 466 0108 2360     		str	r3, [r4]
 139:Src/main.c    **** 
 467              		.loc 1 139 0
 468 010a FFF7FEFF 		bl	osThreadCreate
 469              	.LVL26:
ARM GAS  /tmp/ccVDpVa6.s 			page 17


 470 010e 0D4B     		ldr	r3, .L30+44
 471 0110 1860     		str	r0, [r3]
 151:Src/main.c    **** 
 472              		.loc 1 151 0
 473 0112 FFF7FEFF 		bl	osKernelStart
 474              	.LVL27:
 475              	.L26:
 476 0116 FEE7     		b	.L26
 477              	.L31:
 478              		.align	2
 479              	.L30:
 480 0118 00100240 		.word	1073876992
 481 011c 00100140 		.word	1073811456
 482 0120 000C0140 		.word	1073810432
 483 0124 00002110 		.word	270598144
 484 0128 00000000 		.word	hcrc
 485 012c 00300240 		.word	1073885184
 486 0130 00000000 		.word	hiwdg
 487 0134 00300040 		.word	1073754112
 488 0138 00000000 		.word	hspi1
 489 013c 00300140 		.word	1073819648
 490 0140 00000000 		.word	.LANCHOR0
 491 0144 00000000 		.word	defaultTaskHandle
 492              		.cfi_endproc
 493              	.LFE65:
 495              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 496              		.align	1
 497              		.global	HAL_TIM_PeriodElapsedCallback
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu softvfp
 503              	HAL_TIM_PeriodElapsedCallback:
 504              	.LFB72:
 345:Src/main.c    ****     }
 346:Src/main.c    **** 
 347:Src/main.c    ****   }
 348:Src/main.c    ****   /* USER CODE END 5 */
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** /**
 352:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 353:Src/main.c    ****   * @note   This function is called  when TIM1 interrupt took place, inside
 354:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 355:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 356:Src/main.c    ****   * @param  htim : TIM handle
 357:Src/main.c    ****   * @retval None
 358:Src/main.c    ****   */
 359:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 360:Src/main.c    **** {
 505              		.loc 1 360 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510              	.LVL28:
 361:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
ARM GAS  /tmp/ccVDpVa6.s 			page 18


 362:Src/main.c    **** 
 363:Src/main.c    **** /* USER CODE END Callback 0 */
 364:Src/main.c    ****   if (htim->Instance == TIM1) {
 511              		.loc 1 364 0
 512 0000 0268     		ldr	r2, [r0]
 513 0002 034B     		ldr	r3, .L34
 514 0004 9A42     		cmp	r2, r3
 515 0006 01D1     		bne	.L32
 365:Src/main.c    ****     HAL_IncTick();
 516              		.loc 1 365 0
 517 0008 FFF7FEBF 		b	HAL_IncTick
 518              	.LVL29:
 519              	.L32:
 520 000c 7047     		bx	lr
 521              	.L35:
 522 000e 00BF     		.align	2
 523              	.L34:
 524 0010 002C0140 		.word	1073818624
 525              		.cfi_endproc
 526              	.LFE72:
 528              		.section	.text._Error_Handler,"ax",%progbits
 529              		.align	1
 530              		.global	_Error_Handler
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu softvfp
 536              	_Error_Handler:
 537              	.LFB73:
 366:Src/main.c    ****   }
 367:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 368:Src/main.c    **** 
 369:Src/main.c    **** /* USER CODE END Callback 1 */
 370:Src/main.c    **** }
 371:Src/main.c    **** 
 372:Src/main.c    **** /**
 373:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 374:Src/main.c    ****   * @param  None
 375:Src/main.c    ****   * @retval None
 376:Src/main.c    ****   */
 377:Src/main.c    **** void _Error_Handler(char * file, int line)
 378:Src/main.c    **** {
 538              		.loc 1 378 0
 539              		.cfi_startproc
 540              		@ Volatile: function does not return.
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544              	.LVL30:
 545              	.L37:
 546 0000 FEE7     		b	.L37
 547              		.cfi_endproc
 548              	.LFE73:
 550              		.comm	defaultTaskHandle,4,4
 551              		.comm	hspi1,88,4
 552              		.comm	hiwdg,16,4
 553              		.comm	hcrc,8,4
ARM GAS  /tmp/ccVDpVa6.s 			page 19


 554              		.section	.rodata
 555              		.align	2
 556              		.set	.LANCHOR0,. + 0
 557              	.LC2:
 558 0000 00000000 		.word	.LC0
 559 0004 00000000 		.word	StartDefaultTask
 560 0008 0000     		.short	0
 561 000a 0000     		.space	2
 562 000c 00000000 		.word	0
 563 0010 80000000 		.word	128
 564              		.section	.rodata.str1.1,"aMS",%progbits,1
 565              	.LC0:
 566 0000 64656661 		.ascii	"defaultTask\000"
 566      756C7454 
 566      61736B00 
 567              		.text
 568              	.Letext0:
 569              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_default_types.h"
 570              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 571              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 572              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 573              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 574              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 575              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 576              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 577              		.file 10 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 578              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 579              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 580              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 581              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 582              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 583              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_crc.h"
 584              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_iwdg.h"
 585              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 586              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 587              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 588              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 589              		.file 22 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 590              		.file 23 "Inc/usb_device.h"
 591              		.file 24 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 592              		.file 25 "Inc/usbd_cdc_if.h"
 593              		.file 26 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 594              		.file 27 "app/rf/rf.h"
 595              		.file 28 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccVDpVa6.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVDpVa6.s:16     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccVDpVa6.s:23     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccVDpVa6.s:89     .text.StartDefaultTask:0000000000000050 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccVDpVa6.s:96     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccVDpVa6.s:103    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccVDpVa6.s:225    .text.startup.main:0000000000000000 $t
     /tmp/ccVDpVa6.s:232    .text.startup.main:0000000000000000 main
     /tmp/ccVDpVa6.s:480    .text.startup.main:0000000000000118 $d
                            *COM*:0000000000000008 hcrc
                            *COM*:0000000000000010 hiwdg
                            *COM*:0000000000000004 defaultTaskHandle
     /tmp/ccVDpVa6.s:496    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccVDpVa6.s:503    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccVDpVa6.s:524    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccVDpVa6.s:529    .text._Error_Handler:0000000000000000 $t
     /tmp/ccVDpVa6.s:536    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccVDpVa6.s:555    .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
MX_USB_DEVICE_Init
rf_init
osDelay
HAL_GPIO_TogglePin
memset
rf_receive
CDC_Transmit_FS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_CRC_Init
HAL_IWDG_Init
HAL_SPI_Init
osThreadCreate
osKernelStart
HAL_IncTick
