ARM GAS  /tmp/ccWauIPI.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.xEventGroupCreate,"ax",%progbits
  16              		.align	1
  17              		.global	xEventGroupCreate
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	xEventGroupCreate:
  24              	.LFB1:
  25              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  /tmp/ccWauIPI.s 			page 2


  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( INCLUDE_xEventGroupSetBitFromISR == 1 ) && ( configUSE_TIMERS == 0 )
ARM GAS  /tmp/ccWauIPI.s 			page 3


  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#error configUSE_TIMERS must be set to 1 to make the xEventGroupSetBitFromISR() function available
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( INCLUDE_xEventGroupSetBitFromISR == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 0 )
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#error INCLUDE_xTimerPendFunctionCall must also be set to one to make the xEventGroupSetBitFromISR
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroupHandle_t xEventGroupCreate( void )
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  26              		.loc 1 139 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
ARM GAS  /tmp/ccWauIPI.s 			page 4


  34              		.cfi_offset 14, -4
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits;
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
  35              		.loc 1 142 0
  36 0002 1820     		movs	r0, #24
  37 0004 FFF7FEFF 		bl	pvPortMalloc
  38              	.LVL0:
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( pxEventBits != NULL )
  39              		.loc 1 143 0
  40 0008 0446     		mov	r4, r0
  41 000a 20B1     		cbz	r0, .L2
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits = 0;
  42              		.loc 1 145 0
  43 000c 0023     		movs	r3, #0
  44 000e 40F8043B 		str	r3, [r0], #4
  45              	.LVL1:
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
  46              		.loc 1 146 0
  47 0012 FFF7FEFF 		bl	vListInitialise
  48              	.LVL2:
  49              	.L2:
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CREATE( pxEventBits );
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CREATE_FAILED();
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return ( EventGroupHandle_t ) pxEventBits;
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  50              		.loc 1 155 0
  51 0016 2046     		mov	r0, r4
  52 0018 10BD     		pop	{r4, pc}
  53              		.cfi_endproc
  54              	.LFE1:
  56              		.section	.text.xEventGroupWaitBits,"ax",%progbits
  57              		.align	1
  58              		.global	xEventGroupWaitBits
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	xEventGroupWaitBits:
  65              	.LFB3:
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
ARM GAS  /tmp/ccWauIPI.s 			page 5


 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
ARM GAS  /tmp/ccWauIPI.s 			page 6


 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  66              		.loc 1 275 0
  67              		.cfi_startproc
  68              		@ args = 4, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL3:
ARM GAS  /tmp/ccWauIPI.s 			page 7


  71 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 32
  74              		.cfi_offset 4, -32
  75              		.cfi_offset 5, -28
  76              		.cfi_offset 6, -24
  77              		.cfi_offset 7, -20
  78              		.cfi_offset 8, -16
  79              		.cfi_offset 9, -12
  80              		.cfi_offset 10, -8
  81              		.cfi_offset 14, -4
  82              		.loc 1 275 0
  83 0004 089F     		ldr	r7, [sp, #32]
  84 0006 0D46     		mov	r5, r1
  85 0008 9046     		mov	r8, r2
  86 000a 9946     		mov	r9, r3
  87              	.LVL4:
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
  88              		.loc 1 283 0
  89 000c 0646     		mov	r6, r0
  90 000e 10B9     		cbnz	r0, .L7
  91              		.loc 1 283 0 is_stmt 0 discriminator 1
  92 0010 FFF7FEFF 		bl	ulPortSetInterruptMask
  93              	.LVL5:
  94              	.L8:
  95 0014 FEE7     		b	.L8
  96              	.LVL6:
  97              	.L7:
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
  98              		.loc 1 284 0 is_stmt 1
  99 0016 11F07F4A 		ands	r10, r1, #-16777216
 100 001a 02D0     		beq	.L9
 101              		.loc 1 284 0 is_stmt 0 discriminator 1
 102 001c FFF7FEFF 		bl	ulPortSetInterruptMask
 103              	.LVL7:
 104              	.L10:
 105 0020 FEE7     		b	.L10
 106              	.LVL8:
 107              	.L9:
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 108              		.loc 1 285 0 is_stmt 1
 109 0022 11B9     		cbnz	r1, .L11
 110              		.loc 1 285 0 is_stmt 0 discriminator 1
 111 0024 FFF7FEFF 		bl	ulPortSetInterruptMask
 112              	.LVL9:
 113              	.L12:
 114 0028 FEE7     		b	.L12
 115              	.LVL10:
 116              	.L11:
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccWauIPI.s 			page 8


 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 117              		.loc 1 288 0 is_stmt 1
 118 002a FFF7FEFF 		bl	xTaskGetSchedulerState
 119              	.LVL11:
 120 002e 18BB     		cbnz	r0, .L13
 121              		.loc 1 288 0 is_stmt 0 discriminator 2
 122 0030 17B3     		cbz	r7, .L13
 123              		.loc 1 288 0
 124 0032 FFF7FEFF 		bl	ulPortSetInterruptMask
 125              	.LVL12:
 126              	.L15:
 127 0036 FEE7     		b	.L15
 128              	.LVL13:
 129              	.L27:
 130              	.LBB7:
 131              	.LBB8:
 132              	.LBB9:
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
ARM GAS  /tmp/ccWauIPI.s 			page 9


 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccWauIPI.s 			page 10


 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
ARM GAS  /tmp/ccWauIPI.s 			page 11


 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
ARM GAS  /tmp/ccWauIPI.s 			page 12


 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
ARM GAS  /tmp/ccWauIPI.s 			page 13


 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		vPortFree( pxEventBits );
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccWauIPI.s 			page 14


 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 133              		.loc 1 621 0 is_stmt 1
 134 0038 43BB     		cbnz	r3, .L16
 135              	.L17:
 136              	.LVL14:
 137              	.LBE9:
 138              	.LBE8:
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 139              		.loc 1 316 0
 140 003a 97B1     		cbz	r7, .L33
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 141              		.loc 1 330 0
 142 003c B8F1000F 		cmp	r8, #0
 143 0040 0CBF     		ite	eq
 144 0042 0021     		moveq	r1, #0
 145 0044 4FF08071 		movne	r1, #16777216
 146              	.LVL15:
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 147              		.loc 1 337 0
 148 0048 B9F1000F 		cmp	r9, #0
 149 004c 01D0     		beq	.L20
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 150              		.loc 1 339 0
 151 004e 41F08061 		orr	r1, r1, #67108864
 152              	.LVL16:
 153              	.L20:
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 154              		.loc 1 349 0
 155 0052 3A46     		mov	r2, r7
 156 0054 2943     		orrs	r1, r1, r5
 157              	.LVL17:
 158 0056 301D     		adds	r0, r6, #4
 159 0058 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 160              	.LVL18:
 161 005c BA46     		mov	r10, r7
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 162              		.loc 1 354 0
 163 005e 0024     		movs	r4, #0
 164              	.LVL19:
 165 0060 1AE0     		b	.L18
 166              	.LVL20:
 167              	.L33:
 168 0062 BA46     		mov	r10, r7
 169 0064 18E0     		b	.L18
 170              	.LVL21:
 171              	.L24:
 172              	.LBE7:
 173              	.LBB12:
 174              	.LBB13:
ARM GAS  /tmp/ccWauIPI.s 			page 15


 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 175              		.loc 1 634 0
 176 0066 9D42     		cmp	r5, r3
 177 0068 2DD1     		bne	.L26
 178              	.L25:
 179              	.LVL22:
 180              	.LBE13:
 181              	.LBE12:
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 182              		.loc 1 389 0
 183 006a B8F1000F 		cmp	r8, #0
 184 006e 2AD0     		beq	.L26
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 185              		.loc 1 391 0
 186 0070 24EA0505 		bic	r5, r4, r5
 187              	.LVL23:
 188 0074 3560     		str	r5, [r6]
 189 0076 26E0     		b	.L26
 190              	.LVL24:
 191              	.L13:
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 192              		.loc 1 292 0
 193 0078 FFF7FEFF 		bl	vTaskSuspendAll
 194              	.LVL25:
 195              	.LBB15:
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 196              		.loc 1 294 0
 197 007c 3468     		ldr	r4, [r6]
 198              	.LVL26:
 199 007e 05EA0403 		and	r3, r5, r4
 200              	.LBB11:
 201              	.LBB10:
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 202              		.loc 1 617 0
 203 0082 B9F1000F 		cmp	r9, #0
 204 0086 D7D0     		beq	.L27
 205              		.loc 1 634 0
 206 0088 9D42     		cmp	r5, r3
 207 008a D6D1     		bne	.L17
 208              	.L16:
 209              	.LVL27:
 210              	.LBE10:
 211              	.LBE11:
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 212              		.loc 1 307 0
ARM GAS  /tmp/ccWauIPI.s 			page 16


 213 008c B8F1000F 		cmp	r8, #0
 214 0090 02D0     		beq	.L18
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 215              		.loc 1 309 0
 216 0092 24EA0503 		bic	r3, r4, r5
 217 0096 3360     		str	r3, [r6]
 218              	.LVL28:
 219              	.L18:
 220              	.LBE15:
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 221              		.loc 1 359 0
 222 0098 FFF7FEFF 		bl	xTaskResumeAll
 223              	.LVL29:
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 224              		.loc 1 361 0
 225 009c BAF1000F 		cmp	r10, #0
 226 00a0 15D0     		beq	.L6
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 227              		.loc 1 363 0
 228 00a2 08B9     		cbnz	r0, .L22
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 229              		.loc 1 365 0
 230 00a4 FFF7FEFF 		bl	vPortYield
 231              	.LVL30:
 232              	.L22:
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 233              		.loc 1 376 0
 234 00a8 FFF7FEFF 		bl	uxTaskResetEventItemValue
 235              	.LVL31:
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 236              		.loc 1 378 0
 237 00ac 8301     		lsls	r3, r0, #6
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 238              		.loc 1 376 0
 239 00ae 0446     		mov	r4, r0
 240              	.LVL32:
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 241              		.loc 1 378 0
 242 00b0 0BD4     		bmi	.L23
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 243              		.loc 1 380 0
 244 00b2 FFF7FEFF 		bl	vPortEnterCritical
 245              	.LVL33:
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 246              		.loc 1 383 0
 247 00b6 3468     		ldr	r4, [r6]
 248              	.LVL34:
 249 00b8 05EA0403 		and	r3, r5, r4
 250              	.LBB16:
 251              	.LBB14:
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 252              		.loc 1 617 0
 253 00bc B9F1000F 		cmp	r9, #0
 254 00c0 D1D1     		bne	.L24
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255              		.loc 1 621 0
 256 00c2 002B     		cmp	r3, #0
ARM GAS  /tmp/ccWauIPI.s 			page 17


 257 00c4 D1D1     		bne	.L25
 258              	.LVL35:
 259              	.L26:
 260              	.LBE14:
 261              	.LBE16:
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 262              		.loc 1 403 0
 263 00c6 FFF7FEFF 		bl	vPortExitCritical
 264              	.LVL36:
 265              	.L23:
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 266              		.loc 1 414 0
 267 00ca 24F07F44 		bic	r4, r4, #-16777216
 268              	.LVL37:
 269              	.L6:
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 270              		.loc 1 419 0
 271 00ce 2046     		mov	r0, r4
 272 00d0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 273              		.cfi_endproc
 274              	.LFE3:
 276              		.section	.text.xEventGroupClearBits,"ax",%progbits
 277              		.align	1
 278              		.global	xEventGroupClearBits
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 282              		.fpu softvfp
 284              	xEventGroupClearBits:
 285              	.LFB4:
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 286              		.loc 1 423 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              	.LVL38:
 291 0000 70B5     		push	{r4, r5, r6, lr}
 292              	.LCFI2:
 293              		.cfi_def_cfa_offset 16
 294              		.cfi_offset 4, -16
 295              		.cfi_offset 5, -12
 296              		.cfi_offset 6, -8
 297              		.cfi_offset 14, -4
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 298              		.loc 1 423 0
 299 0002 0C46     		mov	r4, r1
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 300              		.loc 1 429 0
 301 0004 0546     		mov	r5, r0
 302 0006 10B9     		cbnz	r0, .L47
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 303              		.loc 1 429 0 is_stmt 0 discriminator 1
 304 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 305              	.LVL39:
 306              	.L48:
 307 000c FEE7     		b	.L48
 308              	.LVL40:
ARM GAS  /tmp/ccWauIPI.s 			page 18


 309              	.L47:
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 310              		.loc 1 430 0 is_stmt 1
 311 000e 11F07F4F 		tst	r1, #-16777216
 312 0012 02D0     		beq	.L49
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 313              		.loc 1 430 0 is_stmt 0 discriminator 1
 314 0014 FFF7FEFF 		bl	ulPortSetInterruptMask
 315              	.LVL41:
 316              	.L50:
 317 0018 FEE7     		b	.L50
 318              	.LVL42:
 319              	.L49:
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 320              		.loc 1 432 0 is_stmt 1
 321 001a FFF7FEFF 		bl	vPortEnterCritical
 322              	.LVL43:
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 323              		.loc 1 438 0
 324 001e 2E68     		ldr	r6, [r5]
 325              	.LVL44:
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 326              		.loc 1 441 0
 327 0020 26EA0404 		bic	r4, r6, r4
 328              	.LVL45:
 329 0024 2C60     		str	r4, [r5]
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 330              		.loc 1 443 0
 331 0026 FFF7FEFF 		bl	vPortExitCritical
 332              	.LVL46:
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 333              		.loc 1 446 0
 334 002a 3046     		mov	r0, r6
 335 002c 70BD     		pop	{r4, r5, r6, pc}
 336              		.cfi_endproc
 337              	.LFE4:
 339              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 340              		.align	1
 341              		.global	xEventGroupGetBitsFromISR
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 345              		.fpu softvfp
 347              	xEventGroupGetBitsFromISR:
 348              	.LFB5:
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 349              		.loc 1 465 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              	.LVL47:
 354 0000 10B5     		push	{r4, lr}
 355              	.LCFI3:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 4, -8
 358              		.cfi_offset 14, -4
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccWauIPI.s 			page 19


 359              		.loc 1 465 0
 360 0002 0446     		mov	r4, r0
 361              	.LVL48:
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 362              		.loc 1 470 0
 363 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 364              	.LVL49:
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 365              		.loc 1 472 0
 366 0008 2468     		ldr	r4, [r4]
 367              	.LVL50:
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 368              		.loc 1 474 0
 369 000a FFF7FEFF 		bl	vPortClearInterruptMask
 370              	.LVL51:
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 371              		.loc 1 477 0
 372 000e 2046     		mov	r0, r4
 373 0010 10BD     		pop	{r4, pc}
 374              		.cfi_endproc
 375              	.LFE5:
 377              		.section	.text.xEventGroupSetBits,"ax",%progbits
 378              		.align	1
 379              		.global	xEventGroupSetBits
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu softvfp
 385              	xEventGroupSetBits:
 386              	.LFB6:
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 387              		.loc 1 481 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              	.LVL52:
 392 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 393              	.LCFI4:
 394              		.cfi_def_cfa_offset 24
 395              		.cfi_offset 3, -24
 396              		.cfi_offset 4, -20
 397              		.cfi_offset 5, -16
 398              		.cfi_offset 6, -12
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 401              		.loc 1 481 0
 402 0002 0F46     		mov	r7, r1
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 403              		.loc 1 491 0
 404 0004 0446     		mov	r4, r0
 405 0006 10B9     		cbnz	r0, .L53
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 406              		.loc 1 491 0 is_stmt 0 discriminator 1
 407 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 408              	.LVL53:
 409              	.L54:
ARM GAS  /tmp/ccWauIPI.s 			page 20


 410 000c FEE7     		b	.L54
 411              	.LVL54:
 412              	.L53:
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 413              		.loc 1 492 0 is_stmt 1
 414 000e 11F07F45 		ands	r5, r1, #-16777216
 415 0012 02D0     		beq	.L55
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 416              		.loc 1 492 0 is_stmt 0 discriminator 1
 417 0014 FFF7FEFF 		bl	ulPortSetInterruptMask
 418              	.LVL55:
 419              	.L56:
 420 0018 FEE7     		b	.L56
 421              	.LVL56:
 422              	.L55:
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 423              		.loc 1 495 0 is_stmt 1
 424 001a 00F10C06 		add	r6, r0, #12
 425              	.LVL57:
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 426              		.loc 1 496 0
 427 001e FFF7FEFF 		bl	vTaskSuspendAll
 428              	.LVL58:
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 429              		.loc 1 503 0
 430 0022 2368     		ldr	r3, [r4]
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 431              		.loc 1 500 0
 432 0024 2069     		ldr	r0, [r4, #16]
 433              	.LVL59:
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 434              		.loc 1 503 0
 435 0026 3B43     		orrs	r3, r3, r7
 436 0028 2360     		str	r3, [r4]
 437              	.LVL60:
 438              	.L57:
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 439              		.loc 1 506 0
 440 002a B042     		cmp	r0, r6
 441 002c 2168     		ldr	r1, [r4]
 442 002e 06D1     		bne	.L61
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 443              		.loc 1 566 0
 444 0030 21EA0501 		bic	r1, r1, r5
 445 0034 2160     		str	r1, [r4]
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 446              		.loc 1 568 0
 447 0036 FFF7FEFF 		bl	xTaskResumeAll
 448              	.LVL61:
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 449              		.loc 1 570 0
 450 003a 2068     		ldr	r0, [r4]
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 451              		.loc 1 571 0
 452 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 453              	.LVL62:
 454              	.L61:
ARM GAS  /tmp/ccWauIPI.s 			page 21


 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 455              		.loc 1 509 0
 456 003e 90E88800 		ldm	r0, {r3, r7}
 457              	.LVL63:
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 458              		.loc 1 516 0
 459 0042 13F0806F 		tst	r3, #67108864
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 460              		.loc 1 514 0
 461 0046 23F07F42 		bic	r2, r3, #-16777216
 462              	.LVL64:
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 463              		.loc 1 516 0
 464 004a 03D1     		bne	.L58
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 465              		.loc 1 519 0
 466 004c 0A42     		tst	r2, r1
 467 004e 04D1     		bne	.L59
 468              	.LVL65:
 469              	.L60:
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 470              		.loc 1 481 0
 471 0050 3846     		mov	r0, r7
 472 0052 EAE7     		b	.L57
 473              	.LVL66:
 474              	.L58:
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 475              		.loc 1 528 0
 476 0054 32EA010E 		bics	lr, r2, r1
 477 0058 FAD1     		bne	.L60
 478              	.L59:
 479              	.LVL67:
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 480              		.loc 1 541 0
 481 005a DB01     		lsls	r3, r3, #7
 482              	.LVL68:
 483 005c 00D5     		bpl	.L63
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 484              		.loc 1 543 0
 485 005e 1543     		orrs	r5, r5, r2
 486              	.LVL69:
 487              	.L63:
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 488              		.loc 1 555 0
 489 0060 41F00071 		orr	r1, r1, #33554432
 490 0064 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 491              	.LVL70:
 492 0068 F2E7     		b	.L60
 493              		.cfi_endproc
 494              	.LFE6:
 496              		.section	.text.xEventGroupSync,"ax",%progbits
 497              		.align	1
 498              		.global	xEventGroupSync
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu softvfp
ARM GAS  /tmp/ccWauIPI.s 			page 22


 504              	xEventGroupSync:
 505              	.LFB2:
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 506              		.loc 1 159 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              	.LVL71:
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 511              		.loc 1 165 0
 512 0000 12F07F4F 		tst	r2, #-16777216
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 513              		.loc 1 159 0
 514 0004 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 515              	.LCFI5:
 516              		.cfi_def_cfa_offset 24
 517              		.cfi_offset 4, -24
 518              		.cfi_offset 5, -20
 519              		.cfi_offset 6, -16
 520              		.cfi_offset 7, -12
 521              		.cfi_offset 8, -8
 522              		.cfi_offset 14, -4
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 523              		.loc 1 159 0
 524 0008 0646     		mov	r6, r0
 525 000a 8846     		mov	r8, r1
 526 000c 1546     		mov	r5, r2
 527              	.LVL72:
 528 000e 1F46     		mov	r7, r3
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 529              		.loc 1 165 0
 530 0010 02D0     		beq	.L67
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 531              		.loc 1 165 0 is_stmt 0 discriminator 1
 532 0012 FFF7FEFF 		bl	ulPortSetInterruptMask
 533              	.LVL73:
 534              	.L68:
 535 0016 FEE7     		b	.L68
 536              	.LVL74:
 537              	.L67:
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 538              		.loc 1 166 0 is_stmt 1
 539 0018 12B9     		cbnz	r2, .L69
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 540              		.loc 1 166 0 is_stmt 0 discriminator 1
 541 001a FFF7FEFF 		bl	ulPortSetInterruptMask
 542              	.LVL75:
 543              	.L70:
 544 001e FEE7     		b	.L70
 545              	.LVL76:
 546              	.L69:
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 547              		.loc 1 169 0 is_stmt 1
 548 0020 FFF7FEFF 		bl	xTaskGetSchedulerState
 549              	.LVL77:
 550 0024 70B9     		cbnz	r0, .L71
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccWauIPI.s 			page 23


 551              		.loc 1 169 0 is_stmt 0 discriminator 2
 552 0026 6FB1     		cbz	r7, .L71
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 553              		.loc 1 169 0
 554 0028 FFF7FEFF 		bl	ulPortSetInterruptMask
 555              	.LVL78:
 556              	.L73:
 557 002c FEE7     		b	.L73
 558              	.LVL79:
 559              	.L89:
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 560              		.loc 1 192 0 is_stmt 1
 561 002e 3FB1     		cbz	r7, .L75
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562              		.loc 1 199 0
 563 0030 3A46     		mov	r2, r7
 564 0032 45F0A061 		orr	r1, r5, #83886080
 565 0036 301D     		adds	r0, r6, #4
 566 0038 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 567              	.LVL80:
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 568              		.loc 1 205 0
 569 003c 0024     		movs	r4, #0
 570 003e 12E0     		b	.L74
 571              	.LVL81:
 572              	.L75:
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 573              		.loc 1 211 0
 574 0040 3468     		ldr	r4, [r6]
 575              	.LVL82:
 576 0042 10E0     		b	.L74
 577              	.LVL83:
 578              	.L71:
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 579              		.loc 1 173 0
 580 0044 FFF7FEFF 		bl	vTaskSuspendAll
 581              	.LVL84:
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 582              		.loc 1 175 0
 583 0048 3468     		ldr	r4, [r6]
 584              	.LVL85:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 585              		.loc 1 177 0
 586 004a 4146     		mov	r1, r8
 587 004c 3046     		mov	r0, r6
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 588              		.loc 1 179 0
 589 004e 44EA0804 		orr	r4, r4, r8
 590              	.LVL86:
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 591              		.loc 1 177 0
 592 0052 FFF7FEFF 		bl	xEventGroupSetBits
 593              	.LVL87:
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 594              		.loc 1 179 0
 595 0056 35EA0403 		bics	r3, r5, r4
 596 005a E8D1     		bne	.L89
ARM GAS  /tmp/ccWauIPI.s 			page 24


 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 597              		.loc 1 188 0
 598 005c 0027     		movs	r7, #0
 599              	.LVL88:
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 600              		.loc 1 186 0
 601 005e 3368     		ldr	r3, [r6]
 602 0060 23EA0503 		bic	r3, r3, r5
 603 0064 3360     		str	r3, [r6]
 604              	.LVL89:
 605              	.L74:
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 606              		.loc 1 215 0
 607 0066 FFF7FEFF 		bl	xTaskResumeAll
 608              	.LVL90:
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 609              		.loc 1 217 0
 610 006a A7B1     		cbz	r7, .L66
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 611              		.loc 1 219 0
 612 006c 08B9     		cbnz	r0, .L77
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 613              		.loc 1 221 0
 614 006e FFF7FEFF 		bl	vPortYield
 615              	.LVL91:
 616              	.L77:
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 617              		.loc 1 232 0
 618 0072 FFF7FEFF 		bl	uxTaskResetEventItemValue
 619              	.LVL92:
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 620              		.loc 1 234 0
 621 0076 8301     		lsls	r3, r0, #6
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 622              		.loc 1 232 0
 623 0078 0446     		mov	r4, r0
 624              	.LVL93:
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 625              		.loc 1 234 0
 626 007a 0AD4     		bmi	.L78
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 627              		.loc 1 237 0
 628 007c FFF7FEFF 		bl	vPortEnterCritical
 629              	.LVL94:
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 630              		.loc 1 239 0
 631 0080 3468     		ldr	r4, [r6]
 632              	.LVL95:
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 633              		.loc 1 245 0
 634 0082 35EA0403 		bics	r3, r5, r4
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 635              		.loc 1 247 0
 636 0086 04BF     		itt	eq
 637 0088 24EA0505 		biceq	r5, r4, r5
 638              	.LVL96:
 639 008c 3560     		streq	r5, [r6]
ARM GAS  /tmp/ccWauIPI.s 			page 25


 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 640              		.loc 1 254 0
 641 008e FFF7FEFF 		bl	vPortExitCritical
 642              	.LVL97:
 643              	.L78:
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 644              		.loc 1 265 0
 645 0092 24F07F44 		bic	r4, r4, #-16777216
 646              	.LVL98:
 647              	.L66:
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 648              		.loc 1 271 0
 649 0096 2046     		mov	r0, r4
 650 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 651              		.cfi_endproc
 652              	.LFE2:
 654              		.section	.text.vEventGroupDelete,"ax",%progbits
 655              		.align	1
 656              		.global	vEventGroupDelete
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu softvfp
 662              	vEventGroupDelete:
 663              	.LFB7:
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 664              		.loc 1 575 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              	.LVL99:
 669 0000 38B5     		push	{r3, r4, r5, lr}
 670              	.LCFI6:
 671              		.cfi_def_cfa_offset 16
 672              		.cfi_offset 3, -16
 673              		.cfi_offset 4, -12
 674              		.cfi_offset 5, -8
 675              		.cfi_offset 14, -4
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 676              		.loc 1 575 0
 677 0002 0446     		mov	r4, r0
 678              	.LVL100:
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 679              		.loc 1 579 0
 680 0004 FFF7FEFF 		bl	vTaskSuspendAll
 681              	.LVL101:
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 682              		.loc 1 587 0
 683 0008 04F10C05 		add	r5, r4, #12
 684              	.L91:
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 685              		.loc 1 583 0
 686 000c 6368     		ldr	r3, [r4, #4]
 687 000e 33B9     		cbnz	r3, .L94
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 688              		.loc 1 591 0
 689 0010 2046     		mov	r0, r4
ARM GAS  /tmp/ccWauIPI.s 			page 26


 690 0012 FFF7FEFF 		bl	vPortFree
 691              	.LVL102:
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 692              		.loc 1 594 0
 693 0016 BDE83840 		pop	{r3, r4, r5, lr}
 694              	.LCFI7:
 695              		.cfi_remember_state
 696              		.cfi_restore 14
 697              		.cfi_restore 5
 698              		.cfi_restore 4
 699              		.cfi_restore 3
 700              		.cfi_def_cfa_offset 0
 701              	.LVL103:
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 702              		.loc 1 593 0
 703 001a FFF7FEBF 		b	xTaskResumeAll
 704              	.LVL104:
 705              	.L94:
 706              	.LCFI8:
 707              		.cfi_restore_state
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 708              		.loc 1 587 0
 709 001e 2069     		ldr	r0, [r4, #16]
 710 0020 A842     		cmp	r0, r5
 711 0022 02D1     		bne	.L92
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 712              		.loc 1 587 0 is_stmt 0 discriminator 1
 713 0024 FFF7FEFF 		bl	ulPortSetInterruptMask
 714              	.LVL105:
 715              	.L93:
 716 0028 FEE7     		b	.L93
 717              	.L92:
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 718              		.loc 1 588 0 is_stmt 1
 719 002a 4FF00071 		mov	r1, #33554432
 720 002e FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 721              	.LVL106:
 722 0032 EBE7     		b	.L91
 723              		.cfi_endproc
 724              	.LFE7:
 726              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 727              		.align	1
 728              		.global	vEventGroupSetBitsCallback
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu softvfp
 734              	vEventGroupSetBitsCallback:
 735              	.LFB8:
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 736              		.loc 1 600 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741              	.LVL107:
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
ARM GAS  /tmp/ccWauIPI.s 			page 27


 742              		.loc 1 601 0
 743 0000 FFF7FEBF 		b	xEventGroupSetBits
 744              	.LVL108:
 745              		.cfi_endproc
 746              	.LFE8:
 748              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 749              		.align	1
 750              		.global	vEventGroupClearBitsCallback
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu softvfp
 756              	vEventGroupClearBitsCallback:
 757              	.LFB9:
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 758              		.loc 1 608 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 763              	.LVL109:
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 764              		.loc 1 609 0
 765 0000 FFF7FEBF 		b	xEventGroupClearBits
 766              	.LVL110:
 767              		.cfi_endproc
 768              	.LFE9:
 770              		.text
 771              	.Letext0:
 772              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/machine/_default_types.h"
 773              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/lock.h"
 774              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_types.h"
 775              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q1-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 776              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/reent.h"
 777              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q1-update/arm-none-eabi/include/sys/_stdint.h"
 778              		.file 8 "Inc/FreeRTOSConfig.h"
 779              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
 780              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 781              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 782              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 783              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccWauIPI.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccWauIPI.s:16     .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccWauIPI.s:23     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccWauIPI.s:57     .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccWauIPI.s:64     .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccWauIPI.s:277    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccWauIPI.s:284    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccWauIPI.s:340    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccWauIPI.s:347    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccWauIPI.s:378    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccWauIPI.s:385    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccWauIPI.s:497    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccWauIPI.s:504    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccWauIPI.s:655    .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccWauIPI.s:662    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccWauIPI.s:727    .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccWauIPI.s:734    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccWauIPI.s:749    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccWauIPI.s:756    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
ulPortSetInterruptMask
xTaskGetSchedulerState
vTaskPlaceOnUnorderedEventList
vTaskSuspendAll
xTaskResumeAll
vPortYield
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vPortClearInterruptMask
xTaskRemoveFromUnorderedEventList
vPortFree
